[
    {
        "instructions": "Implement a Java class for a music streaming service with fields for user information, playlists, and favorite songs. Ensure the implementation adheres to Object-Oriented Programming Principles, including inheritance, polymorphism, abstraction, aggregation, association, static, and encapsulation. The class should feature a detailed relationship between other classes, either through inheritance and aggregation, inheritance and association, inheritance alone, or association and aggregation. Additionally, provide a `toString()` method for string representation of the object.",
        "input": "",
        "output": "// MusicStreamingService class representing a music streaming service\npublic class MusicStreamingService {\n    // Static variable\n    private static int userCount = 0;\n\n    // Instance variables\n    private String serviceName;\n    private User[] users;\n    private Playlist playlist;\n\n    // Constructor\n    public MusicStreamingService(String serviceName, User[] users, Playlist playlist) {\n        this.serviceName = serviceName;\n        this.users = users;\n        this.playlist = playlist;\n        userCount++;\n    }\n\n    // Getter methods\n    public String getServiceName() {\n        return serviceName;\n    }\n\n    public User[] getUsers() {\n        return users;\n    }\n\n    public Playlist getPlaylist() {\n        return playlist;\n    }\n\n    public static int getUserCount() {\n        return userCount;\n    }\n\n    // Method to display service details\n    @Override\n    public String toString() {\n        return \"MusicStreamingService{\" +\n                \"serviceName='\" + serviceName + '\\'' +\n                \", users=\" + Arrays.toString(users) +\n                \", playlist=\" + playlist +\n                '}';\n    }\n}\n\n// User class representing a user of the music streaming service\npublic class User {\n    private String userName;\n    private String email;\n\n    // Constructor\n    public User(String userName, String email) {\n        this.userName = userName;\n        this.email = email;\n    }\n\n    // Getter methods\n    public String getUserName() {\n        return userName;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    // Method to display user details\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"userName='\" + userName + '\\'' +\n                \", email='\" + email + '\\'' +\n                '}';\n    }\n}\n\n// Playlist class representing a playlist in the music streaming service\npublic class Playlist {\n    private String playlistName;\n    private Song[] songs;\n\n    // Constructor\n    public Playlist(String playlistName, Song[] songs) {\n        this.playlistName = playlistName;\n        this.songs = songs;\n    }\n\n    // Getter methods\n    public String getPlaylistName() {\n        return playlistName;\n    }\n\n    public Song[] getSongs() {\n        return songs;\n    }\n\n    // Method to display playlist details\n    @Override\n    public String toString() {\n        return \"Playlist{\" +\n                \"playlistName='\" + playlistName + '\\'' +\n                \", songs=\" + Arrays.toString(songs) +\n                '}';\n    }\n}\n\n// Song class representing a song in the music streaming service\npublic class Song {\n    private String songName;\n    private String artist;\n\n    // Constructor\n    public Song(String songName, String artist) {\n        this.songName = songName;\n        this.artist = artist;\n    }\n\n    // Getter methods\n    public String getSongName() {\n        return songName;\n    }\n\n    public String getArtist() {\n        return artist;\n    }\n\n    // Method to display song details\n    @Override\n    public String toString() {\n        return \"Song{\" +\n                \"songName='\" + songName + '\\'' +\n                \", artist='\" + artist + '\\'' +\n                '}';\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating users\n        User user1 = new User(\"John Doe\", \"john@example.com\");\n        User user2 = new User(\"Alice Smith\", \"alice@example.com\");\n        User[] users = {user1, user2};\n\n        // Creating songs\n        Song song1 = new Song(\"Song 1\", \"Artist 1\");\n        Song song2 = new Song(\"Song 2\", \"Artist 2\");\n        Song[] songs = {song1, song2};\n\n        // Creating playlist\n        Playlist playlist = new Playlist(\"My Playlist\", songs);\n\n        // Creating music streaming service\n        MusicStreamingService service = new MusicStreamingService(\"Music Service\", users, playlist);\n\n        // Displaying service details\n        System.out.println(\"Service Details:\");\n        System.out.println(service);\n\n        // Displaying total user count\n        System.out.println(\"Total User Count: \" + MusicStreamingService.getUserCount());\n    }\n}"
    },
    {
        "instruction": "Write a Java class for a BankAccount that demonstrates encapsulation by encapsulating attributes like account number and balance, abstraction by providing methods for depositing, withdrawing, and checking balance, and inheritance by extending a superclass Account.",
        "input": "",
        "output": "// Superclass Account\nclass Account {\n    private int accountNumber;\n    private double balance;\n\n    public Account(int accountNumber, double balance) {\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n\n    // Getter methods for encapsulation\n    public int getAccountNumber() {\n        return accountNumber;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    // Abstract method for withdrawing (to be implemented by subclasses)\n    public abstract void withdraw(double amount);\n\n    // Abstract method for depositing (to be implemented by subclasses)\n    public abstract void deposit(double amount);\n}\n\n// Subclass BankAccount\nclass BankAccount extends Account {\n    public BankAccount(int accountNumber, double balance) {\n        super(accountNumber, balance);\n    }\n\n    // Implementing withdraw method\n    @Override\n    public void withdraw(double amount) {\n        if (amount > 0 && amount <= getBalance()) {\n            setBalance(getBalance() - amount);\n            System.out.println(\"Withdrawn: $\" + amount);\n        } else {\n            System.out.println(\"Invalid amount or insufficient balance.\");\n        }\n    }\n\n    // Implementing deposit method\n    @Override\n    public void deposit(double amount) {\n        if (amount > 0) {\n            setBalance(getBalance() + amount);\n            System.out.println(\"Deposited: $\" + amount);\n        } else {\n            System.out.println(\"Invalid amount.\");\n        }\n    }\n}\n\n// Main class to demonstrate the BankAccount class\npublic class Main {\n    public static void main(String[] args) {\n        // Creating a BankAccount object\n        BankAccount account = new BankAccount(123456, 1000.0);\n\n        // Demonstrating encapsulation by accessing account number and balance using getter methods\n        System.out.println(\"Account Number: \" + account.getAccountNumber());\n        System.out.println(\"Balance: $\" + account.getBalance());\n\n        // Depositing and withdrawing money\n        account.deposit(500.0);\n        account.withdraw(200.0);\n\n        // Checking balance after transactions\n        System.out.println(\"New Balance: $\" + account.getBalance());\n    }\n}"
    },
    {
        "instruction": "Write a Java class for a University with fields for name, location, number of students, and departments. Include a method for displaying university details.",
        "input": "",
        "output": "// University class representing a university\npublic class University {\n    private String name;\n    private String location;\n    private int numOfStudents;\n    private Department[] departments;\n\n    // Constructor\n    public University(String name, String location, int numOfStudents, Department[] departments) {\n        this.name = name;\n        this.location = location;\n        this.numOfStudents = numOfStudents;\n        this.departments = departments;\n    }\n\n    // Getter methods\n    public String getName() {\n        return name;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n\n    public int getNumOfStudents() {\n        return numOfStudents;\n    }\n\n    public Department[] getDepartments() {\n        return departments;\n    }\n\n    // Method to display university details\n    @Override\n    public String toString() {\n        return \"University{\" +\n                \"name='\" + name + '\\'' +\n                \", location='\" + location + '\\'' +\n                \", numOfStudents=\" + numOfStudents +\n                '}';\n    }\n}\n\n// Department class representing a department in the university\npublic class Department {\n    private String name;\n    private String headOfDepartment;\n    private Student[] students;\n\n    // Constructor\n    public Department(String name, String headOfDepartment, Student[] students) {\n        this.name = name;\n        this.headOfDepartment = headOfDepartment;\n        this.students = students;\n    }\n\n    // Getter methods\n    public String getName() {\n        return name;\n    }\n\n    public String getHeadOfDepartment() {\n        return headOfDepartment;\n    }\n\n    public Student[] getStudents() {\n        return students;\n    }\n\n    // Method to display department details\n    @Override\n    public String toString() {\n        return \"Department{\" +\n                \"name='\" + name + '\\'' +\n                \", headOfDepartment='\" + headOfDepartment + '\\'' +\n                '}';\n    }\n}\n\n// Student class representing a student\npublic class Student {\n    private String name;\n    private int age;\n    private String rollNumber;\n\n    // Constructor\n    public Student(String name, int age, String rollNumber) {\n        this.name = name;\n        this.age = age;\n        this.rollNumber = rollNumber;\n    }\n\n    // Getter methods\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String getRollNumber() {\n        return rollNumber;\n    }\n\n    // Method to display student details\n    @Override\n    public String toString() {\n        return \"Student{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                \", rollNumber='\" + rollNumber + '\\'' +\n                '}';\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating students\n        Student student1 = new Student(\"John Doe\", 20, \"101\");\n        Student student2 = new Student(\"Alice Smith\", 22, \"102\");\n\n        // Creating department\n        Student[] computerScienceStudents = {student1, student2};\n        Department computerScienceDepartment = new Department(\"Computer Science\", \"Dr. Smith\", computerScienceStudents);\n\n        // Creating university\n        Department[] departments = {computerScienceDepartment};\n        University university = new University(\"ABC University\", \"City A\", 1000, departments);\n\n        // Displaying university details\n        System.out.println(\"University Details:\");\n        System.out.println(university);\n\n        // Displaying department details\n        System.out.println(\"\\nDepartment Details:\");\n        System.out.println(computerScienceDepartment);\n\n        // Displaying student details\n        System.out.println(\"\\nStudent Details:\");\n        System.out.println(student1);\n        System.out.println(student2);\n    }\n}"
    },
    {
        "instruction": "Implement a Java class for representing a book with fields for title, author, number of pages, and price. Include a method for displaying book details.",
        "input": "",
        "output": "// Book class representing a book\npublic class Book {\n    private String title;\n    private String author;\n    private int pages;\n    private double price;\n\n    // Constructor\n    public Book(String title, String author, int pages, double price) {\n        this.title = title;\n        this.author = author;\n        this.pages = pages;\n        this.price = price;\n    }\n\n    // Getter methods\n    public String getTitle() {\n        return title;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public int getPages() {\n        return pages;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    // Method to display book details\n    @Override\n    public String toString() {\n        return \"Book{\" +\n                \"title='\" + title + '\\'' +\n                \", author='\" + author + '\\'' +\n                \", pages=\" + pages +\n                \", price=\" + price +\n                '}';\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating a Book object\n        Book book = new Book(\"Java Programming\", \"John Smith\", 500, 29.99);\n\n        // Displaying book details\n        System.out.println(\"Book Details:\");\n        System.out.println(book);\n    }\n}"
    },
    {
        "instruction": "Create a Java class for a Student with fields for name, roll number, marks, and grade. Include methods for updating marks, calculating grade, and displaying student details.",
        "input": "",
        "output": "// Student class representing a basic student\npublic class Student {\n    private String name;\n    private int rollNumber;\n    private double marks;\n    private char grade;\n\n    // Constructor\n    public Student(String name, int rollNumber, double marks) {\n        this.name = name;\n        this.rollNumber = rollNumber;\n        this.marks = marks;\n        this.grade = calculateGrade();\n    }\n\n    // Getter methods\n    public String getName() {\n        return name;\n    }\n\n    public int getRollNumber() {\n        return rollNumber;\n    }\n\n    public double getMarks() {\n        return marks;\n    }\n\n    public char getGrade() {\n        return grade;\n    }\n\n    // Setter methods\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setRollNumber(int rollNumber) {\n        this.rollNumber = rollNumber;\n    }\n\n    public void setMarks(double marks) {\n        this.marks = marks;\n        this.grade = calculateGrade();\n    }\n\n    // Method to calculate grade\n    private char calculateGrade() {\n        if (marks >= 90) {\n            return 'A';\n        } else if (marks >= 80) {\n            return 'B';\n        } else if (marks >= 70) {\n            return 'C';\n        } else if (marks >= 60) {\n            return 'D';\n        } else {\n            return 'F';\n        }\n    }\n\n    // Method to display student details\n    @Override\n    public String toString() {\n        return \"Student{\" +\n                \"name='\" + name + '\\'' +\n                \", rollNumber=\" + rollNumber +\n                \", marks=\" + marks +\n                \", grade='\" + grade + '\\'' +\n                '}';\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating a Student object\n        Student student = new Student(\"Alice\", 101, 85.5);\n\n        // Displaying student details\n        System.out.println(\"Student Details:\");\n        System.out.println(student);\n\n        // Updating marks\n        student.setMarks(92.0);\n        System.out.println(\"\\nAfter updating marks:\");\n        System.out.println(student);\n    }\n}"
    },
    {
        "instruction": "Write a Java class to represent a Product with fields for name, price, quantity, and category. Include methods for updating quantity, calculating total price, and displaying product details.",
        "input": "",
        "output": "// Product class representing a basic product\npublic class Product {\n    private String name;\n    private double price;\n    private int quantity;\n    private String category;\n\n    // Constructor\n    public Product(String name, double price, int quantity, String category) {\n        this.name = name;\n        this.price = price;\n        this.quantity = quantity;\n        this.category = category;\n    }\n\n    // Getter methods\n    public String getName() {\n        return name;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public int getQuantity() {\n        return quantity;\n    }\n\n    public String getCategory() {\n        return category;\n    }\n\n    // Setter methods\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    public void setQuantity(int quantity) {\n        this.quantity = quantity;\n    }\n\n    public void setCategory(String category) {\n        this.category = category;\n    }\n\n    // Method to update quantity\n    public void updateQuantity(int newQuantity) {\n        quantity = newQuantity;\n    }\n\n    // Method to calculate total price\n    public double calculateTotalPrice() {\n        return price * quantity;\n    }\n\n    // Method to display product details\n    @Override\n    public String toString() {\n        return \"Product{\" +\n                \"name='\" + name + '\\'' +\n\", price=\" + price +\n                \", quantity=\" + quantity +\n                \", category='\" + category + '\\'' +\n                '}';\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating a Product object\n        Product product = new Product(\"Laptop\", 999.99, 5, \"Electronics\");\n\n        // Displaying product details\n        System.out.println(\"Product Details:\");\n        System.out.println(product);\n\n        // Updating quantity\n        product.updateQuantity(10);\n        System.out.println(\"\\nAfter updating quantity:\");\n        System.out.println(product);\n\n        // Calculating total price\n        double totalPrice = product.calculateTotalPrice();\n        System.out.println(\"\\nTotal Price: $\" + totalPrice);\n    }\n}"
    },
    {
        "instruction": "Implement a Java class for a Rectangle with fields for length and width. Include methods for calculating area, perimeter, and displaying rectangle details.",
        "input": "",
        "output": "// Rectangle class representing a basic rectangle\npublic class Rectangle {\n    private double length;\n    private double width;\n\n    // Constructor\n    public Rectangle(double length, double width) {\n        this.length = length;\n        this.width = width;\n    }\n\n    // Getter methods\n    public double getLength() {\n        return length;\n    }\n\n    public double getWidth() {\n        return width;\n    }\n\n    // Setter methods\n    public void setLength(double length) {\n        this.length = length;\n    }\n\n    public void setWidth(double width) {\n        this.width = width;\n    }\n\n    // Method to calculate area\n    public double calculateArea() {\n        return length * width;\n    }\n\n    // Method to calculate perimeter\n    public double calculatePerimeter() {\n        return 2 * (length + width);\n    }\n\n    // Method to display rectangle details\n    @Override\n    public String toString() {\n        return \"Rectangle{\" +\n                \"length=\" + length +\n                \", width=\" + width +\n                '}';\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating a Rectangle object\n        Rectangle rectangle = new Rectangle(5.0, 3.0);\n\n        // Displaying rectangle details\n        System.out.println(\"Rectangle Details:\");\n        System.out.println(rectangle);\n\n        // Calculating area\n        double area = rectangle.calculateArea();\n        System.out.println(\"\\nArea: \" + area);\n\n        // Calculating perimeter\n        double perimeter = rectangle.calculatePerimeter();\n        System.out.println(\"Perimeter: \" + perimeter);\n    }\n}"
    },
    {
        "instruction": "Design a Java class for a Circle with a field for radius. Include methods for calculating area, circumference, and displaying circle details.",
        "input": "",
        "output": "// Circle class representing a basic circle\npublic class Circle {\n    private double radius;\n    private final double PI = 3.14;\n\n    // Constructor\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    // Getter method\n    public double getRadius() {\n        return radius;\n    }\n\n    // Setter method\n    public void setRadius(double radius) {\n        this.radius = radius;\n    }\n\n    // Method to calculate area\n    public double calculateArea() {\n        return PI * radius * radius;\n    }\n\n    // Method to calculate circumference\n    public double calculateCircumference() {\n        return 2 * PI * radius;\n    }\n\n    // Method to display circle details\n    @Override\n    public String toString() {\n        return \"Circle{\" +\n                \"radius=\" + radius +\n                '}';\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating a Circle object\n        Circle circle = new Circle(5.0);\n\n        // Displaying circle details\n        System.out.println(\"Circle Details:\");\n        System.out.println(circle);\n\n        // Calculating area\n        double area = circle.calculateArea();\n        System.out.println(\"\\nArea: \" + area);\n\n        // Calculating circumference\n        double circumference = circle.calculateCircumference();\n        System.out.println(\"Circumference: \" + circumference);\n    }\n}"
    },
    {
        "instruction": "Create a Java class for a Triangle with fields for base, height, and three sides. Include methods for calculating area, perimeter, and displaying triangle details.",
        "input": "",
        "output": "// Triangle class representing a basic triangle\npublic class Triangle {\n    private double base;\n    private double height;\n    private double side1;\n    private double side2;\n    private double side3;\n\n    // Constructor\n    public Triangle(double base, double height, double side1, double side2, double side3) {\n        this.base = base;\n        this.height = height;\n        this.side1 = side1;\n        this.side2 = side2;\n        this.side3 = side3;\n    }\n\n    // Getter methods\n    public double getBase() {\n        return base;\n    }\n\n    public double getHeight() {\n        return height;\n    }\n\n    public double getSide1() {\n        return side1;\n    }\n\n    public double getSide2() {\n        return side2;\n    }\n\n    public double getSide3() {\n        return side3;\n    }\n\n    // Setter methods\n    public void setBase(double base) {\n        this.base = base;\n    }\n\n    public void setHeight(double height) {\n        this.height = height;\n    }\n\n    public void setSide1(double side1) {\n        this.side1 = side1;\n    }\n\n    public void setSide2(double side2) {\n        this.side2 = side2;\n    }\n\n    public void setSide3(double side3) {\n        this.side3 = side3;\n    }\n\n    // Method to calculate area\n    public double calculateArea() {\n        return 0.5 * base * height;\n    }\n\n    // Method to calculate perimeter\n    public double calculatePerimeter() {\n        return side1 + side2 + side3;\n    }\n\n    // Method to display triangle details\n    @Override\n    public String toString() {\n        return \"Triangle{\" +\n                \"base=\" + base +\n                \", height=\" + height +\n                \", side1=\" + side1 +\n                \", side2=\" + side2 +\n                \", side3=\" + side3 +\n                '}';\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating a Triangle object\n        Triangle triangle = new Triangle(5.0, 4.0, 3.0, 4.0, 5.0);\n\n        // Displaying triangle details\n        System.out.println(\"Triangle Details:\");\n        System.out.println(triangle);\n\n        // Calculating area\n        double area = triangle.calculateArea();\n        System.out.println(\"\\nArea: \" + area);\n\n        // Calculating perimeter\n        double perimeter = triangle.calculatePerimeter();\n        System.out.println(\"Perimeter: \" + perimeter);\n    }\n}"
    },
    {
        "instruction": "Create a Java class for a Bank with fields for name, location, and type. Include methods for adding accounts, removing accounts, and displaying bank details.",
        "input": "",
        "output": "import java.util.ArrayList;\nimport java.util.List;\n\n// Bank class representing a bank\npublic class Bank {\n    private String name;\n    private String location;\n    private String type;\n    private List<String> accounts;\n\n    // Constructor\n    public Bank(String name, String location, String type) {\n        this.name = name;\n        this.location = location;\n        this.type = type;\n        this.accounts = new ArrayList<>();\n    }\n\n    // Method to add an account\n    public void addAccount(String account) {\n        accounts.add(account);\n    }\n\n    // Method to remove an account\n    public void removeAccount(String account) {\n        accounts.remove(account);\n    }\n\n    // Method to display bank details\n    @Override\n    public String toString() {\n        return \"Bank{\" +\n                \"name='\" + name + '\\'' +\n                \", location='\" + location + '\\'' +\n                \", type='\" + type + '\\'' +\n                \", accounts=\" + accounts +\n                '}';\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        // Creating a Bank object\n Bank bank = new Bank(\"ABC Bank\", \"New York\", \"Commercial\");\n\n        // Displaying bank details\n        System.out.println(\"Bank Details:\");\n        System.out.println(bank);\n\n        // Adding accounts\n        bank.addAccount(\"1234567890\");\n        bank.addAccount(\"0987654321\");\n        System.out.println(\"\\nAfter adding accounts:\");\n        System.out.println(bank);\n\n        // Removing an account\n        bank.removeAccount(\"1234567890\");\n        System.out.println(\"\\nAfter removing an account:\");\n        System.out.println(bank);\n    }\n}"
    },
    {
        "instruction": "Write a Java code to generate an Employee class with the following conditions:\n- There must be a relationship between classes.\n- Include OOP principles like inheritance, polymorphism, abstraction, aggregation, association, static, and encapsulation.\n- The relationship can be either:\n 1. Inheritance and aggregation.\n 2. Inheritance and association.\n 3. Inheritance.\n 4. Association and aggregation.\n- Must also include the toString() method of Java.",
        "input": "",
        "output": "// Employee class representing a basic employee\npublic class Employee {\n    private String name;\n    private int age;\n    private double salary;\n\n    // Constructor\n    public Employee(String name, int age, double salary) {\n        this.name = name;\n        this.age = age;\n        this.salary = salary;\n    }\n\n    // Getter methods\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    // Setter methods\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public void setSalary(double salary) {\n        this.salary = salary;\n    }\n\n    // Method to display employee details\n    public String toString() {\n        return \"Name: \" + name + \", Age: \" + age + \", Salary: \" + salary;\n    }\n}\n\n// Manager class inheriting from Employee class\npublic class Manager extends Employee {\n    private String department;\n\n    // Constructor\n    public Manager(String name, int age, double salary, String department) {\n        super(name, age, salary);\n        this.department = department;\n    }\n\n    // Getter and setter methods for department\n    public String getDepartment() {\n        return department;\n    }\n\n    public void setDepartment(String department) {\n        this.department = department;\n    }\n\n    // Method to display manager details, overriding toString() method\n    @Override\n    public String toString() {\n        return super.toString() + \", Department: \" + department;\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating an Employee object\n        Employee emp = new Employee(\"John\", 30, 50000);\n\n        // Displaying employee details\n        System.out.println(\"Employee Details:\");\n        System.out.println(emp);\n\n        // Creating a Manager object\n        Manager manager = new Manager(\"Alice\", 35, 70000, \"Finance\");\n\n        // Displaying manager details\n        System.out.println(\"\\nManager Details:\");\n        System.out.println(manager);\n    }\n}"
    },
    {
        "instruction": "Implement a Java class for a complex system with complex relationships between methods and instance variables. Ensure the implementation adheres to Object-Oriented Programming Principles, including inheritance, polymorphism, abstraction, aggregation, association, static, and encapsulation. The class should feature a detailed relationship between other classes, either through inheritance and aggregation, inheritance and association, inheritance alone, or association and aggregation. Additionally, provide a `toString()` method for string representation of the object.",
        "input": "",
        "output": "// ComplexSystem class representing a complex system\npublic class ComplexSystem {\n    // Static variable\n    private static int systemCount = 0;\n\n    // Instance variables\n    private String systemName;\n    private Component[] components;\n    private SubSystem subSystem;\n\n    // Constructor\n    public ComplexSystem(String systemName, Component[] components, SubSystem subSystem) {\n        this.systemName = systemName;\n        this.components = components;\n        this.subSystem = subSystem;\n        systemCount++;\n    }\n\n    // Getter methods\n    public String getSystemName() {\n        return systemName;\n    }\n\n    public Component[] getComponents() {\n        return components;\n    }\n\n    public SubSystem getSubSystem() {\n        return subSystem;\n    }\n\n    public static int getSystemCount() {\n        return systemCount;\n    }\n\n    // Method to display system details\n    @Override\n    public String toString() {\n        return \"ComplexSystem{\" +\n                \"systemName='\" + systemName + '\\'' +\n                \", components=\" + Arrays.toString(components) +\n                \", subSystem=\" + subSystem +\n                '}';\n    }\n}\n\n// Component class representing a component in the complex system\npublic class Component {\n    private String componentName;\n\n    // Constructor\n    public Component(String componentName) {\n        this.componentName = componentName;\n    }\n\n    // Getter method\n    public String getComponentName() {\n        return componentName;\n    }\n\n    // Method to display component details\n    @Override\n    public String toString() {\n        return \"Component{\" +\n                \"componentName='\" + componentName + '\\'' +\n                '}';\n    }\n}\n\n// SubSystem class representing a subsystem in the complex system\npublic class SubSystem {\n    private String subSystemName;\n\n    // Constructor\n    public SubSystem(String subSystemName) {\n        this.subSystemName = subSystemName;\n    }\n\n    // Getter method\n    public String getSubSystemName() {\n        return subSystemName;\n    }\n\n    // Method to display subsystem details\n    @Override\n    public String toString() {\n        return \"SubSystem{\" +\n                \"subSystemName='\" + subSystemName + '\\'' +\n                '}';\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating components\n        Component component1 = new Component(\"Component 1\");\n        Component component2 = new Component(\"Component 2\");\n        Component[] components = {component1, component2};\n\n        // Creating subsystem\n        SubSystem subSystem = new SubSystem(\"SubSystem 1\");\n\n        // Creating complex system\n        ComplexSystem system = new ComplexSystem(\"Complex System\", components, subSystem);\n\n        // Displaying system details\n        System.out.println(\"System Details:\");\n        System.out.println(system);\n\n        // Displaying total system count\n        System.out.println(\"Total System Count: \" + ComplexSystem.getSystemCount());\n    }\n}"
    },
    {
        "instrution": "Create a Java program illustrating inheritance and encapsulation using a Car class and its subclasses.",
        "input": "",
        "output": "//Car.java\npublic class Car {\nprivate String make;\nprivate String model;\nprivate int year;\n\npublic Car(String make, String model, int year) {\nthis.make = make;\nthis.model = model;\nthis.year = year;\n}\n\npublic String getMake() {\nreturn make;\n}\n\npublic void setMake(String make) {\nthis.make = make;\n}\n\npublic String getModel() {\nreturn model;\n}\n\npublic void setModel(String model) {\nthis.model = model;\n}\n\npublic int getYear() {\nreturn year;\n}\n\npublic void setYear(int year) {\nthis.year = year;\n}\n\npublic void displayInfo() {\nSystem.out.println(\"Make: \" + make);\nSystem.out.println(\"Model: \" + model);\nSystem.out.println(\"Year: \" + year);\n}\n}\n// ElectricCar.java (subclass)\npublic class ElectricCar extends Car {\nprivate int batteryCapacity;\n\npublic ElectricCar(String make, String model, int year, int batteryCapacity) {\nsuper(make, model, year);\nthis.batteryCapacity = batteryCapacity;\n}\n\npublic int getBatteryCapacity() {\nreturn batteryCapacity;\n}\n\npublic void setBatteryCapacity(int batteryCapacity) {\nthis.batteryCapacity = batteryCapacity;\n}\n// Method to display electric car information including battery capacity\n@Override\npublic void displayInfo() {\nsuper.displayInfo();\nSystem.out.println(\"Battery Capacity: \" + batteryCapacity + \" kWh\");\n}\n}\n// GasolineCar.java (subclass)\npublic class GasolineCar extends Car {\nprivate double fuelCapacity;\n\npublic GasolineCar(String make, String model, int year, double fuelCapacity) {\nsuper(make, model, year);\nthis.fuelCapacity = fuelCapacity;\n}\n\npublic double getFuelCapacity() {\nreturn fuelCapacity;\n}\n\npublic void setFuelCapacity(double fuelCapacity) {\nthis.fuelCapacity = fuelCapacity;\n}\n\npublic void displayInfo() {\nsuper.displayInfo();\nSystem.out.println(\"Fuel Capacity: \" + fuelCapacity + \" gallons\");\n}\n}\npublic class Main {\npublic static void main(String[] args) {\nElectricCar electricCar = new ElectricCar(\"Tesla\",\n\"Model S\",\n2022,\n100);\nGasolineCar gasolineCar = new GasolineCar(\"Toyota\",\n\"Camry\",\n2021,\n15.5);\n\nSystem.out.println(\"Electric Car Information:\");\nelectricCar.displayInfo();\nSystem.out.println(\"\\nGasoline Car Information:\");\ngasolineCar.displayInfo();\n}\n}"
    },
    {
        "instruction": "Design a Java program for a bank account management system. Implement classes such as 'Account', 'SavingsAccount', and 'CheckingAccount' to demonstrate inheritance and encapsulation. Include methods for deposit, withdrawal, and balance inquiry.",
        "input": "",
        "output": "// Account.java\npublic class Account {\nprivate String accountNumber;\nprivate double balance;\n\npublic Account(String accountNumber, double balance) {\nthis.accountNumber = accountNumber;\nthis.balance = balance;\n}\n\npublic void deposit(double amount) {\nbalance += amount;\n}\n\npublic void withdraw(double amount) {\nif (balance >= amount) {\nbalance -= amount;\n} else {\nSystem.out.println(\"Insufficient funds!\");\n}\n}\n\npublic double getBalance() {\nreturn balance;\n}\n}\n\n// SavingsAccount.java\npublic class SavingsAccount extends Account {\nprivate double interestRate;\n\npublic SavingsAccount(String accountNumber, double balance, double interestRate) {\nsuper(accountNumber, balance);\nthis.interestRate = interestRate;\n}\n\npublic void addInterest() {\ndeposit(getBalance() * interestRate);\n}\n}\n\n// CheckingAccount.java\npublic class CheckingAccount extends Account {\nprivate double overdraftLimit;\n\npublic CheckingAccount(String accountNumber, double balance, double overdraftLimit) {\nsuper(accountNumber, balance);\nthis.overdraftLimit = overdraftLimit;\n}\n\n@Override\npublic void withdraw(double amount) {\nif (getBalance() + overdraftLimit >= amount) {\nsuper.withdraw(amount);\n} else {\nSystem.out.println(\"Exceeded overdraft limit!\");\n}\n}\n}\n\n// Main.java\npublic class Main {\npublic static void main(String[] args) {\nSavingsAccount savingsAccount = new SavingsAccount(\"SA123\", 1000, 0.05);\nsavingsAccount.addInterest();\nSystem.out.println(\"Savings Account Balance after interest: \" + savingsAccount.getBalance());\n\nCheckingAccount checkingAccount = new CheckingAccount(\"CA456\", 500, 100);\ncheckingAccount.withdraw(600);\nSystem.out.println(\"Checking Account Balance after withdrawal: \" + checkingAccount.getBalance());\n}\n}"
    },
    {
        "instruction": "Develop a Java application for an online shopping system.Define classes like 'Product', 'Customer', and 'Order' to model the system's entities.Implement features such as adding items to the cart, placing orders, and calculating total costs.",
        "input": "",
        "output": "// Account.java\npublic class Account {\nprivate String accountNumber;\nprivate double balance;\n\npublic Account(String accountNumber, double balance) {\nthis.accountNumber = accountNumber;\nthis.balance = balance;\n}\n\npublic void deposit(double amount) {\nbalance += amount;\n}\n\npublic void withdraw(double amount) {\nif (balance >= amount) {\nbalance -= amount;\n} else {\nSystem.out.println(\"Insufficient funds!\");\n}\n}\n\npublic double getBalance() {\nreturn balance;\n}\n}\n\n// SavingsAccount.java\npublic class SavingsAccount extends Account {\nprivate double interestRate;\n\npublic SavingsAccount(String accountNumber, double balance, double interestRate) {\nsuper(accountNumber, balance);\nthis.interestRate = interestRate;\n}\n\npublic void addInterest() {\ndeposit(getBalance() * interestRate);\n}\n}\n\n// CheckingAccount.java\npublic class CheckingAccount extends Account {\nprivate double overdraftLimit;\n\npublic CheckingAccount(String accountNumber, double balance, double overdraftLimit) {\nsuper(accountNumber, balance);\nthis.overdraftLimit = overdraftLimit;\n}\n\n@Override\npublic void withdraw(double amount) {\nif (getBalance() + overdraftLimit >= amount) {\nsuper.withdraw(amount);\n} else {\nSystem.out.println(\"Exceeded overdraft limit!\");\n}\n}\n}\n\n// Main.java\npublic class Main {\npublic static void main(String[] args) {\nSavingsAccount savingsAccount = new SavingsAccount(\"SA123\", 1000, 0.05);\nsavingsAccount.addInterest();\nSystem.out.println(\"Savings Account Balance after interest: \" + savingsAccount.getBalance());\n\nCheckingAccount checkingAccount = new CheckingAccount(\"CA456\", 500, 100);\ncheckingAccount.withdraw(600);\nSystem.out.println(\"Checking Account Balance after withdrawal: \" + checkingAccount.getBalance());\n}\n}"
    },
    {
        "instructions": "Develop a Java program for an inventory management system.Create classes such as 'Product', 'Inventory', and 'Supplier' to track product details, stock levels, and supplier information. Include features for adding, updating, and removing items from inventory.",
        "input": "",
        "output": "// InventoryManagementSystem.java\nimport java.util.*;\nclass Product {private String productId;private String name;private double price;private int stockQuantity;public Product(String productId, String name, double price, int stockQuantity) {this.productId = productId;this.name = name;this.price = price;this.stockQuantity = stockQuantity;}public String getProductId() {return productId;}public void setProductId(String productId) {this.productId = productId;}public String getName() {return name;}public void setName(String name) {this.name = name;}public double getPrice() {return price;}public void setPrice(double price) {this.price = price;}public int getStockQuantity() {return stockQuantity;}public void setStockQuantity(int stockQuantity) {this.stockQuantity = stockQuantity;}}\nclass Supplier {private String supplierId;private String name;private String contactNumber;public Supplier(String supplierId, String name, String contactNumber) {this.supplierId = supplierId;this.name = name;this.contactNumber = contactNumber;}public String getSupplierId() {return supplierId;}public void setSupplierId(String supplierId) {this.supplierId = supplierId;}public String getName() {return name;}public void setName(String name) {this.name = name;}public String getContactNumber() {return contactNumber;}public void setContactNumber(String contactNumber) {this.contactNumber = contactNumber;}}\nclass Inventory {private Map<String, Product> products;public Inventory() {products = new HashMap<>();}public void addProduct(Product product) {products.put(product.getProductId(), product);}public void updateProduct(String productId, int newStockQuantity) {if (products.containsKey(productId)) {Product product = products.get(productId);product.setStockQuantity(newStockQuantity);products.put(productId, product);System.out.println(\"Product stock quantity updated successfully.\");} else {System.out.println(\"Product not found in inventory.\");}}public void removeProduct(String productId) {if (products.containsKey(productId)) {products.remove(productId);System.out.println(\"Product removed from inventory successfully.\");} else {System.out.println(\"Product not found in inventory.\");}}public void displayInventory() {System.out.println(\"Inventory:\");for (Product product : products.values()) {System.out.println(\"Product ID: \" + product.getProductId() + \", Name: \" + product.getName() + \", Price: $\" + product.getPrice() + \", Stock Quantity: \" + product.getStockQuantity());}}}public class InventoryManagementSystem {public static void main(String[] args) {Inventory inventory = new Inventory();Product product1 = new Product(\"P001\", \"Laptop\", 999.99, 10);Product product2 = new Product(\"P002\", \"Smartphone\", 599.99, 20);inventory.addProduct(product1);inventory.addProduct(product2);inventory.displayInventory();inventory.updateProduct(\"P001\", 15);inventory.displayInventory();inventory.removeProduct(\"P002\");inventory.displayInventory();}}"
    },
    {
        "instructions": "Create a Java program for a school management system.Design classes such as 'Student', 'Teacher', and 'Course' to model student enrollment, teacher assignments, and course details. Include features for adding students, assigning teachers, and managing courses.",
        "input": "",
        "output": "// SchoolManagementSystem.java\nimport java.util.*;\nclass Student {private String studentId;private String name;private int age;public Student(String studentId, String name, int age) {this.studentId = studentId;this.name = name;this.age = age;}public String getStudentId() {return studentId;}public void setStudentId(String studentId) {this.studentId = studentId;}public String getName() {return name;}public void setName(String name) {this.name = name;}public int getAge() {return age;}public void setAge(int age) {this.age = age;}}\nclass Teacher {private String teacherId;private String name;private String subject;public Teacher(String teacherId, String name, String subject) {this.teacherId = teacherId;this.name = name;this.subject = subject;}public String getTeacherId() {return teacherId;}public void setTeacherId(String teacherId) {this.teacherId = teacherId;}public String getName() {return name;}public void setName(String name) {this.name = name;}public String getSubject() {return subject;}public void setSubject(String subject) {this.subject = subject;}}\nclass Course {private String courseId;private String courseName;private Teacher teacher;private List<Student> students;public Course(String courseId, String courseName) {this.courseId = courseId;this.courseName = courseName;students = new ArrayList<>();}public void assignTeacher(Teacher teacher) {this.teacher = teacher;}public void addStudent(Student student) {students.add(student);}public void displayCourseDetails() {System.out.println(\"Course ID: \" + courseId);System.out.println(\"Course Name: \" + courseName);System.out.println(\"Teacher: \" + teacher.getName() + \" (ID: \" + teacher.getTeacherId() + \")\");System.out.println(\"Students enrolled: \");for (Student student : students) {System.out.println(\"Student ID: \" + student.getStudentId() + \", Name: \" + student.getName() + \", Age: \" + student.getAge());}}}public class SchoolManagementSystem {public static void main(String[] args) {Student student1 = new Student(\"S001\", \"John Doe\", 17);Student student2 = new Student(\"S002\", \"Jane Smith\", 16);Teacher teacher = new Teacher(\"T001\", \"Mr. Smith\", \"Mathematics\");Course course = new Course(\"C001\", \"Mathematics\");course.assignTeacher(teacher);course.addStudent(student1);course.addStudent(student2);course.displayCourseDetails();}}"
    },
    {
        "instructions": "Develop a Java application for a flight booking system. Define classes like 'Flight', 'Passenger', and 'Reservation' to handle flight details, passengerinformation, and reservations. Implement functionalities for booking flights, checking availability, and managing reservations.",
        "input": "",
        "output": "// FlightBookingSystem.java\nimport java.util.*;\nclass Flight {private String flightNumber;private String destination;private int capacity;private int seatsBooked;public Flight(String flightNumber, String destination, int capacity) {this.flightNumber = flightNumber;this.destination = destination;this.capacity = capacity;this.seatsBooked = 0;}public String getFlightNumber() {return flightNumber;}public String getDestination() {return destination;}public int getCapacity() {return capacity;}public int getSeatsBooked() {return seatsBooked;}public boolean isAvailable() {return seatsBooked < capacity;}public boolean bookSeat() {if (isAvailable()) {seatsBooked++;return true;}return false;}}\nclass Passenger {private String passengerId;private String name;private String contactNumber;public Passenger(String passengerId, String name, String contactNumber) {this.passengerId = passengerId;this.name = name;this.contactNumber = contactNumber;}public String getPassengerId() {return passengerId;}public String getName() {return name;}public String getContactNumber() {return contactNumber;}}\nclass Reservation {private Flight flight;private Passenger passenger;public Reservation(Flight flight, Passenger passenger) {this.flight = flight;this.passenger = passenger;}public Flight getFlight() {return flight;}public Passenger getPassenger() {return passenger;}}\npublic class FlightBookingSystem {private List<Flight> flights;private List<Reservation> reservations;public FlightBookingSystem() {flights = new ArrayList<>();reservations = new ArrayList<>();}public void addFlight(Flight flight) {flights.add(flight);}public boolean bookFlight(String flightNumber, Passenger passenger) {for (Flight flight : flights) {if (flight.getFlightNumber().equals(flightNumber) && flight.isAvailable()) {Reservation reservation = new Reservation(flight, passenger);reservations.add(reservation);return flight.bookSeat();}}return false;}public void displayFlights() {System.out.println(\"Available Flights: \");for (Flight flight : flights) {System.out.println(\"Flight Number: \" + flight.getFlightNumber() + \", Destination: \" + flight.getDestination() + \", Capacity: \" + flight.getCapacity() + \", Seats Booked: \" + flight.getSeatsBooked());}}public void displayReservations() {System.out.println(\"Current Reservations: \");for (Reservation reservation : reservations) {Flight flight = reservation.getFlight();Passenger passenger = reservation.getPassenger();System.out.println(\"Passenger: \" + passenger.getName() + \", Flight Number: \" + flight.getFlightNumber() + \", Destination: \" + flight.getDestination() + \", Seat Number: \" + flight.getSeatsBooked());}}}public class FlightBookingSystem {public static void main(String[] args) {FlightBookingSystem bookingSystem = new FlightBookingSystem();Flight flight1 = new Flight(\"F001\", \"New York\", 200);Flight flight2 = new Flight(\"F002\", \"London\", 150);bookingSystem.addFlight(flight1);bookingSystem.addFlight(flight2);Passenger passenger1 = new Passenger(\"P001\", \"John Doe\", \"123456789\");Passenger passenger2 = new Passenger(\"P002\", \"Jane Smith\", \"987654321\");bookingSystem.bookFlight(\"F001\", passenger1);bookingSystem.bookFlight(\"F002\", passenger2);bookingSystem.displayFlights();bookingSystem.displayReservations();}}"
    },
    {
        "instructions": "Implement a Java application for an online auction system. Define classes like 'Item', 'Bidder', and 'Auction' to handle auction items, bidder bids, and auction events. Include functionalities for listing items, placing bids, and closing auctions.",
        "input": "",
        "output": "// OnlineAuctionSystem.java\nimport java.util.*;\nclass Item {private String itemId;private String name;private String description;private double currentBid;private Bidder currentHighestBidder;public Item(String itemId, String name, String description) {this.itemId = itemId;this.name = name;this.description = description;this.currentBid = 0;this.currentHighestBidder = null;}public String getItemId() {return itemId;}public String getName() {return name;}public String getDescription() {return description;}public double getCurrentBid() {return currentBid;}public Bidder getCurrentHighestBidder() {return currentHighestBidder;}public void setCurrentBid(double currentBid, Bidder bidder) {this.currentBid = currentBid;this.currentHighestBidder = bidder;}}\nclass Bidder {private String bidderId;private String name;public Bidder(String bidderId, String name) {this.bidderId = bidderId;this.name = name;}public String getBidderId() {return bidderId;}public String getName() {return name;}}\nclass Auction {private Item item;private List<Bidder> bidders;private boolean isOpen;public Auction(Item item) {this.item = item;this.bidders = new ArrayList<>();this.isOpen = true;}public void placeBid(double amount, Bidder bidder) {if (isOpen && amount > item.getCurrentBid()) {item.setCurrentBid(amount, bidder);System.out.println(\"Bid placed successfully by bidder: \" + bidder.getName() + \", amount: $\" + amount);} else {System.out.println(\"Bid failed. Either the auction is closed or the bid amount is not higher than the current highest bid.\");}}public void closeAuction() {isOpen = false;System.out.println(\"Auction closed for item: \" + item.getName());}}\npublic class OnlineAuctionSystem {public static void main(String[] args) {Item item = new Item(\"I001\", \"Painting\", \"A beautiful landscape painting\");Bidder bidder1 = new Bidder(\"B001\", \"John Doe\");Bidder bidder2 = new Bidder(\"B002\", \"Jane Smith\");Auction auction = new Auction(item);auction.placeBid(100, bidder1);auction.placeBid(150, bidder2);auction.closeAuction();}}"
    },
    {
        "instructions": "Design a Java program for a social media platform. Create classes such as 'User', 'Post', and 'Comment' to model user profiles, posts, and interactions. Implement features for creating posts, commenting on posts, and managing user accounts.",
        "input": "",
        "output": "// SocialMediaPlatform.java\nimport java.util.*;\nclass User {private String userId;private String username;private String email;private List<Post> posts;public User(String userId, String username, String email) {this.userId = userId;this.username = username;this.email = email;this.posts = new ArrayList<>();}public String getUserId() {return userId;}public String getUsername() {return username;}public String getEmail() {return email;}public List<Post> getPosts() {return posts;}public void createPost(String content) {Post post = new Post(content);posts.add(post);System.out.println(\"Post created successfully by user: \" + username);}public void addCommentToPost(Post post, String content) {Comment comment = new Comment(content);post.addComment(comment);System.out.println(\"Comment added to post by user: \" + username);}}\nclass Post {private String postId;private String content;private List<Comment> comments;public Post(String content) {this.content = content;this.comments = new ArrayList<>();}public String getPostId() {return postId;}public String getContent() {return content;}public List<Comment> getComments() {return comments;}public void addComment(Comment comment) {comments.add(comment);}}\nclass Comment {private String commentId;private String content;public Comment(String content) {this.content = content;}public String getCommentId() {return commentId;}public String getContent() {return content;}}\npublic class SocialMediaPlatform {public static void main(String[] args) {User user1 = new User(\"U001\", \"JohnDoe\", \"john@example.com\");User user2 = new User(\"U002\", \"JaneSmith\", \"jane@example.com\");user1.createPost(\"Hello world!\");Post user1Post = user1.getPosts().get(0);user2.addCommentToPost(user1Post, \"Nice post!\");System.out.println(\"User1's Posts: \");for (Post post : user1.getPosts()) {System.out.println(\"Post Content: \" + post.getContent());System.out.println(\"Comments: \");for (Comment comment : post.getComments()) {System.out.println(\" - \" + comment.getContent());}}}}"
    },
    {
        "instructions": "Design a Java application for a music player.Define classes for Song, Playlist, and Player. Implement methods for playing songs, creating playlists, and managing music libraries.",
        "input": "",
        "output": "import java.util.ArrayList;\nimport java.util.List;\n\n// Song class to represent individual songs\nclass Song {\n    private String title;\n    private String artist;\n    private double duration; // in minutes\n\n    public Song(String title, String artist, double duration) {\n        this.title = title;\n        this.artist = artist;\n        this.duration = duration;\n    }\n\n    // Getter methods\n    public String getTitle() {\n        return title;\n    }\n\n    public String getArtist() {\n        return artist;\n    }\n\n    public double getDuration() {\n        return duration;\n    }\n\n    // Method to display song information\n    public void displayInfo() {\n        System.out.println(\"Title: \" + title);\n        System.out.println(\"Artist: \" + artist);\n        System.out.println(\"Duration: \" + duration + \" minutes\");\n    }\n}\n\n// Playlist class to manage a collection of songs\nclass Playlist {\n    private String name;\n    private List<Song> songs;\n\n    public Playlist(String name) {\n        this.name = name;\n        this.songs = new ArrayList<>();\n    }\n\n    // Method to add a song to the playlist\n    public void addSong(Song song) {\n        songs.add(song);\n    }\n\n    // Method to display all songs in the playlist\n    public void displayPlaylist() {\n        System.out.println(\"Playlist: \" + name);\n        for (Song song : songs) {\n            song.displayInfo();\n            System.out.println();\n        }\n    }\n}\n\n// Player class to manage the music player functionality\nclass Player {\n    private List<Playlist> playlists;\n    private List<Song> library;\n\n    public Player() {\n        this.playlists = new ArrayList<>();\n        this.library = new ArrayList<>();\n    }\n\n    // Method to create a new playlist\n    public void createPlaylist(String name) {\n        Playlist playlist = new Playlist(name);\n        playlists.add(playlist);\n    }\n\n    // Method to add a song to the library\n    public void addToLibrary(Song song) {\n        library.add(song);\n    }\n\n    // Method to add a song from the library to a playlist\n    public void addSongToPlaylist(Song song, String playlistName) {\n        for (Playlist playlist : playlists) {\n            if (playlistName.equals(playlist.getName())) {\n                playlist.addSong(song);\n                return;\n            }\n        }\n        System.out.println(\"Playlist not found.\");\n    }\n\n    // Method to display all playlists\n    public void displayPlaylists() {\n        for (Playlist playlist : playlists) {\n            playlist.displayPlaylist();\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Player player = new Player();\n\n        // Adding songs to the library\n        Song song1 = new Song(\"Shape of You\", \"Ed Sheeran\", 4.23);\n        Song song2 = new Song(\"Believer\", \"Imagine Dragons\", 3.24);\n        Song song3 = new Song(\"Memories\", \"Maroon 5\", 3.09);\n        player.addToLibrary(song1);\n        player.addToLibrary(song2);\n        player.addToLibrary(song3);\n\n        // Creating playlists\n        player.createPlaylist(\"Favorites\");\n        player.createPlaylist(\"Party Mix\");\n\n        // Adding songs to playlists\n        player.addSongToPlaylist(song1, \"Favorites\");\n        player.addSongToPlaylist(song2, \"Favorites\");\n        player.addSongToPlaylist(song3, \"Favorites\");\n        player.addSongToPlaylist(song2, \"Party Mix\");\n\n        // Displaying playlists\n        player.displayPlaylists();\n    }\n}"
    },
    {
        "instructions": "Create a Java application for a fitness tracker. Define classes for User, Activity, and Goal. Implement methods for tracking workouts, setting fitness goals, and progress monitoring.",
        "input": "",
        "output": "import java.util.ArrayList;\nimport java.util.List;\n\n// User class to represent fitness tracker users\nclass User {\n    private String username;\n    private int age;\n    private double weight; // in kilograms\n    private double height; // in meters\n\n    public User(String username, int age, double weight, double height) {\n        this.username = username;\n        this.age = age;\n        this.weight = weight;\n        this.height = height;\n    }\n\n    // Method to set user's weight\n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n\n    // Method to set user's height\n    public void setHeight(double height) {\n        this.height = height;\n    }\n\n    // Method to calculate user's BMI (Body Mass Index)\n    public double calculateBMI() {\n        return weight / (height * height);\n    }\n}\n\n// Activity class to represent fitness activities\nclass Activity {\n    private String name;\n    private double duration; // in minutes\n    private double caloriesBurned;\n\n    public Activity(String name, double duration, double caloriesBurned) {\n        this.name = name;\n        this.duration = duration;\n        this.caloriesBurned = caloriesBurned;\n    }\n\n    // Method to display activity information\n    public void displayInfo() {\n        System.out.println(\"Activity: \" + name);\n        System.out.println(\"Duration: \" + duration + \" minutes\");\n        System.out.println(\"Calories Burned: \" + caloriesBurned);\n    }\n}\n\n// Goal class to represent fitness goals\nclass Goal {\n    private String name;\n    private double targetValue;\n\n    public Goal(String name, double targetValue) {\n        this.name = name;\n        this.targetValue = targetValue;\n    }\n\n    // Method to display goal information\n    public void displayInfo() {\n        System.out.println(\"Goal: \" + name);\n        System.out.println(\"Target Value: \" + targetValue);\n    }\n}\n\npublic class FitnessTracker {\n    public static void main(String[] args) {\n        // Create a user\n        User user = new User(\"JohnDoe\", 30, 75.0, 1.75);\n\n        // Set fitness goals\n        Goal weightLossGoal = new Goal(\"Weight Loss\", 70.0);\n        Goal muscleGainGoal = new Goal(\"Muscle Gain\", 80.0);\n\n        // Track activities\n        Activity running = new Activity(\"Running\", 30.0, 300.0);\n        Activity cycling = new Activity(\"Cycling\", 45.0, 400.0);\n\n        // Display user information\n        System.out.println(\"User: \" + user.getUsername());\n        System.out.println(\"Age: \" + user.getAge());\n        System.out.println(\"BMI: \" + user.calculateBMI());\n\n        // Display goals\n        System.out.println(\"\\nFitness Goals: \");\n        weightLossGoal.displayInfo();\n        muscleGainGoal.displayInfo();\n\n        // Display tracked activities\n        System.out.println(\"\\nTracked Activities: \");\n        running.displayInfo();\n        cycling.displayInfo();\n    }\n}"
    },
    {
        "instruction": "Write a Java class for a BankAccount that demonstrates encapsulation by encapsulating attributes like account number and balance, abstraction by providing methods for depositing, withdrawing, and checking balance, and inheritance by extending a superclass Account.",
        "input": "",
        "output": "// Superclass Account\nclass Account {\n    private int accountNumber;\n    private double balance;\n\n    public Account(int accountNumber, double balance) {\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n\n    // Getter methods for encapsulation\n    public int getAccountNumber() {\n        return accountNumber;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    // Abstract method for withdrawing (to be implemented by subclasses)\n    public abstract void withdraw(double amount);\n\n    // Abstract method for depositing (to be implemented by subclasses)\n    public abstract void deposit(double amount);\n}\n\n// Subclass BankAccount\nclass BankAccount extends Account {\n    public BankAccount(int accountNumber, double balance) {\n        super(accountNumber, balance);\n    }\n\n    // Implementing withdraw method\n    @Override\n    public void withdraw(double amount) {\n        if (amount > 0 && amount <= getBalance()) {\n            setBalance(getBalance() - amount);\n            System.out.println(\"Withdrawn: $\" + amount);\n        } else {\n            System.out.println(\"Invalid amount or insufficient balance.\");\n        }\n    }\n\n    // Implementing deposit method\n    @Override\n    public void deposit(double amount) {\n        if (amount > 0) {\n            setBalance(getBalance() + amount);\n            System.out.println(\"Deposited: $\" + amount);\n        } else {\n            System.out.println(\"Invalid amount.\");\n        }\n    }\n}\n\n// Main class to demonstrate the BankAccount class\npublic class Main {\n    public static void main(String[] args) {\n        // Creating a BankAccount object\n        BankAccount account = new BankAccount(123456, 1000.0);\n\n        // Demonstrating encapsulation by accessing account number and balance using getter methods\n        System.out.println(\"Account Number: \" + account.getAccountNumber());\n        System.out.println(\"Balance: $\" + account.getBalance());\n\n        // Depositing and withdrawing money\n        account.deposit(500.0);\n        account.withdraw(200.0);\n\n        // Checking balance after transactions\n        System.out.println(\"New Balance: $\" + account.getBalance());\n    }\n}"
    },
    {
        "instruction": "Create a Java class representing a Vehicle that showcases abstraction by providing abstract methods like start() and stop(), inheritance by having subclasses like Car and Motorcycle, and polymorphism by overriding these methods in each subclass.",
        "input": "",
        "output": "// Abstract class representing a Vehicle\nabstract class Vehicle {\n    // Abstract methods for starting and stopping the vehicle\n    public abstract void start();\n    public abstract void stop();\n}\n\n// Concrete subclass Car inheriting from Vehicle\nclass Car extends Vehicle {\n    @Override\n    public void start() {\n        System.out.println(\"Car started\");\n    }\n\n    @Override\n    public void stop() {\n        System.out.println(\"Car stopped\");\n    }\n}\n\n// Concrete subclass Motorcycle inheriting from Vehicle\nclass Motorcycle extends Vehicle {\n    @Override\n    public void start() {\n        System.out.println(\"Motorcycle started\");\n    }\n\n    @Override\n    public void stop() {\n        System.out.println(\"Motorcycle stopped\");\n    }\n}\n\n// Main class to test the Vehicle hierarchy\npublic class Main {\n    public static void main(String[] args) {\n        // Creating instances of Car and Motorcycle\n        Vehicle car = new Car();\n        Vehicle motorcycle = new Motorcycle();\n\n        // Demonstrating polymorphism\n        car.start();\n        car.stop();\n\n        motorcycle.start();\n        motorcycle.stop();\n    }\n}"
    },
    {
        "instruction": "Design a Java class for a Shape that demonstrates abstraction by providing abstract methods like calculateArea() and calculatePerimeter(), inheritance by having subclasses like Circle and Rectangle, and polymorphism by implementing these methods differently in each subclass.",
        "input": "",
        "output": "// Shape.java\npublic abstract class Shape {\n    // Abstract method to calculate area\n    public abstract double calculateArea();\n    \n    // Abstract method to calculate perimeter\n    public abstract double calculatePerimeter();\n}\n\n// Circle.java\npublic class Circle extends Shape {\n    private double radius;\n\n    // Constructor\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    // Override method to calculate area for Circle\n    @Override\n    public double calculateArea() {\n        return Math.PI * radius * radius;\n    }\n\n    // Override method to calculate perimeter for Circle\n    @Override\n    public double calculatePerimeter() {\n        return 2 * Math.PI * radius;\n    }\n}\n\n// Rectangle.java\npublic class Rectangle extends Shape {\n    private double width;\n    private double height;\n\n    // Constructor\n    public Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    // Override method to calculate area for Rectangle\n    @Override\n    public double calculateArea() {\n        return width * height;\n    }\n\n    // Override method to calculate perimeter for Rectangle\n    @Override\n    public double calculatePerimeter() {\n        return 2 * (width + height);\n    }\n}\n\n// Main.java\npublic class Main {\n    public static void main(String[] args) {\n        // Creating instances of Circle and Rectangle\n        Shape circle = new Circle(5);\n        Shape rectangle = new Rectangle(4, 6);\n\n        // Calculating and printing area and perimeter of Circle\n        System.out.println(\"Circle:\");\n        System.out.println(\"Area: \" + circle.calculateArea());\n        System.out.println(\"Perimeter: \" + circle.calculatePerimeter());\n\n        // Calculating and printing area and perimeter of Rectangle\n        System.out.println(\"\\nRectangle:\");\n        System.out.println(\"Area: \" + rectangle.calculateArea());\n        System.out.println(\"Perimeter: \" + rectangle.calculatePerimeter());\n    }\n}"
    },
    {
        "instruction": "Write a Java class for a Zoo that showcases encapsulation by encapsulating attributes like name and location, inheritance by having subclasses like Mammal and Reptile, and association by associating animals with exhibits.",
        "input": "",
        "output": "public class Zoo {\n  private String name;\n  private String location;\n  private List<Exhibit> exhibits;\n\n  public Zoo(String name, String location) {\n    this.name = name;\n    this.location = location;\n    this.exhibits = new ArrayList<>();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public String getLocation() {\n    return location;\n  }\n\n  public List<Exhibit> getExhibits() {\n    // Return a copy of the list to avoid modification from outside\n    return new ArrayList<>(exhibits);\n  }\n\n  public void addExhibit(Exhibit exhibit) {\n    exhibits.add(exhibit);\n  }\n}\n\n// Interface for Animal with basic methods\ninterface Animal {\n  String getName();\n  String getSpecies();\n}\n\n// Abstract class for Mammals extending Animal\nabstract class Mammal implements Animal {\n  private String name;\n  private String species;\n\n  public Mammal(String name, String species) {\n    this.name = name;\n    this.species = species;  \n  }\n\n  @Override\n  public String getName() {\n    return name;\n  }\n\n  @Override\n  public String getSpecies() {\n    return species;\n  }\n}\n\n// Similar class for Reptiles extending Animal (you can add specific methods)\nclass Reptile extends Mammal implements Animal {\n  // Add specific reptile attributes and methods here\n\n  public Reptile(String name, String species) {\n    super(name, species);\n  }\n}\n\n// Class for Exhibit associating with Animals\npublic class Exhibit {\n  private String name;\n  private List<Animal> animals;\n\n  public Exhibit(String name) {\n    this.name = name;\n    this.animals = new ArrayList<>();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public List<Animal> getAnimals() {\n    // Similar to Zoo.getExhibits(), return a copy of the list\n    return new ArrayList<>(animals);\n  }\n\n  public void addAnimal(Animal animal) {\n    animals.add(animal);\n  }\n}"
    },
    {
        "instruction": "Create a Java class for a Library that demonstrates encapsulation by encapsulating attributes like name and address, association by associating books with shelves, and polymorphism by implementing methods like borrow() and return() for different types of library materials.",
        "input": "",
        "output": "class LibraryItem {\n  private String title;\n  // Encapsulated attribute\n  String author;\n\n  public LibraryItem(String title, String author) {\n    this.title = title;\n    this.author = author;\n  }\n\n  public String getTitle() {\n    return title; // Accessor method for encapsulated attribute\n  }\n}\n\nclass Book extends LibraryItem {\n  String genre;\n\n  public Book(String title, String author, String genre) {\n    super(title, author);\n    this.genre = genre;\n  }\n\n  @Override\n  public void borrow() {\n    System.out.println(f\"Borrowing book: {getTitle()} by {author}\");\n  }\n}\n\nclass DVD extends LibraryItem {\n  String director;\n\n  public DVD(String title, String author, String director) {\n    super(title, author);\n    this.director = director;\n  }\n\n  @Override\n  public void borrow() {\n    System.out.println(f\"Borrowing DVD: {getTitle()} by {author} directed by {director}\");\n  }\n}\n\nclass Shelf {\n  String name;\n  List<LibraryItem> items;\n\n  public Shelf(String name) {\n    this.name = name;\n    this.items = new ArrayList<>();\n  }\n\n  public void add_item(LibraryItem item) {\n    items.add(item);\n  }\n\n  public List<LibraryItem> get_items() {\n    return items;\n  }\n}\n\nclass Library {\n  private String name; // Encapsulated attribute\n  String address;\n  Map<String, Shelf> shelves;\n\n  public Library(String name, String address) {\n    this.name = name;\n    this.address = address;\n    this.shelves = new HashMap<>();\n  }\n\n  public String getName() {\n    return name; // Accessor method for encapsulated attribute\n  }\n\n  public void add_shelf(Shelf shelf) {\n    shelves.put(shelf.name, shelf);\n  }\n\n  public void add_item(String shelf_name, LibraryItem item) {\n    if (shelves.containsKey(shelf_name)) {\n      shelves.get(shelf_name).add_item(item);\n    } else {\n      System.out.println(f\"Shelf {shelf_name} does not exist\");\n    }\n  }\n\n  public void borrow_item(String title) {\n    for (Shelf shelf : shelves.values()) {\n      for (LibraryItem item : shelf.get_items()) {\n        if (item.getTitle().equals(title)) {\n          item.borrow();\n          return;\n        }\n      }\n    }\n    System.out.println(f\"Item with title {title} not found\");\n  }\n}\n\n// Example usage\npublic class Main {\n  public static void main(String[] args) {\n    Library library = new Library(\"Central Library\", \"1 Main St\");\n    Shelf shelf_fiction = new Shelf(\"Fiction\");\n    library.add_shelf(shelf_fiction);\n    Book book1 = new Book(\"The Lord of the Rings\", \"J.R.R. Tolkien\", \"Fantasy\");\n    Book book2 = new Book(\"Pride and Prejudice\", \"Jane Austen\", \"Romance\");\n    DVD dvd1 = new DVD(\"The Shawshank Redemption\", \"Frank Darabont\", \"Frank Darabont\");\n    library.add_item(\"Fiction\", book1);\n    library.add_item(\"Fiction\", book2);\n    library.add_item(\"Non-Fiction\", dvd1); // This will print a message\n    library.borrow_item(\"The Lord of the Rings\");\n    library.borrow_item(\"The Catcher in the Rye\"); // This will print a message\n  }\n}"
    },
    {
        "instruction": "Implement a Java class for a Company that exhibits encapsulation by encapsulating attributes like name and revenue, aggregation by aggregating departments, and inheritance by having subclasses like TechCompany and RetailCompany.",
        "input": "",
        "output": "public class Company { \n  // Encapsulated attributes\n  private String name; \n  private double revenue; \n  // Aggregation - Company has departments (an array of Department objects)\n  private Department[] departments; \n  // Constructor with arguments for name and initial departments\n  public Company(String name, Department[] departments) { \n    this.name = name; \n    this.revenue = 0.0; // Initialize revenue to 0 by default\n    this.departments = departments; \n  } \n  // Getter methods for name and revenue\n  public String getName() { \n    return name; \n  } \n  public double getRevenue() { \n    return revenue; \n  } \n  // Method to add revenue to the company\n  public void addRevenue(double amount) { \n    this.revenue += amount; \n  } \n  // Subclasses - TechCompany and RetailCompany (implement these)\n  public static class TechCompany extends Company { \n    // Add specific attributes and methods for TechCompany here\n    public TechCompany(String name, Department[] departments) { \n      super(name, departments); \n    } \n  } \n  public static class RetailCompany extends Company { \n    // Add specific attributes and methods for RetailCompany here\n    public RetailCompany(String name, Department[] departments) { \n      super(name, departments); \n    } \n  } \n} \n  // Example Department class (can be further extended)\n  class Department { \n   private String name; \n   private int employeeCount; \n   public Department(String name, int employeeCount) { \n     this.name = name; \n     this.employeeCount = employeeCount; \n   } \n   // Getter methods for department name and employee count\n   public String getName() { \n     return name; \n   } \n   public int getEmployeeCount() { \n     return employeeCount; \n   } \n }"
    },
    {
        "instruction": "Write a Java class for a Bank that showcases encapsulation by encapsulating attributes like name and location, association by associating customers with accounts, and polymorphism by implementing methods like withdraw() for different types of accounts.",
        "input": "",
        "output": "public class Bank {\n  private String name;\n  private String location;\n\n  public Bank(String name, String location) {\n    this.name = name;\n    this.location = location;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public String getLocation() {\n    return location;\n  }\n\n  // Association with Customer class\n  public void addCustomer(Customer customer) {\n    // Logic to associate customer with the bank\n  }\n}\n\n// Interface for different account types\ninterface Account {\n  public void deposit(double amount);\n  public void withdraw(double amount) throws InsufficientFundsException;\n}\n\n// Savings Account class with specific withdraw logic\nclass SavingsAccount implements Account {\n  private double balance;\n\n  public SavingsAccount(double balance) {\n    this.balance = balance;\n  }\n\n  @Override\n  public void deposit(double amount) {\n    balance += amount;\n  }\n\n  @Override\n  public void withdraw(double amount) throws InsufficientFundsException {\n    if (amount > balance) {\n      throw new InsufficientFundsException(\"Insufficient funds in savings account\");\n    }\n    balance -= amount;\n  }\n}\n\n// Current Account class with overdraft protection and potentially different withdraw logic\nclass CurrentAccount implements Account {\n  private double balance;\n  private double overdraftLimit;\n\n  public CurrentAccount(double balance, double overdraftLimit) {\n    this.balance = balance;\n    this.overdraftLimit = overdraftLimit;\n  }\n\n  @Override\n  public void deposit(double amount) {\n    balance += amount;\n  }\n\n  @Override\n  public void withdraw(double amount) throws InsufficientFundsException {\n    if (amount > balance + overdraftLimit) {\n      throw new InsufficientFundsException(\"Insufficient funds in current account\");\n    }\n    balance -= amount;\n  }\n}\n\n// Custom exception class for insufficient funds\nclass InsufficientFundsException extends Exception {\n  public InsufficientFundsException(String message) {\n    super(message);\n  }\n}"
    },
    {
        "instruction": "Create a Java class for a School that demonstrates encapsulation by encapsulating attributes like name and location, association by associating teachers with classes, and inheritance by having subclasses like ElementarySchool and HighSchool.",
        "input": "",
        "output": "public class School {\n  private String name;\n  private String location;\n  private List<Teacher> teachers; // Association with Teacher class\n\n  public School(String name, String location) {\n    this.name = name;\n    this.location = location;\n    this.teachers = new ArrayList<>();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public String getLocation() {\n    return location;\n  }\n\n  public void setLocation(String location) {\n    this.location = location;\n  }\n\n  public void addTeacher(Teacher teacher) {\n    teachers.add(teacher);\n  }\n\n  public List<Teacher> getTeachers() {\n    return Collections.unmodifiableList(teachers); // Encapsulation - return unmodifiable list\n  }\n}\n\nclass Teacher {\n  // Add attributes and methods specific to Teacher here\n}\n\nclass ElementarySchool extends School {\n\n  public ElementarySchool(String name, String location) {\n    super(name, location);\n  }\n\n  // Add methods specific to ElementarySchool here (e.g., kindergarten programs)\n}\n\nclass HighSchool extends School {\n\n  public HighSchool(String name, String location) {\n    super(name, location);\n  }\n\n  // Add methods specific to HighSchool here (e.g., advanced placement classes)\n}"
    },
    {
        "instruction": "Implement a Java class for a Movie that exhibits encapsulation by encapsulating attributes like title and genre, aggregation by aggregating actors, and polymorphism by providing methods like play() for different genres.",
        "input": "",
        "output": "class Actor {\n  private String name;\n\n  public Actor(String name) {\n    this.name = name;\n  }\n\n  public String getName() {\n    return name;\n  }\n}\n\nclass Movie {\n  private String title; // Encapsulation with private attribute\n  private String genre;\n  private List<Actor> actors; // Aggregation\n\n  public Movie(String title, String genre) {\n    this.title = title;\n    this.genre = genre;\n    this.actors = new ArrayList<>();\n  }\n\n  public void addActor(Actor actor) {\n    actors.add(actor);\n  }\n\n  public void play() {\n    System.out.println(f\"Playing {title} ({genre})\");\n    // Polymorphism: Specific play behavior for different genres can be implemented here\n    // For example:\n    if (genre.equals(\"Comedy\")) {\n      System.out.println(\"Playing funny scenes...\");\n    } else if (genre.equals(\"Drama\")) {\n      System.out.println(\"Playing emotional scenes...\");\n    } else if (genre.equals(\"Action\")) {\n      System.out.println(\"Playing intense action sequences...\");\n    } else {\n      System.out.println(\"Playing the movie...\"); // Default behavior\n    }\n  }\n}"
    },
    {
        "instruction": "Write a Java class for a food factory that demonstrates encapsulation by encapsulating attributes like menu and item names, check out, bill abstraction by providing methods for ingredients, cooking inheritance by extending a superclass food.",
        "input": "",
        "output": "public class Food {\n  private String name;\n  private double price;\n\n  public Food(String name, double price) {\n    this.name = name;\n    this.price = price;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public double getPrice() {\n    return price;\n  }\n"
    },
    {
        "instruction": "Create a Java class for a Post Office that demonstrates encapsulation by encapsulating attributes like name and address, aggregation by associating postmen with packages, and inheritance by having subclasses like BranchPostOffice and MainPostOffice.",
        "input": "",
        "output": "public class PostOffice {\n  private String name;\n  private String address;\n  private List<Postman> postmen; // Aggregation with Postman class\n  private List<Package> packages; // Aggregation with Package class\n\n  public PostOffice(String name, String address) {\n    this.name = name;\n    this.address = address;\n    this.postmen = new ArrayList<>();\n    this.packages = new ArrayList<>();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public String getAddress() {\n    return address;\n  }\n\n  public void setAddress(String address) {\n    this.address = address;\n  }\n\n  public void addPostman(Postman postman) {\n"
    },
    {
        "instruction": "Create a Java class for a Car that demonstrates encapsulation by encapsulating attributes like model and year, association by associating cars with drivers, and aggregation by aggregating parts like Engine and Wheel.",
        "input": "",
        "output": "public class Car {\n  private String model;\n  private int year;\n  private Driver driver; // Association with Driver class\n  private List<Engine> engines; // Aggregation of Engine class\n  private List<Wheel> wheels; // Aggregation of Wheel class\n\n  public Car(String model, int year) {\n    this.model = model;\n    this.year = year;\n    this.engines = new ArrayList<>();\n    this.wheels = new ArrayList<>();\n  }\n\n  public String getModel() {\n    return model;\n  }\n\n  public void setModel(String model) {\n    this.model = model;\n  }\n\n  public int getYear() {\n    return year;\n  }\n\n  public void setYear(int year) {\n    this.year = year;\n  }\n\n  public Driver getDriver() {\n    return driver;\n  }\n\n  public void setDriver(Driver driver) {\n    this.driver = driver;\n  }\n\n  public void addEngine(Engine engine) {\n    engines.add(engine);\n  }\n\n  public List<Engine> getEngines() {\n    return Collections.unmodifiableList(engines); // Encapsulation - return unmodifiable list\n  }\n\n  public void addWheel(Wheel wheel) {\n    wheels.add(wheel);\n  }\n\n  public List<Wheel> getWheels() {\n    return Collections.unmodifiableList(wheels); // Encapsulation - return unmodifiable list\n  }\n}\n\nclass Driver {\n  // Add attributes and methods specific to Driver here\n}\n\nclass Engine {\n  // Add attributes and methods specific to Engine here\n}\n\nclass Wheel {\n  // Add attributes and methods specific to Wheel here\n}"
    },
    {
        "instruction": "Create a Java class for a Hospital that demonstrates encapsulation by encapsulating attributes like name and location, association by associating doctors with patients, aggregation by associating departments with the hospital, inheritance by having subclasses like Clinic and GeneralHospital.",
        "input": "",
        "output": "public class Hospital {\n  private String name;\n  private String location;\n  private List<Doctor> doctors; // Association with Doctor class\n  private List<Patient> patients; // Association with Patient class\n  private List<Department> departments; // Aggregation with Department class\n\n  public Hospital(String name, String location) {\n    this.name = name;\n    this.location = location;\n    this.doctors = new ArrayList<>();\n    this.patients = new ArrayList<>();\n    this.departments = new ArrayList<>();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public String getLocation() {\n    return location;\n  }\n\n  public void setLocation(String location) {\n    this.location = location;\n  }\n\n  public void addDoctor(Doctor doctor) {\n    doctors.add(doctor);\n  }\n\n  public List<Doctor> getDoctors() {\n    return Collections.unmodifiableList(doctors); // Encapsulation - return unmodifiable list\n  }\n\n  public void addPatient(Patient patient) {\n    patients.add(patient);\n  }\n\n  public List<Patient> getPatients() {\n    return Collections.unmodifiableList(patients); // Encapsulation - return unmodifiable list\n  }\n\n  public void addDepartment(Department department) {\n    departments.add(department);\n  }\n\n  public List<Department> getDepartments() {\n    return Collections.unmodifiableList(departments); // Encapsulation - return unmodifiable list\n  }\n}\n\nclass Doctor {\n  private String name;\n  private String specialization;\n\n  public Doctor(String name, String specialization) {\n    this.name = name;\n    this.specialization = specialization;\n  }\n}\n\nclass Patient {\n  private String name;\n  private String illness;\n\n  public Patient(String name, String illness) {\n    this.name = name;\n    this.illness = illness;\n  }\n}\n\nclass Department {\n  private String name;\n\n  public Department(String name) {\n    this.name = name;\n  }\n}\n\nclass Clinic extends Hospital {\n  public Clinic(String name, String location) {\n    super(name, location);\n  }\n}\n\nclass GeneralHospital extends Hospital {\n  public GeneralHospital(String name, String location) {\n    super(name, location);\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    // Code to demonstrate functionality\n  }\n}\n"
    },
    {
        "instruction": "Create a Java class for a College that demonstrates encapsulation by encapsulating attributes like name and location, association by associating professors with departments, and inheritance by having subclasses like CommunityCollege and University.",
        "input": "",
        "output": "public class College {\n  private String name;\n  private String location;\n  private List<Professor> professors; // Association with Professor class\n\n  public College(String name, String location) {\n    this.name = name;\n    this.location = location;\n    this.professors = new ArrayList<>();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public String getLocation() {\n    return location;\n  }\n\n  public void setLocation(String location) {\n    this.location = location;\n  }\n\n  public void addProfessor(Professor professor) {\n    professors.add(professor);\n  }\n\n  public List<Professor> getProfessors() {\n    return Collections.unmodifiableList(professors); // Encapsulation - return unmodifiable list\n  }\n}"
    },
    {
        "instruction": "Create a Java class for a Computer that demonstrates encapsulation by encapsulating attributes like brand name, model, and price, association by associating components like CPU, RAM, and GPU, and inheritance by having subclasses like Laptop and Desktop.",
        "input": "",
        "output": "public class Computer {\n    private String brandName;\n    private String model;\n    private double price;\n    private CPU cpu;\n    private RAM ram;\n    private GPU gpu;\n\n    public Computer(String brandName, String model, double price, CPU cpu, RAM ram, GPU gpu) {\n        this.brandName = brandName;\n        this.model = model;\n        this.price = price;\n        this.cpu = cpu;\n        this.ram = ram;\n        this.gpu = gpu;\n    }\n\n    // Getters and setters for brandName, model, price\n\n    public CPU getCpu() {\n        return cpu;\n    }\n\n    public void setCpu(CPU cpu) {\n        this.cpu = cpu;\n    }\n\n    public RAM getRam() {\n        return ram;\n    }\n\n    public void setRam(RAM ram) {\n        this.ram = ram;\n    }\n\n    public GPU getGpu() {\n        return gpu;\n    }\n\n    public void setGpu(GPU gpu) {\n        this.gpu = gpu;\n    }\n}\n\nclass CPU {\n    // CPU attributes and methods\n}\n\nclass RAM {\n    // RAM attributes and methods\n}\n\nclass GPU {\n    // GPU attributes and methods\n}\n\nclass Laptop extends Computer {\n    public Laptop(String brandName, String model, double price, CPU cpu, RAM ram, GPU gpu) {\n        super(brandName, model, price, cpu, ram, gpu);\n    }\n\n    // Additional methods specific to Laptop\n}\n\nclass Desktop extends Computer {\n    public Desktop(String brandName, String model, double price, CPU cpu, RAM ram, GPU gpu) {\n        super(brandName, model, price, cpu, ram, gpu);\n    }\n\n    // Additional methods specific to Desktop\n}"
    },
    {
        "instruction": "Create a Java class for a Phone that demonstrates encapsulation by encapsulating attributes like brand name, model, and price, association by associating components like CPU, RAM, and GPU, and inheritance by having subclasses like Smartphone and FeaturePhone.",
        "input": "",
        "output": "public class Phone {\n    private String brandName;\n    private String model;\n    private double price;\n    private CPU cpu;\n    private RAM ram;\n    private GPU gpu;\n\n    public Phone(String brandName, String model, double price, CPU cpu, RAM ram, GPU gpu) {\n        this.brandName = brandName;\n        this.model = model;\n        this.price = price;\n        this.cpu = cpu;\n        this.ram = ram;\n        this.gpu = gpu;\n    }\n\n    // Getters and setters for brandName, model, price\n\n    public CPU getCpu() {\n        return cpu;\n    }\n\n    public void setCpu(CPU cpu) {\n        this.cpu = cpu;\n    }\n\n    public RAM getRam() {\n        return ram;\n    }\n\n    public void setRam(RAM ram) {\n        this.ram = ram;\n    }\n\n    public GPU getGpu() {\n        return gpu;\n    }\n\n    public void setGpu(GPU gpu) {\n        this.gpu = gpu;\n    }\n}\n\nclass CPU {\n    // CPU attributes and methods\n}\n\nclass RAM {\n    // RAM attributes and methods\n}\n\nclass GPU {\n    // GPU attributes and methods\n}\n\nclass Smartphone extends Phone {\n    public Smartphone(String brandName, String model, double price, CPU cpu, RAM ram, GPU gpu) {\n        super(brandName, model, price, cpu, ram, gpu);\n    }\n\n    // Additional methods specific to Smartphone\n}\n\nclass FeaturePhone extends Phone {\n    public FeaturePhone(String brandName, String model, double price, CPU cpu, RAM ram, GPU gpu) {\n        super(brandName, model, price, cpu, ram, gpu);\n    }\n\n    // Additional methods specific to FeaturePhone\n}"
    },
    {
        "instruction": "Create a Java class for a Television that demonstrates encapsulation by encapsulating attributes like brand name, model, and price, association by associating components like screen, speakers, and remote control, and inheritance by having subclasses like SmartTV and BasicTV.",
        "input": "",
        "output": "public class Television {\n    private String brandName;\n    private String model;\n    private double price;\n    private Screen screen;\n    private Speakers speakers;\n    private RemoteControl remoteControl;\n\n    public Television(String brandName, String model, double price, Screen screen, Speakers speakers, RemoteControl remoteControl) {\n        this.brandName = brandName;\n        this.model = model;\n        this.price = price;\n        this.screen = screen;\n        this.speakers = speakers;\n        this.remoteControl = remoteControl;\n    }\n\n    // Getters and setters for brandName, model, price\n\n    public Screen getScreen() {\n        return screen;\n    }\n\n    public void setScreen(Screen screen) {\n        this.screen = screen;\n    }\n\n    public Speakers getSpeakers() {\n        return speakers;\n    }\n\n    public void setSpeakers(Speakers speakers) {\n        this.speakers = speakers;\n    }\n\n    public RemoteControl getRemoteControl() {\n        return remoteControl;\n    }\n\n    public void setRemoteControl(RemoteControl remoteControl) {\n        this.remoteControl = remoteControl;\n    }\n}\n\nclass Screen {\n    // Screen attributes and methods\n}\n\nclass Speakers {\n    // Speakers attributes and methods\n}\n\nclass RemoteControl {\n    // RemoteControl attributes and methods\n}\n\nclass SmartTV extends Television {\n    public SmartTV(String brandName, String model, double price, Screen screen, Speakers speakers, RemoteControl remoteControl) {\n        super(brandName, model, price, screen, speakers, remoteControl);\n    }\n\n    // Additional methods specific to SmartTV\n}\n\nclass BasicTV extends Television {\n    public BasicTV(String brandName, String model, double price, Screen screen, Speakers speakers, RemoteControl remoteControl) {\n        super(brandName, model, price, screen, speakers, remoteControl);\n    }\n\n    // Additional methods specific to BasicTV\n}"
    },
    {
        "instruction": "Create a Java class for a Library that demonstrates encapsulation by encapsulating attributes like name, location, and opening hours, association by associating books with categories, and inheritance by having subclasses like PublicLibrary and UniversityLibrary.",
        "input": "",
        "output": "public class Library {\n    private String name;\n    private String location;\n    private String openingHours;\n    private List<BookCategory> categories;\n\n    public Library(String name, String location, String openingHours) {\n        this.name = name;\n        this.location = location;\n        this.openingHours = openingHours;\n        this.categories = new ArrayList<>();\n    }\n\n    // Getters and setters for name, location, openingHours\n\n    public List<BookCategory> getCategories() {\n        return categories;\n    }\n\n    public void setCategories(List<BookCategory> categories) {\n        this.categories = categories;\n    }\n\n    public void addCategory(BookCategory category) {\n        categories.add(category);\n    }\n}\n\nclass BookCategory {\n    private String name;\n    private List<Book> books;\n\n    // Constructor, getters, and setters\n}\n\nclass Book {\n    // Book attributes and methods\n}\n\nclass PublicLibrary extends Library {\n    public PublicLibrary(String name, String location, String openingHours) {\n        super(name, location, openingHours);\n    }\n\n    // Additional methods specific to PublicLibrary\n}\n\nclass UniversityLibrary extends Library {\n    public UniversityLibrary(String name, String location, String openingHours) {\n        super(name, location, openingHours);\n    }\n\n    // Additional methods specific to UniversityLibrary\n}"
    },
    {
        "instruction": "Create a Java class for a Hair Care Shop that demonstrates encapsulation by encapsulating attributes like name, location, and opening hours, association by associating products with categories, and inheritance by having subclasses like Salon and BarberShop.",
        "input": "",
        "output": "public class HairCareShop {\n    public String name;\n    public String location;\n    public String openingHours;\n    public List<ProductCategory> categories;\n}\n\nclass ProductCategory {\n    public String name;\n    public List<Product> products;\n}\n\nclass Product {\n    public String name;\n    public double price;\n    public String brand;\n}\n\nclass Salon extends HairCareShop {\n    public Salon(String name, String location, String openingHours) {\n        this.name = name;\n        this.location = location;\n        this.openingHours = openingHours;\n        this.categories = new ArrayList<>();\n    }\n}\n\nclass BarberShop extends HairCareShop {\n    public BarberShop(String name, String location, String openingHours) {\n        this.name = name;\n        this.location = location;\n        this.openingHours = openingHours;\n        this.categories = new ArrayList<>();\n    }\n}"
    },
    {
        "instruction": "Generate a Java code that explains how inheritance can be utilized in a banking system to model different types of accounts, such as savings, checking, and investment accounts, each with their own unique behaviors and attributes inherited from a base account class.",
        "input": "",
        "output": "// Base Account class\nclass Account {\n    protected String accountNumber;\n    protected double balance;\n\n    public Account(String accountNumber, double balance) {\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        if (amount <= balance) {\n            balance -= amount;\n        } else {\n            System.out.println(\"Insufficient funds!\");\n        }\n    }\n\n    public void displayBalance() {\n        System.out.println(\"Account Balance: $\" + balance);\n    }\n}\n\n// Savings Account subclass\nclass SavingsAccount extends Account {\n    private double interestRate;\n\n    public SavingsAccount(String accountNumber, double balance, double interestRate) {\n        super(accountNumber, balance);\n        this.interestRate = interestRate;\n    }\n\n    public void addInterest() {\n        balance += balance * interestRate;\n    }\n}\n\n// Checking Account subclass\nclass CheckingAccount extends Account {\n    private double overdraftLimit;\n\n    public CheckingAccount(String accountNumber, double balance, double overdraftLimit) {\n        super(accountNumber, balance);\n        this.overdraftLimit = overdraftLimit;\n    }\n\n    @Override\n    public void withdraw(double amount) {\n        if (amount <= balance + overdraftLimit) {\n            balance -= amount;\n        } else {\n            System.out.println(\"Withdrawal amount exceeds available funds and overdraft limit!\");\n        }\n    }\n}\n\n// Investment Account subclass\nclass InvestmentAccount extends Account {\n    private double interestRate;\n\n    public InvestmentAccount(String accountNumber, double balance, double interestRate) {\n        super(accountNumber, balance);\n        this.interestRate = interestRate;\n    }\n\n    public void addInterest() {\n        balance += balance * interestRate;\n    }\n}\n\n// Main class to demonstrate usage\npublic class BankingSystem {\n    public static void main(String[] args) {\n        // Creating different types of accounts\n        SavingsAccount savingsAccount = new SavingsAccount(\"SA001\", 1000, 0.05);\n        CheckingAccount checkingAccount = new CheckingAccount(\"CA001\", 2000, 500);\n        InvestmentAccount investmentAccount = new InvestmentAccount(\"IA001\", 5000, 0.08);\n\n        // Depositing and withdrawing from accounts\n        savingsAccount.deposit(200);\n        savingsAccount.addInterest();\n        savingsAccount.displayBalance();\n\n        checkingAccount.withdraw(2500);\n        checkingAccount.displayBalance();\n\n        investmentAccount.addInterest();\n        investmentAccount.displayBalance();\n    }\n}"
    },
    {
        "instruction": "Generate a Java class that describes a scenario in a university system where aggregation is used to model a class schedule, with classes containing a collection of students, each with their own set of attributes and behaviors.",
        "input": "",
        "output": "import java.util.ArrayList;\nimport java.util.List;\n\n// Student class\nclass Student {\n    private String studentID;\n    private String name;\n    private int age;\n\n    public Student(String studentID, String name, int age) {\n        this.studentID = studentID;\n        this.name = name;\n        this.age = age;\n    }\n\n    public void study() {\n        System.out.println(name + \" is studying.\");\n    }\n\n    public void attendClass() {\n        System.out.println(name + \" is attending class.\");\n    }\n\n    // Getters and setters\n    public String getStudentID() {\n        return studentID;\n    }\n\n    public void setStudentID(String studentID) {\n        this.studentID = studentID;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n\n// ClassSchedule class\nclass ClassSchedule {\n    private String className;\n    private List<Student> students;\n\n    public ClassSchedule(String className) {\n        this.className = className;\n        this.students = new ArrayList<>();\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public void displayStudents() {\n        System.out.println(\"Students in \" + className + \":\");\n        for (Student student : students) {\n            System.out.println(\"- \" + student.getName());\n        }\n    }\n}\n\n// Main class to demonstrate usage\npublic class UniversitySystem {\n    public static void main(String[] args) {\n        // Creating students\n        Student student1 = new Student(\"101\", \"Alice\", 20);\n        Student student2 = new Student(\"102\", \"Bob\", 22);\n        Student student3 = new Student(\"103\", \"Charlie\", 21);\n\n        // Creating class schedules and adding students\n        ClassSchedule mathClass = new ClassSchedule(\"Mathematics\");\n        mathClass.addStudent(student1);\n        mathClass.addStudent(student2);\n\n        ClassSchedule physicsClass = new ClassSchedule(\"Physics\");\n        physicsClass.addStudent(student2);\n        physicsClass.addStudent(student3);\n\n        // Displaying students in each class\n        mathClass.displayStudents();\n        physicsClass.displayStudents();\n    }\n}"
    },
    {
        "instruction": "Discuss how inheritance is applied in a video game to create various types of characters, such as warriors, mages, and archers, all inheriting common attributes and methods from a base character class.",
        "input": "",
        "output": "// Base Character class\nclass Character {\n    protected String name;\n    protected int health;\n    protected int attackPower;\n\n    public Character(String name, int health, int attackPower) {\n        this.name = name;\n        this.health = health;\n        this.attackPower = attackPower;\n    }\n\n    public void attack(Character target) {\n        System.out.println(name + \" attacks \" + target.name + \" for \" + attackPower + \" damage.\");\n        target.takeDamage(attackPower);\n    }\n\n    public void takeDamage(int damage) {\n        health -= damage;\n        System.out.println(name + \" takes \" + damage + \" damage.\");\n        if (health <= 0) {\n            System.out.println(name + \" has been defeated!\");\n        }\n    }\n\n    public void displayStatus() {\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"Health: \" + health);\n    }\n}\n\n// Warrior subclass\nclass Warrior extends Character {\n    private int defense;\n\n    public Warrior(String name, int health, int attackPower, int defense) {\n        super(name, health, attackPower);\n        this.defense = defense;\n    }\n\n    @Override\n    public void takeDamage(int damage) {\n        int reducedDamage = damage - defense;\n        if (reducedDamage < 0) {\n            reducedDamage = 0;\n        }\n        super.takeDamage(reducedDamage);\n    }\n}\n\n// Mage subclass\nclass Mage extends Character {\n    private int mana;\n\n    public Mage(String name, int health, int attackPower, int mana) {\n        super(name, health, attackPower);\n        this.mana = mana;\n    }\n\n    public void castSpell(Character target) {\n        if (mana >= 10) {\n            System.out.println(name + \" casts a spell on \" + target.name);\n            target.takeDamage(attackPower * 2);\n            mana -= 10;\n        } else {\n            System.out.println(name + \" does not have enough mana to cast a spell.\");\n        }\n    }\n}\n\n// Archer subclass\nclass Archer extends Character {\n    private int arrows;\n\n    public Archer(String name, int health, int attackPower, int arrows) {\n        super(name, health, attackPower);\n        this.arrows = arrows;\n    }\n\n    @Override\n    public void attack(Character target) {\n        if (arrows > 0) {\n            super.attack(target);\n            arrows--;\n            System.out.println(name + \" has \" + arrows + \" arrows left.\");\n        } else {\n            System.out.println(name + \" has no arrows left!\");\n        }\n    }\n}\n\n// Main class to demonstrate usage\npublic class Game {\n    public static void main(String[] args) {\n        // Creating characters\n        Warrior warrior = new Warrior(\"Thor\", 150, 20, 5);\n        Mage mage = new Mage(\"Merlin\", 100, 15, 50);\n        Archer archer = new Archer(\"Robin\", 120, 10, 30);\n\n        // Displaying initial statuses\n        warrior.displayStatus();\n        mage.displayStatus();\n        archer.displayStatus();\n\n        // Simulating a battle\n        warrior.attack(mage);\n        mage.castSpell(warrior);\n        archer.attack(warrior);\n\n        // Displaying statuses after battle\n        warrior.displayStatus();\n        mage.displayStatus();\n        archer.displayStatus();\n    }\n}"
    },
    {
        "instruction": "Describe how polymorphism can be implemented in a zoo management system where different types of animals can perform their unique sound, but all are treated as generic animals in the system.",
        "input": "",
        "output": "// Base Animal class\nabstract class Animal {\n    protected String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n\n    public abstract void makeSound();\n}\n\n// Lion subclass\nclass Lion extends Animal {\n    public Lion(String name) {\n        super(name);\n    }\n\n    @Override\n    public void makeSound() {\n        System.out.println(name + \" roars: Roar!\");\n    }\n}\n\n// Elephant subclass\nclass Elephant extends Animal {\n    public Elephant(String name) {\n        super(name);\n    }\n\n    @Override\n    public void makeSound() {\n        System.out.println(name + \" trumpets: Tooot!\");\n    }\n}\n\n// Monkey subclass\nclass Monkey extends Animal {\n    public Monkey(String name) {\n        super(name);\n    }\n\n    @Override\n    public void makeSound() {\n        System.out.println(name + \" chatters: Ooh Ooh Ah Ah!\");\n    }\n}\n\n// Zoo class to manage animals\nclass Zoo {\n    private List<Animal> animals;\n\n    public Zoo() {\n        animals = new ArrayList<>();\n    }\n\n    public void addAnimal(Animal animal) {\n        animals.add(animal);\n    }\n\n    public void makeAllSounds() {\n        for (Animal animal : animals) {\n            animal.makeSound();\n        }\n    }\n}\n\n// Main class to demonstrate usage\npublic class ZooManagementSystem {\n    public static void main(String[] args) {\n        // Creating animals\n        Animal lion = new Lion(\"Leo\");\n        Animal elephant = new Elephant(\"Ella\");\n        Animal monkey = new Monkey(\"Momo\");\n\n        // Creating and populating the zoo\n        Zoo zoo = new Zoo();\n        zoo.addAnimal(lion);\n        zoo.addAnimal(elephant);\n        zoo.addAnimal(monkey);\n\n        // Making all animals produce their sounds\n        zoo.makeAllSounds();\n    }\n}"
    },
    {
        "instruction": "Create a Java program that demonstrates how composition is used to model a library system where books can have multiple authors, and authors can write multiple books.",
        "input": "",
        "output": "import java.util.ArrayList;\nimport java.util.List;\n\n// Author class\nclass Author {\n    private String name;\n    private List<Book> books;\n\n    public Author(String name) {\n        this.name = name;\n        this.books = new ArrayList<>();\n    }\n\n    public void addBook(Book book) {\n        books.add(book);\n    }\n\n    public void displayBooks() {\n        System.out.println(name + \" has written the following books:\");\n        for (Book book : books) {\n            System.out.println(\"- \" + book.getTitle());\n        }\n    }\n}\n\n// Book class\nclass Book {\n    private String title;\n    private List<Author> authors;\n\n    public Book(String title) {\n        this.title = title;\n        this.authors = new ArrayList<>();\n    }\n\n    public void addAuthor(Author author) {\n        authors.add(author);\n        author.addBook(this);\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void displayAuthors() {\n        System.out.println(title + \" is written by the following authors:\");\n        for (Author author : authors) {\n            System.out.println(\"- \" + author.name);\n        }\n    }\n}\n\n// Main class to demonstrate usage\npublic class LibrarySystem {\n    public static void main(String[] args) {\n        // Creating authors\n        Author author1 = new Author(\"George Orwell\");\n        Author author2 = new Author(\"Aldous Huxley\");\n\n        // Creating books\n        Book book1 = new Book(\"1984\");\n        Book book2 = new Book(\"Animal Farm\");\n        Book book3 = new Book(\"Brave New World\");\n\n        // Adding authors to books\n        book1.addAuthor(author1);\n        book2.addAuthor(author1);\n        book3.addAuthor(author2);\n\n        // Displaying books by each author\n        author1.displayBooks();\n        author2.displayBooks();\n\n        // Displaying authors of each book\n        book1.displayAuthors();\n        book2.displayAuthors();\n        book3.displayAuthors();\n    }\n}"
    },
    {
        "instruction": "Provide an example of how an abstract class can be used in a content management system to define a common interface for different types of content, such as articles, videos, and images.",
        "input": "",
        "output": "// Abstract Content class\nabstract class Content {\n    protected String title;\n    protected String author;\n\n    public Content(String title, String author) {\n        this.title = title;\n        this.author = author;\n    }\n\n    public abstract void display();\n}\n\n// Article subclass\nclass Article extends Content {\n    private String text;\n\n    public Article(String title, String author, String text) {\n        super(title, author);\n        this.text = text;\n    }\n\n    @Override\n    public void display() {\n        System.out.println(\"Article Title: \" + title);\n        System.out.println(\"Author: \" + author);\n        System.out.println(\"Text: \" + text);\n    }\n}\n\n// Video subclass\nclass Video extends Content {\n    private String videoUrl;\n\n    public Video(String title, String author, String videoUrl) {\n        super(title, author);\n        this.videoUrl = videoUrl;\n    }\n\n    @Override\n    public void display() {\n        System.out.println(\"Video Title: \" + title);\n        System.out.println(\"Author: \" + author);\n        System.out.println(\"Watch at: \" + videoUrl);\n    }\n}\n\n// Image subclass\nclass Image extends Content {\n    private String imageUrl;\n\n    public Image(String title, String author, String imageUrl) {\n        super(title, author);\n        this.imageUrl = imageUrl;\n    }\n\n    @Override\n    public void display() {\n        System.out.println(\"Image Title: \" + title);\n        System.out.println(\"Author: \" + author);\n        System.out.println(\"View at: \" + imageUrl);\n    }\n}\n\n// Main class to demonstrate usage\npublic class ContentManagementSystem {\n    public static void main(String[] args) {\n        // Creating different types of content\n        Content article = new Article(\"The Future of Java\", \"Jane Doe\", \"Java is continuously evolving...\");\n        Content video = new Video(\"Java Streams Tutorial\", \"John Smith\", \"http://example.com/java-streams\");\n        Content image = new Image(\"Java Logo\", \"Alice Johnson\", \"http://example.com/java-logo.png\");\n\n        // Displaying content\n        article.display();\n        video.display();\n        image.display();\n    }\n}"
    },
    {
        "instruction": "Write a Java class for a Library that demonstrates encapsulation by encapsulating attributes like name and address, aggregation by having a collection of Book objects, and inheritance by having subclasses of Book like EBook and PrintedBook.",
        "input": "",
        "output": "public class Library {\n    private String name;\n    private String address;\n    private List<Book> books;\n\n    public Library(String name, String address) {\n        this.name = name;\n        this.address = address;\n        this.books = new ArrayList<>();\n    }\n\n    // Encapsulation\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    // Aggregation\n    public void addBook(Book book) {\n        books.add(book);\n    }\n\n    public void removeBook(Book book) {\n        books.remove(book);\n    }\n\n    public List<Book> getBooks() {\n        return books;\n    }\n}\n\n// Inheritance\n\nclass Book {\n    // Book attributes and methods\n}\n\nclass EBook extends Book {\n    // EBook specific attributes and methods\n}\n\nclass PrintedBook extends Book {\n    // PrintedBook specific attributes and methods\n}"
    },
    {
        "instruction": "Create a Java program that models a Vehicle system demonstrating encapsulation with attributes like make, model, and year. Show aggregation by associating a Garage class that holds multiple Vehicle objects, and use inheritance by creating subclasses of Vehicle such as Car and Motorcycle.",
        "input": "",
        "output": "public class Vehicle {\n    private String make;\n    private String model;\n    private int year;\n\n    public Vehicle(String make, String model, int year) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n    }\n\n    // Encapsulation\n    public String getMake() {\n        return make;\n    }\n\n    public void setMake(String make) {\n        this.make = make;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public void setModel(String model) {\n        this.model = model;\n    }\n\n    public int getYear() {\n        return year;\n    }\n\n    public void setYear(int year) {\n        this.year = year;\n    }\n}\n\n// Inheritance\n\nclass Car extends Vehicle {\n    // Car specific attributes and methods\n}\n\nclass Motorcycle extends Vehicle {\n    // Motorcycle specific attributes and methods\n}\n\n// Aggregation\n\nclass Garage {\n    private List<Vehicle> vehicles;\n\n    public Garage() {\n        this.vehicles = new ArrayList<>();\n    }\n\n    public void addVehicle(Vehicle vehicle) {\n        vehicles.add(vehicle);\n    }\n\n    public void removeVehicle(Vehicle vehicle) {\n        vehicles.remove(vehicle);\n    }\n\n    public List<Vehicle> getVehicles() {\n        return vehicles;\n    }\n}"
    },
    {
        "instruction": "Design a Java class for a Customer that showcases both inheritance and association, where the Customer class inherits attributes from a Person class and is associated with multiple BankAccount objects?How would you design a Java class for a Customer that showcases both inheritance and association, where the Customer class inherits attributes from a Person class and is associated with multiple BankAccount objects",
        "input": "",
        "output": "public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // Getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n\npublic class BankAccount {\n    private String accountNumber;\n    private double balance;\n\n    public BankAccount(String accountNumber, double balance) {\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n\n    // Getters and setters\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n\n    public void setAccountNumber(String accountNumber) {\n        this.accountNumber = accountNumber;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public void setBalance(double balance) {\n        this.balance = balance;\n    }\n}\n\npublic class Customer extends Person {\n    private List<BankAccount> accounts;\n\n    public Customer(String name, int age) {\n        super(name, age);\n        accounts = new ArrayList<>();\n    }\n\n    // Method to add account\n    public void addAccount(BankAccount account) {\n        accounts.add(account);\n    }\n\n    // Method to get accounts\n    public List<BankAccount> getAccounts() {\n        return accounts;\n    }\n}\n\n// Example usage:\n// Customer customer = new Customer(\"John Doe\", 30);\n// BankAccount account1 = new BankAccount(\"123456789\", 1000.0);\n// BankAccount account2 = new BankAccount(\"987654321\", 2000.0);\n// customer.addAccount(account1);\n// customer.addAccount(account2);\n// List<BankAccount> customerAccounts = customer.getAccounts();"
    },
    {
        "instruction": "Java program that illustrates the concepts of inheritance and association by implementing a class hierarchy for different types of BankAccounts, such as SavingsAccount and CheckingAccount, where each account type inherits common properties from a base Account class and is associated with a Customer object?",
        "input": "",
        "output": "public class Customer {\n    private String name;\n    private List<Account> accounts;\n\n    public Customer(String name) {\n        this.name = name;\n        accounts = new ArrayList<>();\n    }\n\n    // Method to add account\n    public void addAccount(Account account) {\n        accounts.add(account);\n    }\n\n    // Method to get accounts\n    public List<Account> getAccounts() {\n        return accounts;\n    }\n}\n\npublic class Account {\n    private String accountNumber;\n    private double balance;\n    private Customer customer;\n\n    public Account(String accountNumber, double balance, Customer customer) {\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n        this.customer = customer;\n    }\n\n    // Getters and setters\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n\n    public void setAccountNumber(String accountNumber) {\n        this.accountNumber = accountNumber;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public void setBalance(double balance) {\n        this.balance = balance;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public void setCustomer(Customer customer) {\n        this.customer = customer;\n    }\n}\n\npublic class SavingsAccount extends Account {\n    private double interestRate;\n\n    public SavingsAccount(String accountNumber, double balance, Customer customer, double interestRate) {\n        super(accountNumber, balance, customer);\n        this.interestRate = interestRate;\n    }\n\n    // Getter and setter for interest rate\n    public double getInterestRate() {\n        return interestRate;\n    }\n\n    public void setInterestRate(double interestRate) {\n        this.interestRate = interestRate;\n    }\n}\n\npublic class CheckingAccount extends Account {\n    private double overdraftLimit;\n\n    public CheckingAccount(String accountNumber, double balance, Customer customer, double overdraftLimit) {\n        super(accountNumber, balance, customer);\n        this.overdraftLimit = overdraftLimit;\n    }\n\n    // Getter and setter for overdraft limit\n    public double getOverdraftLimit() {\n        return overdraftLimit;\n    }\n\n    public void setOverdraftLimit(double overdraftLimit) {\n        this.overdraftLimit = overdraftLimit;\n    }\n}\n\n// Example usage:\n// Customer customer = new Customer(\"John Doe\");\n// SavingsAccount savingsAccount = new SavingsAccount(\"123456789\", 1000.0, customer, 0.05);\n// CheckingAccount checkingAccount = new CheckingAccount(\"987654321\", 2000.0, customer, 500.0);\n// customer.addAccount(savingsAccount);\n// customer.addAccount(checkingAccount);\n// List<Account> customerAccounts = customer.getAccounts();"
    },
    {
        "instruction": "Java class modeling a Hospital, demonstrating encapsulation by encapsulating attributes such as name and location, aggregation by aggregating medical staff and equipment, and polymorphism by providing methods like admitPatient() for various hospital departments (emergency, pediatrics, surgery).",
        "input": "",
        "output": "class Hospital {\n    private String name;\n    private String location;\n    private List<MedicalStaff> medicalStaff;\n    private List<Equipment> equipment;\n\n    public Hospital(String name, String location) {\n        this.name = name;\n        this.location = location;\n        this.medicalStaff = new ArrayList<>();\n        this.equipment = new ArrayList<>();\n    }\n\n    // Getter and setter methods for name and location\n\n    public void addMedicalStaff(MedicalStaff staff) {\n        medicalStaff.add(staff);\n    }\n\n    public void addEquipment(Equipment equipment) {\n        this.equipment.add(equipment);\n    }\n\n    public void admitPatient(Patient patient, String department) {\n        // Logic for admitting patient to the specified department\n    }\n}\n\nabstract class MedicalStaff {\n    private String name;\n    private String specialization;\n\n    public MedicalStaff(String name, String specialization) {\n        this.name = name;\n        this.specialization = specialization;\n    }\n\n    // Getter and setter methods for name and specialization\n\n    public abstract void performDuties();\n}\n\nclass Doctor extends MedicalStaff {\n    public Doctor(String name, String specialization) {\n        super(name, specialization);\n    }\n\n    @Override\n    public void performDuties() {\n        // Logic for performing doctor's duties\n    }\n}\n\nclass Nurse extends MedicalStaff {\n    public Nurse(String name, String specialization) {\n        super(name, specialization);\n    }\n\n    @Override\n    public void performDuties() {\n        // Logic for performing nurse's duties\n    }\n}\n\nclass Equipment {\n    private String name;\n    private String type;\n\n    public Equipment(String name, String type) {\n        this.name = name;\n        this.type = type;\n    }\n\n    // Getter and setter methods for name and type\n}\n\nclass Patient {\n    private String name;\n    private int age;\n\n    public Patient(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // Getter and setter methods for name and age\n}\n"
    },
    {
        "instruction": "Construct a Java class representing a University, illustrating aggregation by aggregating departments and faculties, encapsulation by encapsulating attributes like name and location, and polymorphism by providing methods like enrollStudent() tailored for different academic programs (engineering, arts, sciences).",
        "input": "",
        "output": "class University {\n    private String name;\n    private String location;\n    private List<Department> departments;\n\n    public University(String name, String location) {\n        this.name = name;\n        this.location = location;\n        this.departments = new ArrayList<>();\n    }\n\n    // Getter and setter methods for name and location\n\n    public void addDepartment(Department department) {\n        departments.add(department);\n    }\n\n    public void enrollStudent(Student student, String program) {\n        // Logic for enrolling student in the specified program\n    }\n}\n\nclass Department {\n    private String name;\n    private List<Faculty> faculties;\n\n    public Department(String name) {\n        this.name = name;\n        this.faculties = new ArrayList<>();\n    }\n\n    // Getter and setter methods for name\n\n    public void addFaculty(Faculty faculty) {\n        faculties.add(faculty);\n    }\n}\n\nclass Faculty {\n    private String name;\n    private String specialization;\n\n    public Faculty(String name, String specialization) {\n        this.name = name;\n        this.specialization = specialization;\n    }\n\n    // Getter and setter methods for name and specialization\n}\n\nclass Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // Getter and setter methods for name and age\n}\n"
    },
    {
        "instruction": "Java class for a Hotel, emphasizing aggregation by aggregating rooms and services, encapsulation by encapsulating attributes such as name and location, and polymorphism by providing methods like bookRoom() suitable for different types of accommodations (luxury, budget, resort).",
        "input": "",
        "output": "class Hotel {\n    private String name;\n    private String location;\n    private List<Room> rooms;\n    private List<Service> services;\n\n    public Hotel(String name, String location) {\n        this.name = name;\n        this.location = location;\n        this.rooms = new ArrayList<>();\n        this.services = new ArrayList<>();\n    }\n\n    // Getter and setter methods for name and location\n\n    public void addRoom(Room room) {\n        rooms.add(room);\n    }\n\n    public void addService(Service service) {\n        services.add(service);\n    }\n\n    public void bookRoom(RoomType roomType, int numberOfRooms, Date checkInDate, Date checkOutDate) {\n        // Logic for booking rooms based on room type\n    }\n}\n\nclass Room {\n    private int roomNumber;\n    private RoomType type;\n\n    public Room(int roomNumber, RoomType type) {\n        this.roomNumber = roomNumber;\n        this.type = type;\n    }\n\n    // Getter and setter methods for roomNumber and type\n}\n\nclass Service {\n    private String name;\n    private double price;\n\n    public Service(String name, double price) {\n        this.name = name;\n        this.price = price;\n    }\n\n    // Getter and setter methods for name and price\n}\n\nenum RoomType {\n    LUXURY,\n    BUDGET,\n    RESORT\n}\n"
    },
    {
        "instruction": "Design a Java class hierarchy for a Vehicle Rental System. Implement a base class named Vehicle with attributes such as make, model, and year. Derive subclasses such as Car and Truck inheriting from Vehicle. Incorporate polymorphism by including methods like calculateRentalFee() which calculates the rental fee based on the type of vehicle. Furthermore, utilize inheritance to create specialized subclasses like LuxuryCar or Commercial Truck with additional attributes and behaviors.",
        "input": "",
        "output": "class Vehicle {\n    private String make;\n    private String model;\n    private int year;\n\n    public Vehicle(String make, String model, int year) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n    }\n\n    public String getMake() {\n        return make;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public int getYear() {\n        return year;\n    }\n\n    public double calculateRentalFee() {\n        // Default rental fee calculation logic\n        return 50.0;\n    }\n}\n\n\nclass Car extends Vehicle {\n    public Car(String make, String model, int year) {\n        super(make, model, year);\n    }\n\n    // Additional car-specific attributes and behaviors\n}\n\nclass Truck extends Vehicle {\n    public Truck(String make, String model, int year) {\n        super(make, model, year);\n    }\n\n    // Additional truck-specific attributes and behaviors\n}\n\nclass LuxuryCar extends Car {\n    public LuxuryCar(String make, String model, int year) {\n        super(make, model, year);\n    }\n\n    @Override\n    public double calculateRentalFee() {\n        // Custom rental fee calculation for luxury cars\n        return super.calculateRentalFee() * 1.5;\n    }\n}\n\nclass CommercialTruck extends Truck {\n    private int maxLoadCapacity;\n\n    public CommercialTruck(String make, String model, int year, int maxLoadCapacity) {\n        super(make, model, year);\n        this.maxLoadCapacity = maxLoadCapacity;\n    }\n\n    // Additional attributes and behaviors specific to commercial trucks\n}\n"
    },
    {
        "instruction": "Develop a Java program for a University Management System. Design a class named Department that encapsulates attributes like departmentName and departmentCode. Utilize aggregation by including a list of Student objects within the Department class to represent enrolled students. Implement methods for adding new students, removing students, and retrieving student information. Additionally, design a Professor class and aggregate instances of Professor within the Department class to represent faculty members. Implement functionalities for assigning professors to courses and managing course-related activities.",
        "input": "",
        "output": "import java.util.ArrayList;\nimport java.util.List;\n\n// Student class representing a student\nclass Student {\n    private String studentName;\n    private int studentID;\n\n    public Student(String name, int id) {\n        this.studentName = name;\n        this.studentID = id;\n    }\n\n    // Getter methods\n    public String getStudentName() {\n        return studentName;\n    }\n\n    public int getStudentID() {\n        return studentID;\n    }\n}\n\n// Professor class representing a professor\nclass Professor {\n    private String professorName;\n    private String professorID;\n\n    public Professor(String name, String id) {\n        this.professorName = name;\n        this.professorID = id;\n    }\n\n    // Getter methods\n    public String getProfessorName() {\n        return professorName;\n    }\n\n    public String getProfessorID() {\n        return professorID;\n    }\n}\n\n// Department class encapsulating department information and managing students and professors\nclass Department {\n    private String departmentName;\n    private String departmentCode;\n    private List<Student> students;\n    private List<Professor> professors;\n\n    public Department(String name, String code) {\n        this.departmentName = name;\n        this.departmentCode = code;\n        this.students = new ArrayList<>();\n        this.professors = new ArrayList<>();\n    }\n\n    // Method to add a new student\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    // Method to remove a student\n    public void removeStudent(Student student) {\n        students.remove(student);\n    }\n\n    // Method to retrieve student information\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    // Method to add a new professor\n    public void addProfessor(Professor professor) {\n        professors.add(professor);\n    }\n\n    // Method to remove a professor\n    public void removeProfessor(Professor professor) {\n        professors.remove(professor);\n    }\n\n    // Method to assign a professor to a course\n    public void assignProfessorToCourse(Professor professor, String courseName) {\n        // Implementation to assign professor to course\n    }\n\n    // Additional methods for managing course-related activities\n}\n"
    },
    {
        "instruction": "Design a Java class hierarchy for vehicles, including inheritance by having a base class Vehicle with common attributes like make, model, and year. Implement subclasses Car, Truck, and Motorcycle, each inheriting from Vehicle. Show polymorphism by defining a method in each subclass, like drive(), that outputs a message specific to the type of vehicle.",
        "input": "",
        "output": "class Vehicle {\n    private String make;\n    private String model;\n    private int year;\n\n    public Vehicle(String make, String model, int year) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n    }\n\n    public String getMake() {\n        return make;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public int getYear() {\n        return year;\n    }\n\n    public void drive() {\n        System.out.println(\"This is a generic vehicle.\");\n    }\n}\n\n\nclass Car extends Vehicle {\n    public Car(String make, String model, int year) {\n        super(make, model, year);\n    }\n\n    @Override\n    public void drive() {\n        System.out.println(\"Driving a car...\");\n    }\n}\n\nclass Truck extends Vehicle {\n    public Truck(String make, String model, int year) {\n        super(make, model, year);\n    }\n\n    @Override\n    public void drive() {\n        System.out.println(\"Driving a truck...\");\n    }\n}\n\nclass Motorcycle extends Vehicle {\n    public Motorcycle(String make, String model, int year) {\n        super(make, model, year);\n    }\n\n    @Override\n    public void drive() {\n        System.out.println(\"Riding a motorcycle...\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Vehicle car = new Car(\"Toyota\", \"Camry\", 2022);\n        Vehicle truck = new Truck(\"Ford\", \"F-150\", 2021);\n        Vehicle motorcycle = new Motorcycle(\"Harley-Davidson\", \"Sportster\", 2020);\n\n        car.drive();\n        truck.drive();\n        motorcycle.drive();\n    }\n}"
    },
    {
        "instruction": "Write a Java class for a BankAccount that demonstrates encapsulation by encapsulating attributes like account number and balance, abstraction by providing methods for depositing, withdrawing, and checking balance, and inheritance by extending a superclass Account.",
        "input": "",
        "output": "// Superclass Account\nclass Account {\n    private int accountNumber;\n    private double balance;\n\n    public Account(int accountNumber, double balance) {\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n\n    // Getter methods for encapsulation\n    public int getAccountNumber() {\n        return accountNumber;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    // Abstract method for withdrawing (to be implemented by subclasses)\n    public abstract void withdraw(double amount);\n\n    // Abstract method for depositing (to be implemented by subclasses)\n    public abstract void deposit(double amount);\n}\n\n// Subclass BankAccount\nclass BankAccount extends Account {\n    public BankAccount(int accountNumber, double balance) {\n        super(accountNumber, balance);\n    }\n\n    // Implementing withdraw method\n    @Override\n    public void withdraw(double amount) {\n        if (amount > 0 && amount <= getBalance()) {\n            setBalance(getBalance() - amount);\n            System.out.println(\"Withdrawn: $\" + amount);\n        } else {\n            System.out.println(\"Invalid amount or insufficient balance.\");\n        }\n    }\n\n    // Implementing deposit method\n    @Override\n    public void deposit(double amount) {\n        if (amount > 0) {\n            setBalance(getBalance() + amount);\n            System.out.println(\"Deposited: $\" + amount);\n        } else {\n            System.out.println(\"Invalid amount.\");\n        }\n    }\n}\n\n// Main class to demonstrate the BankAccount class\npublic class Main {\n    public static void main(String[] args) {\n        // Creating a BankAccount object\n        BankAccount account = new BankAccount(123456, 1000.0);\n\n        // Demonstrating encapsulation by accessing account number and balance using getter methods\n        System.out.println(\"Account Number: \" + account.getAccountNumber());\n        System.out.println(\"Balance: $\" + account.getBalance());\n\n        // Depositing and withdrawing money\n        account.deposit(500.0);\n        account.withdraw(200.0);\n\n        // Checking balance after transactions\n        System.out.println(\"New Balance: $\" + account.getBalance());\n    }\n}"
    },
    {
        "instruction": "Create a Java class for a Vehicle that showcases inheritance by having subclasses like Car and Motorcycle, and aggregation by aggregating parts like engine and wheels.",
        "input": "",
        "output": "// Superclass Vehicle\nclass Vehicle {\n    // Methods for starting and stopping the vehicle\n    public void start() {\n        System.out.println(\"Vehicle started\");\n    }\n\n    public void stop() {\n        System.out.println(\"Vehicle stopped\");\n    }\n}\n\n// Subclass Car extending Vehicle\nclass Car extends Vehicle {\n    private Engine engine;\n    private Wheel[] wheels;\n\n    // Constructor for Car\n    public Car(Engine engine, Wheel[] wheels) {\n        this.engine = engine;\n        this.wheels = wheels;\n    }\n\n    // Method to display car details\n    public void display() {\n        System.out.println(\"Car details:\");\n        System.out.println(\"Engine: \" + engine);\n        System.out.println(\"Wheels: \" + Arrays.toString(wheels));\n    }\n}\n\n// Subclass Motorcycle extending Vehicle\nclass Motorcycle extends Vehicle {\n    private Engine engine;\n\n    // Constructor for Motorcycle\n    public Motorcycle(Engine engine) {\n        this.engine = engine;\n    }\n\n    // Method to display motorcycle details\n    public void display() {\n        System.out.println(\"Motorcycle details:\");\n        System.out.println(\"Engine: \" + engine);\n    }\n}\n\n// Class Engine representing the engine\nclass Engine {\n    private String type;\n\n    // Constructor for Engine\n    public Engine(String type) {\n        this.type = type;\n    }\n\n    // Method to display engine details\n    @Override\n    public String toString() {\n        return \"Engine type: \" + type;\n    }\n}\n\n// Class Wheel representing a wheel\nclass Wheel {\n    private int size;\n\n    // Constructor for Wheel\n    public Wheel(int size) {\n        this.size = size;\n    }\n\n    // Method to display wheel details\n    @Override\n    public String toString() {\n        return \"Wheel size: \" + size;\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating engine and wheels\n        Engine carEngine = new Engine(\"V8\");\n        Wheel[] carWheels = {new Wheel(18), new Wheel(18), new Wheel(18), new Wheel(18)};\n        Engine bikeEngine = new Engine(\"V2\");\n\n        // Creating car and motorcycle objects\n        Car car = new Car(carEngine, carWheels);\n        Motorcycle motorcycle = new Motorcycle(bikeEngine);\n\n        // Displaying vehicle details\n        car.start();\n        car.display();\n        car.stop();\n        System.out.println();\n        motorcycle.start();\n        motorcycle.display();\n        motorcycle.stop();\n    }\n}"
    },
    {
        "instruction": "Design a Java class for a Shape that demonstrates inheritance by having subclasses like Circle and Rectangle, and association by associating points with shapes.",
        "input": "",
        "output": "// Superclass Shape\npublic class Shape {\n    // Method to calculate area\n    public double calculateArea() {\n        return 0;\n    }\n\n    // Method to calculate perimeter\n    public double calculatePerimeter() {\n        return 0;\n    }\n}\n\n// Subclass Circle extending Shape\nclass Circle extends Shape {\n    private Point center;\n    private double radius;\n\n    // Constructor for Circle\n    public Circle(Point center, double radius) {\n        this.center = center;\n        this.radius = radius;\n    }\n\n    // Override method to calculate area for Circle\n    @Override\n    public double calculateArea() {\n        return Math.PI * radius * radius;\n    }\n\n    // Override method to calculate perimeter for Circle\n    @Override\n    public double calculatePerimeter() {\n        return 2 * Math.PI * radius;\n    }\n}\n\n// Subclass Rectangle extending Shape\nclass Rectangle extends Shape {\n    private Point topLeft;\n    private Point bottomRight;\n\n    // Constructor for Rectangle\n    public Rectangle(Point topLeft, Point bottomRight) {\n        this.topLeft = topLeft;\n        this.bottomRight = bottomRight;\n    }\n\n    // Override method to calculate area for Rectangle\n    @Override\n    public double calculateArea() {\n        double width = Math.abs(topLeft.getX() - bottomRight.getX());\n        double height = Math.abs(topLeft.getY() - bottomRight.getY());\n        return width * height;\n    }\n\n    // Override method to calculate perimeter for Rectangle\n    @Override\n    public double calculatePerimeter() {\n        double width = Math.abs(topLeft.getX() - bottomRight.getX());\n        double height = Math.abs(topLeft.getY() - bottomRight.getY());\n        return 2 * (width + height);\n    }\n}\n\n// Class Point representing a point\nclass Point {\n    private double x;\n    private double y;\n\n    // Constructor for Point\n    public Point(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    // Getter methods for x and y coordinates\n    public double getX() {\n        return x;\n    }\n\n    public double getY() {\n        return y;\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating points\n        Point center = new Point(0, 0);\n        Point topLeft = new Point(0, 5);\n        Point bottomRight = new Point(10, 0);\n\n        // Creating shapes\n        Circle circle = new Circle(center, 5);\n        Rectangle rectangle = new Rectangle(topLeft, bottomRight);\n\n        // Calculating and printing area and perimeter of Circle\n        System.out.println(\"Circle:\");\n        System.out.println(\"Area: \" + circle.calculateArea());\n        System.out.println(\"Perimeter: \" + circle.calculatePerimeter());\n\n        // Calculating and printing area and perimeter of Rectangle\n        System.out.println(\"\\nRectangle:\");\n        System.out.println(\"Area: \" + rectangle.calculateArea());\n        System.out.println(\"Perimeter: \" + rectangle.calculatePerimeter());\n    }\n}"
    },
    {
        "instruction": "Write a Java class for a Zoo that showcases inheritance by having subclasses like Mammal and Reptile, and association by associating animals with exhibits.",
        "input": "",
        "output": "public class Zoo {\n  private String name;\n  private String location;\n  private List<Exhibit> exhibits;\n\n  public Zoo(String name, String location) {\n   this.name = name;\n    this.location = location;\n    this.exhibits = new ArrayList<>();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public String getLocation() {\n    return location;\n  }\n\n  public List<Exhibit> getExhibits() {\n    // Return a copy of the list to avoid modification from outside\n    return new ArrayList<>(exhibits);\n  }\n\n  public void addExhibit(Exhibit exhibit) {\n    exhibits.add(exhibit);\n  }\n}\n\n// Superclass Animal\nabstract class Animal {\n  private String name;\n\n  public Animal(String name) {\n    this.name = name;\n  }\n\n  public String getName() {\n    return name;\n  }\n}\n\n// Subclass Mammal extending Animal\nclass Mammal extends Animal {\n  public Mammal(String name) {\n    super(name);\n  }\n}\n\n// Subclass Reptile extending Animal\nclass Reptile extends Animal {\n  public Reptile(String name) {\n    super(name);\n  }\n}\n\n// Class Exhibit associating with Animals\npublic class Exhibit {\n  private String name;\n  private List<Animal> animals;\n\n  public Exhibit(String name) {\n    this.name = name;\n    this.animals = new ArrayList<>();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public List<Animal> getAnimals() {\n    // Similar to Zoo.getExhibits(), return a copy of the list\n    return new ArrayList<>(animals);\n  }\n\n  public void addAnimal(Animal animal) {\n    animals.add(animal);\n  }\n}"
    },
    {
        "instruction": "Implement a Java class for a Company that demonstrates inheritance by having subclasses like TechCompany and RetailCompany, and association by associating employees with departments.",
        "input": "",
        "output": "public class Company { \n  // Encapsulated attributes\n  private String name; \n  private double revenue; \n  // Aggregation - Company has departments (an array of Department objects)\n  private Department[] departments; \n  // Constructor with arguments for name and initial departments\n  public Company(String name, Department[] departments) { \n    this.name = name; \n    this.revenue = 0.0; // Initialize revenue to 0 by default\n    this.departments = departments; \n  } \n  // Getter methods for name and revenue\n  public String getName() { \n    return name; \n  } \n  public double getRevenue() { \n    return revenue; \n  } \n  // Method to add revenue to the company\n  public void addRevenue(double amount) { \n    this.revenue += amount; \n  } \n  // Subclasses - TechCompany and RetailCompany (implement these)\n  public static class TechCompany extends Company { \n    // Add specific attributes and methods for TechCompany here\n    public TechCompany(String name, Department[] departments) { \n      super(name, departments); \n    } \n  } \n  public static class RetailCompany extends Company { \n    // Add specific attributes and methods for RetailCompany here\n    public RetailCompany(String name, Department[] departments) { \n      super(name, departments); \n    } \n  } \n} \n  // Example Department class (can be further extended)\n  class Department { \n   private String name; \n   private int employeeCount; \n   public Department(String name, int employeeCount) { \n     this.name = name; \n     this.employeeCount = employeeCount; \n   } \n   // Getter methods for department name and employee count\n   public String getName() { \n     return name; \n   } \n   public int getEmployeeCount() { \n     return employeeCount; \n   } \n }"
    },
    {
        "instruction": "Write a Java class for a Bank that showcases aggregation by aggregating accounts, and association by associating customers with accounts.",
        "input": "",
        "output": "public class Bank {\n  private String name;\n  private String location;\n  private List<Customer> customers;\n\n  public Bank(String name, String location) {\n    this.name = name;\n    this.location = location;\n    this.customers = new ArrayList<>();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public String getLocation() {\n    return location;\n  }\n\n  public List<Customer> getCustomers() {\n    return new ArrayList<>(customers); // Return a copy of the list to avoid modification from outside\n  }\n\n  public void addCustomer(Customer customer) {\n    customers.add(customer);\n  }\n}\n\n// Class Customer associating with Account\npublic class Customer {\n  private String name;\n  private List<Account> accounts;\n\n  public Customer(String name) {\n    this.name = name;\n    this.accounts = new ArrayList<>();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public List<Account> getAccounts() {\n    return new ArrayList<>(accounts); // Return a copy of the list to avoid modification from outside\n  }\n\n  public void addAccount(Account account) {\n    accounts.add(account);\n  }\n}\n\n// Class Account representing bank accounts (can be further extended)\nclass Account {\n  // Attributes and methods of Account class\n}"
    },
    {
        "instruction": "Write a Java class for a University that demonstrates inheritance by having subclasses like Faculty and Student, and association by associating students with courses.",
        "input": "",
        "output": "public class University {\n  private String name;\n  private List<Course> courses;\n\n  public University(String name) {\n    this.name = name;\n    this.courses = new ArrayList<>();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public List<Course> getCourses() {\n    return new ArrayList<>(courses); // Return a copy of the list to avoid modification from outside\n  }\n\n  public void addCourse(Course course) {\n    courses.add(course);\n  }\n}\n\nclass Person {\n  // Attributes and methods common to all persons\n}\n\nclass Faculty extends Person {\n  // Attributes and methods specific to faculty members\n}\n\nclass Student extends Person {\n  // Attributes and methods specific to students\n  private List<Course> courses;\n\n  public Student() {\n    this.courses = new ArrayList<>();\n  }\n\n  public List<Course> getCourses() {\n    return new ArrayList<>(courses); // Return a copy of the list to avoid modification from outside\n  }\n\n  public void enroll(Course course) {\n    courses.add(course);\n  }\n}\n\nclass Course {\n  private String name;\n\n  public Course(String name) {\n    this.name = name;\n  }\n\n  public String getName() {\n    return name;\n  }\n}\n"
    },
    {
        "instruction": "Create a Java class for a Hospital that showcases aggregation by aggregating departments, and association by associating patients with doctors.",
        "input": "",
        "output": "public class Hospital {\n  private String name;\n  private List<Department> departments;\n\n  public Hospital(String name) {\n    this.name = name;\n    this.departments = new ArrayList<>();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public List<Department> getDepartments() {\n    return new ArrayList<>(departments); // Return a copy of the list to avoid modification from outside\n  }\n\n  public void addDepartment(Department department) {\n    departments.add(department);\n  }\n}\n\nclass Department {\n  // Attributes and methods of Department class\n}\n\nclass Doctor {\n  // Attributes and methods of Doctor class\n}\n\nclass Patient {\n  // Attributes and methods of Patient class\n}\n"
    },
    {
        "instruction": "Write a Java class for a Restaurant that exhibits inheritance by having subclasses like FastFoodRestaurant and FineDiningRestaurant, and association by associating employees with shifts.",
        "input": "",
        "output": "public class Restaurant {\n  private String name;\n  private List<Employee> employees;\n\n  public Restaurant(String name) {\n    this.name = name;\n    this.employees = new ArrayList<>();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public List<Employee> getEmployees() {\n    return new ArrayList<>(employees); // Return a copy of the list to avoid modification from outside\n  }\n\n  public void addEmployee(Employee employee) {\n    employees.add(employee);\n  }\n}\n\nclass Employee {\n  // Attributes and methods of Employee class\n}\n\nclass Shift {\n  // Attributes and methods of Shift class\n}\n\nclass FastFoodRestaurant extends Restaurant {\n  // Attributes and methods specific to fast-food restaurants\n}\n\nclass FineDiningRestaurant extends Restaurant {\n  // Attributes and methods specific to fine dining restaurants\n}\n"
    },
    {
        "instruction": "Design a Java class for a SportsTeam that demonstrates aggregation by aggregating players, and association by associating coaches with specific teams.",
        "input": "",
        "output": "public class SportsTeam {\n  private String name;\n  private List<Player> players;\n  private Coach coach;\n\n  public SportsTeam(String name) {\n    this.name = name;\n    this.players = new ArrayList<>();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public List<Player> getPlayers() {\n    return new ArrayList<>(players); // Return a copy of the list to avoid modification from outside\n  }\n\n  public void addPlayer(Player player) {\n    players.add(player);\n  }\n\n  public Coach getCoach() {\n    return coach;\n  }\n\n  public void setCoach(Coach coach) {\n    this.coach = coach;\n  }\n}\n\nclass Player {\n  // Attributes and methods of Player class\n}\n\nclass Coach {\n  // Attributes and methods of Coach class\n}\n"
    },
    {
        "instructions": "Write a Java program that models a business scenario using three classes: Customer and two related classes connected through either inheritance, aggregation, or association. The classes should include methods and instance variables relevant to the business scenario, such as generating and validating IDs, calculating specific business metrics, and other necessary functionalities.",
        "input": "",
        "output": "// Customer class representing a customer\npublic class Customer {\n    // Static variable\n    private static final int MAX_LOYALTY_POINTS = 100;\n\n    // Instance variables\n    private String customerId;\n    private String name;\n    private String email;\n    private ArrayList<Purchase> purchases;\n    private int loyaltyPoints;\n\n    // Constructor\n    public Customer(String name, String email) {\n        this.customerId = generateId();\n        this.name = name;\n        this.email = email;\n        this.purchases = new ArrayList<>();\n        this.loyaltyPoints = 0;\n    }\n\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    public void addPurchase(Purchase purchase) {\n        purchases.add(purchase);\n        updateLoyaltyPoints(purchase.getTotalAmount());\n    }\n\n    private void updateLoyaltyPoints(double amount) {\n        int pointsEarned = (int) (amount / 10); // Earn 1 loyalty point for every $10 spent\n        loyaltyPoints += pointsEarned;\n        if (loyaltyPoints > MAX_LOYALTY_POINTS) {\n            loyaltyPoints = MAX_LOYALTY_POINTS;\n        }\n    }\n\n    public int getLoyaltyPoints() {\n        return loyaltyPoints;\n    }\n}\n\n// Cart class representing a shopping cart\npublic class Cart {\n    private String cartId;\n    private Customer customer;\n    private ArrayList<Item> items;\n\n    public Cart(Customer customer) {\n        this.cartId = generateId();\n        this.customer = customer;\n        this.items = new ArrayList<>();\n    }\n\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    public void addItem(Item item) {\n        items.add(item);\n    }\n\n    public void removeItem(Item item) {\n        items.remove(item);\n    }\n\n    public ArrayList<Item> getItems() {\n        return items;\n    }\n}\n\n// Purchase class representing a purchase\npublic class Purchase {\n    private String purchaseId;\n    private Customer customer;\n    private ArrayList<Item> items;\n    private double totalAmount;\n\n    public Purchase(Customer customer, ArrayList<Item> items) {\n        this.purchaseId = generateId();\n        this.customer = customer;\n        this.items = items;\n        this.totalAmount = calculateTotalAmount();\n    }\n\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    private double calculateTotalAmount() {\n        double total = 0;\n        for (Item item : items) {\n            total += item.getPrice();\n        }\n        return total;\n    }\n\n    public double getTotalAmount() {\n        return totalAmount;\n    }\n}\n\n// Item class representing an item\npublic class Item {\n    private String itemId;\n    private String name;\n    private double price;\n    private int quantity;\n\n    public Item(String name, double price, int quantity) {\n        this.itemId = generateId();\n        this.name = name;\n        this.price = price;\n        this.quantity = quantity;\n    }\n\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public int getQuantity() {\n        return quantity;\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        Customer customer = new Customer(\"John Doe\", \"john@example.com\");\n        Item item1 = new Item(\"Chair\", 50.0, 2);\n        Item item2 = new Item(\"Table\", 100.0, 1);\n\n        Cart cart = new Cart(customer);\n        cart.addItem(item1);\n        cart.addItem(item2);\n\n        Purchase purchase = new Purchase(customer, cart.getItems());\n\n        System.out.println(\"Total purchase amount: $\" + purchase.getTotalAmount());\n        System.out.println(\"Loyalty points earned: \" + customer.getLoyaltyPoints());\n    }\n}\n"
    },
    {
        "instructions": "Write a Java program for an advertising agency management system. The system should include classes for representing the advertising agency, campaigns managed by the agency, and clients who hire the agency. Implement methods for calculating the total budget of all campaigns managed by the agency, finding the campaign with the highest budget, and calculating the remaining budget for a specific campaign. Ensure that each class has appropriate instance variables, methods, and relationships with other classes. Use UUIDs for generating unique identifiers for agencies, campaigns, and clients. Your implementation should demonstrate complex methods such as calculating remaining budget, and adhere to realistic business scenarios.",
        "input": "",
        "output": "// AdAgency class representing an advertising agency\npublic class AdAgency {\n    // Instance variables\n    private String agencyId;\n    private String name;\n    private ArrayList<Campaign> campaigns;\n\n    // Constructor\n    public AdAgency(String name) {\n        this.agencyId = generateId();\n        this.name = name;\n        this.campaigns = new ArrayList<>();\n    }\n\n    // Method to generate ID\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    // Method to add a campaign\n    public void addCampaign(Campaign campaign) {\n        campaigns.add(campaign);\n    }\n\n    // Method to calculate the total budget of all campaigns\n    public double calculateTotalBudget() {\n        double totalBudget = 0;\n        for (Campaign campaign : campaigns) {\n            totalBudget += campaign.getBudget();\n        }\n        return totalBudget;\n    }\n\n    // Method to find the campaign with the highest budget\n    public Campaign findCampaignWithHighestBudget() {\n        if (campaigns.isEmpty()) {\n            return null;\n        }\n        return Collections.max(campaigns, (c1, c2) -> Double.compare(c1.getBudget(), c2.getBudget()));\n    }\n\n    // Getter method for campaigns\n    public ArrayList<Campaign> getCampaigns() {\n        return campaigns;\n    }\n}\n\n// Campaign class representing a campaign managed by the agency\npublic class Campaign {\n    // Instance variables\n    private String campaignId;\n    private Client client;\n    private String name;\n    private double budget;\n\n    // Constructor\n    public Campaign(Client client, String name, double budget) {\n        this.campaignId = generateId();\n        this.client = client;\n        this.name = name;\n        this.budget = budget;\n    }\n\n    // Method to generate ID\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    // Getter method for budget\n    public double getBudget() {\n        return budget;\n    }\n\n    // Method to calculate remaining budget\n    public double calculateRemainingBudget() {\n        // Simulating a complex calculation for remaining budget\n        return budget * 0.8; // For example, assuming 80% of the budget is remaining\n    }\n}\n\n// Client class representing a client of the advertising agency\npublic class Client {\n    // Instance variables\n    private String clientId;\n    private String name;\n    private String contactInfo;\n\n    // Constructor\n    public Client(String name, String contactInfo) {\n        this.clientId = generateId();\n        this.name = name;\n        this.contactInfo = contactInfo;\n    }\n\n    // Method to generate ID\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    // Getter method for client ID\n    public String getClientId() {\n        return clientId;\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating an advertising agency\n        AdAgency adAgency = new AdAgency(\"XYZ Advertising\");\n\n        // Creating clients\n        Client client1 = new Client(\"Client1\", \"client1@example.com\");\n        Client client2 = new Client(\"Client2\", \"client2@example.com\");\n\n        // Creating campaigns\n        Campaign campaign1 = new Campaign(client1, \"Campaign 1\", 5000.0);\n        Campaign campaign2 = new Campaign(client2, \"Campaign 2\", 8000.0);\n\n        // Adding campaigns to the agency\n        adAgency.addCampaign(campaign1);\n        adAgency.addCampaign(campaign2);\n\n        // Displaying total budget of all campaigns\n        System.out.println(\"Total budget of all campaigns: $\" + adAgency.calculateTotalBudget());\n\n        // Finding campaign with highest budget and displaying its remaining budget\n        Campaign highestBudgetCampaign = adAgency.findCampaignWithHighestBudget();\n        if (highestBudgetCampaign != null) {\n            System.out.println(\"Campaign with highest budget: \" + highestBudgetCampaign.getName());\n            System.out.println(\"Remaining budget of the campaign: $\" + highestBudgetCampaign.calculateRemainingBudget());\n        } else {\n            System.out.println(\"No campaigns found.\");\n        }\n    }\n}\n"
    },
    {
        "instructions": "Design a Java program for a hospital management system. The system should include classes representing a hospital, doctors, and patients. Implement methods for calculating the average number of patients per doctor and finding the doctor with the highest number of patients. Ensure that each class has appropriate instance variables, methods, and relationships with other classes. Use UUIDs for generating unique identifiers for hospitals, doctors, and patients. Your implementation should demonstrate complex methods such as calculating averages and finding maximum values, and adhere to realistic business scenarios.",
        "input": "",
        "output": "// Hospital class representing a hospital\npublic class Hospital {\n    // Instance variables\n    private String hospitalId;\n    private String name;\n    private ArrayList<Doctor> doctors;\n    private ArrayList<Patient> patients;\n\n    // Constructor\n    public Hospital(String name) {\n        this.hospitalId = generateId();\n        this.name = name;\n        this.doctors = new ArrayList<>();\n        this.patients = new ArrayList<>();\n    }\n\n    // Method to generate ID\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    // Method to add a doctor\n    public void addDoctor(Doctor doctor) {\n        doctors.add(doctor);\n    }\n\n    // Method to add a patient\n    public void addPatient(Patient patient) {\n        patients.add(patient);\n    }\n\n    // Method to calculate the average number of patients per doctor\n    public double calculateAveragePatientsPerDoctor() {\n        if (doctors.isEmpty()) {\n            return 0;\n        }\n        int totalPatients = 0;\n        for (Doctor doctor : doctors) {\n            totalPatients += doctor.getPatients().size();\n        }\n        return (double) totalPatients / doctors.size();\n    }\n\n    // Method to find the doctor with the most patients\n    public Doctor findDoctorWithMostPatients() {\n        if (doctors.isEmpty()) {\n            return null;\n        }\n        return Collections.max(doctors, (d1, d2) -> Integer.compare(d1.getPatients().size(), d2.getPatients().size()));\n    }\n\n    // Getter method for doctors\n    public ArrayList<Doctor> getDoctors() {\n        return doctors;\n    }\n\n    // Getter method for patients\n    public ArrayList<Patient> getPatients() {\n        return patients;\n    }\n}\n\n// Doctor class representing a doctor in the hospital\npublic class Doctor {\n    // Instance variables\n    private String doctorId;\n    private String name;\n    private ArrayList<Patient> patients;\n\n    // Constructor\n    public Doctor(String name) {\n        this.doctorId = generateId();\n        this.name = name;\n        this.patients = new ArrayList<>();\n    }\n\n    // Method to generate ID\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    // Method to add a patient\n    public void addPatient(Patient patient) {\n        patients.add(patient);\n    }\n\n    // Getter method for patients\n    public ArrayList<Patient> getPatients() {\n        return patients;\n    }\n\n    // Getter method for doctor name\n    public String getName() {\n        return name;\n    }\n}\n\n// Patient class representing a patient in the hospital\npublic class Patient {\n    // Instance variables\n    private String patientId;\n    private String name;\n    private int age;\n    private String condition;\n\n    // Constructor\n    public Patient(String name, int age, String condition) {\n        this.patientId = generateId();\n        this.name = name;\n        this.age = age;\n        this.condition = condition;\n    }\n\n    // Method to generate ID\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    // Getter method for patient name\n    public String getName() {\n        return name;\n    }\n\n    // Other methods related to managing the patient\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating a hospital\n        Hospital hospital = new Hospital(\"XYZ Hospital\");\n\n        // Creating doctors\n        Doctor doctor1 = new Doctor(\"Dr. Smith\");\n        Doctor doctor2 = new Doctor(\"Dr. Johnson\");\n\n        // Creating patients\n        Patient patient1 = new Patient(\"John Doe\", 35, \"Fever\");\n        Patient patient2 = new Patient(\"Jane Smith\", 45, \"Injury\");\n        Patient patient3 = new Patient(\"Mary Johnson\", 50, \"Heart Disease\");\n\n        // Adding patients to doctors\n        doctor1.addPatient(patient1);\n        doctor2.addPatient(patient2);\n        doctor2.addPatient(patient3);\n\n        // Adding doctors and patients to the hospital\n        hospital.addDoctor(doctor1);\n        hospital.addDoctor(doctor2);\n        hospital.addPatient(patient1);\n        hospital.addPatient(patient2);\n        hospital.addPatient(patient3);\n\n        // Displaying average patients per doctor\n        System.out.println(\"Average patients per doctor: \" + hospital.calculateAveragePatientsPerDoctor());\n\n        // Finding doctor with most patients\n        Doctor mostPatientsDoctor = hospital.findDoctorWithMostPatients();\n        if (mostPatientsDoctor != null) {\n            System.out.println(\"Doctor with the most patients: \" + mostPatientsDoctor.getName());\n            System.out.println(\"Number of patients: \" + mostPatientsDoctor.getPatients().size());\n        } else {\n            System.out.println(\"No doctors found.\");\n        }\n    }\n}\n"
    },
    {
        "instructions": "Write a Java program that models a business scenario using three classes: Marketing, Campaign, and Product. These classes should be connected through inheritance, aggregation, or association. The classes should include methods and instance variables relevant to the business scenario, such as generating and validating IDs, calculating campaign reach, managing products, and other necessary functionalities.",
        "input": "",
        "output": "// Product class representing a product\npublic class Product {\n    // Instance variables\n    private String productId;\n    private String name;\n    private double price;\n\n    // Constructor\n    public Product(String name, double price) {\n        this.name = name;\n        this.price = price;\n        this.productId = generateID();\n    }\n\n    // Method to generate ID\n    private String generateID() {\n        return \"PROD-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getter methods\n    public String getProductId() {\n        return productId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n}\n\n// Customer class representing a customer\npublic class Customer {\n    // Instance variables\n    private String customerId;\n    private String name;\n    private String email;\n    private String phone;\n\n    // Constructor\n    public Customer(String name, String email, String phone) {\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n        this.customerId = generateID();\n    }\n\n    // Method to generate ID\n    private String generateID() {\n        return \"CUST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getter methods\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n}\n\n// Marketing class representing a marketing campaign\npublic class Marketing {\n    // Instance variables\n    private String marketingId;\n    private String campaignName;\n    private Product product;\n    private List<Customer> customers;\n\n    // Constructor\n    public Marketing(String campaignName, Product product) {\n        this.campaignName = campaignName;\n        this.product = product;\n        this.customers = new ArrayList<>();\n        this.marketingId = generateID();\n    }\n\n    // Method to generate ID\n    private String generateID() {\n        return \"MKT-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Method to validate ID\n    public boolean validateID(String id) {\n        return id.matches(\"MKT-[A-Z0-9]{8}\");\n    }\n\n    // Method to add a customer\n    public void addCustomer(Customer customer) {\n        customers.add(customer);\n    }\n\n    // Method to remove a customer\n    public void removeCustomer(String customerId) {\n        customers.removeIf(customer -> customer.getCustomerId().equals(customerId));\n    }\n\n    // Method to display campaign details\n    public void displayCampaignDetails() {\n        System.out.println(\"Campaign ID: \" + marketingId);\n        System.out.println(\"Campaign Name: \" + campaignName);\n        System.out.println(\"Product: \" + product.getName() + \" (ID: \" + product.getProductId() + \")\");\n        System.out.println(\"Customers in this campaign:\");\n        for (Customer customer : customers) {\n            System.out.println(\" - \" + customer.getName() + \" (ID: \" + customer.getCustomerId() + \")\");\n        }\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Product product = new Product(\"Smartphone\", 699.99);\n        Customer customer1 = new Customer(\"Alice\", \"alice@example.com\", \"123-456-7890\");\n        Customer customer2 = new Customer(\"Bob\", \"bob@example.com\", \"098-765-4321\");\n\n        Marketing marketing = new Marketing(\"Holiday Sale\", product);\n        marketing.addCustomer(customer1);\n        marketing.addCustomer(customer2);\n\n        marketing.displayCampaignDetails();\n\n        System.out.println(\"\\nValidating Campaign ID...\");\n        System.out.println(\"Valid ID? \" + marketing.validateID(marketing.marketingId));\n        System.out.println(\"Invalid ID? \" + marketing.validateID(\"INVALID-ID\"));\n\n        System.out.println(\"\\nRemoving Customer with ID: \" + customer1.getCustomerId());\n        marketing.removeCustomer(customer1.getCustomerId());\n\n        marketing.displayCampaignDetails();\n    }\n}\n"
    },
    {
        "instructions": "Develop a Java program that includes a Product class, a Customer class, and an Order class, related through aggregation or association. Ensure all methods and instance variables meet real-life business scenarios, including methods such as generateID, validateID, and other necessary calculations. The program should support adding products to orders, creating orders for customers, and validating IDs. Finally, display the order details and validate the generated IDs.",
        "input": "",
        "output": "// Product class representing a product\npublic class Product {\n    // Instance variables\n    private String productId;\n    private String name;\n    private double price;\n\n    // Constructor\n    public Product(String name, double price) {\n        this.name = name;\n        this.price = price;\n        this.productId = generateID();\n    }\n\n    // Method to generate ID\n    private String generateID() {\n        return \"PROD-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getter methods\n    public String getProductId() {\n        return productId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    // Method to validate ID\n    public boolean validateID(String id) {\n        return id.matches(\"PROD-[A-Z0-9]{8}\");\n    }\n}\n\n// Customer class representing a customer\npublic class Customer {\n    // Instance variables\n    private String customerId;\n    private String name;\n    private String email;\n\n    // Constructor\n    public Customer(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.customerId = generateID();\n    }\n\n    // Method to generate ID\n    private String generateID() {\n        return \"CUST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getter methods\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    // Method to validate ID\n    public boolean validateID(String id) {\n        return id.matches(\"CUST-[A-Z0-9]{8}\");\n    }\n}\n\n// Order class representing an order\npublic class Order {\n    // Instance variables\n    private String orderId;\n    private Customer customer;\n    private List<Product> products;\n    private double totalAmount;\n\n    // Constructor\n    public Order(Customer customer) {\n        this.customer = customer;\n        this.products = new ArrayList<>();\n        this.orderId = generateID();\n    }\n\n    // Method to generate ID\n    private String generateID() {\n        return \"ORD-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Method to validate ID\n    public boolean validateID(String id) {\n        return id.matches(\"ORD-[A-Z0-9]{8}\");\n    }\n\n    // Getter methods\n    public String getOrderId() {\n        return orderId;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public List<Product> getProducts() {\n        return products;\n    }\n\n    public double getTotalAmount() {\n        return totalAmount;\n    }\n\n    // Method to add a product to the order\n    public void addProduct(Product product) {\n        if (product != null && product.validateID(product.getProductId())) {\n            products.add(product);\n            calculateTotalAmount();\n        }\n    }\n\n    // Method to calculate total amount\n    private void calculateTotalAmount() {\n        totalAmount = 0;\n        for (Product product : products) {\n            totalAmount += product.getPrice();\n        }\n    }\n\n    // Method to display order details\n    public void displayOrderDetails() {\n        System.out.println(\"Order ID: \" + orderId);\n        System.out.println(\"Customer ID: \" + customer.getCustomerId() + \", Name: \" + customer.getName());\n        System.out.println(\"Products:\");\n        for (Product product : products) {\n            System.out.println(\"  ID: \" + product.getProductId() + \", Name: \" + product.getName() + \", Price: $\" + product.getPrice());\n        }\n        System.out.println(\"Total Amount: $\" + totalAmount);\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Create Customer\n        Customer customer = new Customer(\"John Doe\", \"john.doe@example.com\");\n\n        // Create Products\n        Product product1 = new Product(\"Laptop\", 999.99);\n        Product product2 = new Product(\"Smartphone\", 599.99);\n        Product product3 = new Product(\"Headphones\", 199.99);\n\n        // Create Order and add Products\n        Order order = new Order(customer);\n        order.addProduct(product1);\n        order.addProduct(product2);\n        order.addProduct(product3);\n\n        // Display Order Details\n        order.displayOrderDetails();\n\n        // Validate IDs\n        System.out.println(\"Valid Product ID? \" + product1.validateID(product1.getProductId()));\n        System.out.println(\"Valid Customer ID? \" + customer.validateID(customer.getCustomerId()));\n        System.out.println(\"Valid Order ID? \" + order.validateID(order.getOrderId()));\n    }\n}\n"
    },
    {
        "instructions": "Develop a Java program that includes an Employee class, a Department class, and a Company class, related through inheritance, aggregation, or association. Ensure all methods and instance variables meet real-life business scenarios, including methods such as generateID, validateID, and other necessary calculations. The program should support adding employees to departments, adding departments to companies, and validating IDs.",
        "input": "",
        "output": "import java.util.*;\n\nclass Employee {\n    private String employeeId;\n    private String name;\n    private double salary;\n\n    public Employee(String name, double salary) {\n        this.name = name;\n        this.salary = salary;\n        this.employeeId = generateID();\n    }\n\n    private String generateID() {\n        return \"EMP-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getEmployeeId() {\n        return employeeId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    public boolean validateID(String id) {\n        return id.matches(\"EMP-[A-Z0-9]{8}\");\n    }\n}\n\nclass Department {\n    private String departmentId;\n    private String name;\n    private Employee[] employees;\n    private int employeeCount;\n\n    public Department(String name) {\n        this.name = name;\n        this.employees = new Employee[10];\n        this.departmentId = generateID();\n        this.employeeCount = 0;\n    }\n\n    private String generateID() {\n        return \"DEPT-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getDepartmentId() {\n        return departmentId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Employee[] getEmployees() {\n        return Arrays.copyOf(employees, employeeCount);\n    }\n\n    public void addEmployee(Employee employee) {\n        if (employee != null && employee.validateID(employee.getEmployeeId()) && employeeCount < employees.length) {\n            employees[employeeCount++] = employee;\n        }\n    }\n\n    public boolean validateID(String id) {\n        return id.matches(\"DEPT-[A-Z0-9]{8}\");\n    }\n}\n\nclass Company {\n    private String companyId;\n    private String name;\n    private Department[] departments;\n    private int departmentCount;\n\n    public Company(String name) {\n        this.name = name;\n        this.departments = new Department[10];\n        this.companyId = generateID();\n        this.departmentCount = 0;\n    }\n\n    private String generateID() {\n        return \"COMP-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getCompanyId() {\n        return companyId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Department[] getDepartments() {\n        return Arrays.copyOf(departments, departmentCount);\n    }\n\n    public void addDepartment(Department department) {\n        if (department != null && department.validateID(department.getDepartmentId()) && departmentCount < departments.length) {\n            departments[departmentCount++] = department;\n        }\n    }\n\n    public boolean validateID(String id) {\n        return id.matches(\"COMP-[A-Z0-9]{8}\");\n    }\n\n    public void displayCompanyDetails() {\n        System.out.println(\"Company ID: \" + companyId + \", Name: \" + name);\n        for (Department dept : departments) {\n            if (dept != null) {\n                System.out.println(\"  Department ID: \" + dept.getDepartmentId() + \", Name: \" + dept.getName());\n                for (Employee emp : dept.getEmployees()) {\n                    if (emp != null) {\n                        System.out.println(\"    Employee ID: \" + emp.getEmployeeId() + \", Name: \" + emp.getName() + \", Salary: $\" + emp.getSalary());\n                    }\n                }\n            }\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create Company\n        Company company = new Company(\"Tech Innovations\");\n\n        // Create Departments\n        Department hrDept = new Department(\"Human Resources\");\n        Department itDept = new Department(\"Information Technology\");\n\n        // Create Employees\n        Employee emp1 = new Employee(\"Alice Johnson\", 60000);\n        Employee emp2 = new Employee(\"Bob Smith\", 75000);\n        Employee emp3 = new Employee(\"Carol Williams\", 70000);\n        Employee emp4 = new Employee(\"David Brown\", 65000);\n\n        // Add Employees to Departments\n        hrDept.addEmployee(emp1);\n        hrDept.addEmployee(emp2);\n        itDept.addEmployee(emp3);\n        itDept.addEmployee(emp4);\n\n        // Add Departments to Company\n        company.addDepartment(hrDept);\n        company.addDepartment(itDept);\n\n        // Display Company Details\n        company.displayCompanyDetails();\n\n        // Validate IDs\n        System.out.println(\"Valid Employee ID? \" + emp1.validateID(emp1.getEmployeeId()));\n        System.out.println(\"Valid Department ID? \" + hrDept.validateID(hrDept.getDepartmentId()));\n        System.out.println(\"Valid Company ID? \" + company.validateID(company.getCompanyId()));\n    }\n}\n"
    },
    {
        "instructions": "Develop a Java code to implement a Social Media Platform. The platform should allow users to create posts, follow other users, and interact with posts through likes and comments.",
        "input": "",
        "output": "// User class representing a user on the social media platform\npublic class User {\n    // Instance variables\n    private String userId;\n    private String username;\n    private String email;\n    private User follower;\n    private User following;\n\n    // Constructor\n    public User(String username, String email) {\n        this.username = username;\n        this.email = email;\n        this.userId = generateID();\n    }\n\n    // Method to generate unique user ID\n    private String generateID() {\n        return \"USER-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters and setters\n    public String getUserId() {\n        return userId;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public User getFollower() {\n        return follower;\n    }\n\n    public User getFollowing() {\n        return following;\n    }\n\n    public void setFollower(User follower) {\n        this.follower = follower;\n    }\n\n    public void setFollowing(User following) {\n        this.following = following;\n    }\n\n    public void createPost(String content) {\n        Post post = new Post(this, content);\n        System.out.println(username + \" has created a new post:\\n\" + content + \"\\n\");\n    }\n}\n\n// Post class representing a post made by a user\npublic class Post {\n    // Instance variables\n    private String postId;\n    private User user;\n    private String content;\n    private int likes;\n    private String comment;\n\n    // Constructor\n    public Post(User user, String content) {\n        this.user = user;\n        this.content = content;\n        // Generate unique post ID\n        this.postId = generateID();\n    }\n\n    // Method to generate unique post ID\n    private String generateID() {\n        return \"POST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getPostId() {\n        return postId;\n    }\n\n    public User getUser() {\n        return user;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public int getLikes() {\n        return likes;\n    }\n\n    public String getComment() {\n        return comment;\n    }\n\n    // Method to add a like\n    public void addLike() {\n        likes++;\n    }\n\n    // Method to add a comment\n    public void addComment(String comment) {\n        this.comment = comment;\n    }\n}\n\n// SocialNetwork class representing the entire social network\npublic class SocialNetwork {\n    // Instance variables\n    private User[] users;\n    private int size;\n\n    // Constructor\n    public SocialNetwork(int capacity) {\n        users = new User[capacity];\n        size = 0;\n    }\n\n    // Method to add a user to the network\n    public void addUser(User user) {\n        users[size++] = user;\n    }\n\n    // Getters\n    public User[] getUsers() {\n        return users;\n    }\n}\n\npublic class SocialMediaPlatformMain {\n    public static void main(String[] args) {\n        // Create social network\n        SocialNetwork socialNetwork = new SocialNetwork(2);\n\n        // Create users\n        User user1 = new User(\"Alice\", \"alice@example.com\");\n        User user2 = new User(\"Bob\", \"bob@example.com\");\n\n        // Add users to the social network\n        socialNetwork.addUser(user1);\n        socialNetwork.addUser(user2);\n\n        // User interactions\n        user1.setFollowing(user2);\n        user2.setFollower(user1);\n\n        // User posts\n        user1.createPost(\"Hello, this is my first post!\");\n        user2.createPost(\"Just chilling out!\");\n\n        // Simulate likes and comments\n        Post post1 = new Post(user1, \"Hello, this is my first post!\");\n        post1.addLike();\n        post1.addLike();\n        post1.addComment(\"Great post, Alice!\");\n\n        // Display user profiles, posts, and interactions\n        displayUserProfile(user1);\n        displayUserProfile(user2);\n    }\n\n    // Method to display user profile\n    public static void displayUserProfile(User user) {\n        System.out.println(\"User Profile: \" + user.getUsername());\n        System.out.println(\"User ID: \" + user.getUserId());\n        System.out.println(\"Email: \" + user.getEmail());\n        if (user.getFollower() != null) {\n            System.out.println(\"Follower: \" + user.getFollower().getUsername());\n        }\n        if (user.getFollowing() != null) {\n            System.out.println(\"Following: \" + user.getFollowing().getUsername());\n}  System.out.println(\"----------\"); \n}\n} \n"
    },
    {
        "instructions": "Write a Java code to implement an Inventory Management System with classes for Product, Supplier, and Order, allowing management of products, suppliers, and orders.",
        "input": "",
        "output": "// Product class representing a product in the inventory\npublic class Product {\n    // Instance variables\n    private String productId;\n    private String name;\n    private String description;\n    private double price;\n    private int quantityInStock;\n\n    // Constructor\n    public Product(String name, String description, double price, int quantityInStock) {\n        this.name = name;\n        this.description = description;\n        this.price = price;\n        this.quantityInStock = quantityInStock;\n        this.productId = generateID();\n    }\n\n    // Method to generate unique product ID\n    private String generateID() {\n        return \"PROD-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getProductId() {\n        return productId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public int getQuantityInStock() {\n        return quantityInStock;\n    }\n\n    // Method to update stock quantity\n    public void updateStock(int quantity) {\n        this.quantityInStock += quantity;\n    }\n}\n\n// Supplier class representing a supplier providing products\npublic class Supplier {\n    // Instance variables\n    private String supplierId;\n    private String name;\n    private String contactInfo;\n\n    // Constructor\n    public Supplier(String name, String contactInfo) {\n        this.name = name;\n        this.contactInfo = contactInfo;\n        this.supplierId = generateID();\n    }\n\n    // Method to generate unique supplier ID\n    private String generateID() {\n        return \"SUPP-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getSupplierId() {\n        return supplierId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getContactInfo() {\n        return contactInfo;\n    }\n}\n\n// Order class representing an order for a product from a supplier\npublic class Order {\n    // Instance variables\n    private String orderId;\n    private Product product;\n    private int quantityOrdered;\n    private Supplier supplier;\n\n    // Constructor\n    public Order(Product product, int quantityOrdered, Supplier supplier) {\n        this.product = product;\n        this.quantityOrdered = quantityOrdered;\n        this.supplier = supplier;\n        this.orderId = generateID();\n    }\n\n    // Method to generate unique order ID\n    private String generateID() {\n        return \"ORDER-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getOrderId() {\n        return orderId;\n    }\n\n    public Product getProduct() {\n        return product;\n    }\n\n    public int getQuantityOrdered() {\n        return quantityOrdered;\n    }\n\n    public Supplier getSupplier() {\n        return supplier;\n    }\n}\n\n// Main class for testing\npublic class InventoryManagementMain {\n    public static void main(String[] args) {\n        // Create instances of products\n        Product product1 = new Product(\"Laptop\", \"High-performance laptop\", 1200.00, 10);\n        Product product2 = new Product(\"Smartphone\", \"Latest smartphone model\", 800.00, 20);\n\n        // Create instances of suppliers\n        Supplier supplier1 = new Supplier(\"ABC Electronics\", \"contact@abcelectronics.com\");\n        Supplier supplier2 = new Supplier(\"XYZ Gadgets\", \"contact@xyzgadgets.com\");\n\n        // Create instances of orders\n        Order order1 = new Order(product1, 5, supplier1);\n        Order order2 = new Order(product2, 10, supplier2);\n\n        // Simulate order processing\n        processOrder(order1);\n        processOrder(order2);\n\n        // Display current inventory status\n        displayInventory(product1);\n        displayInventory(product2);\n    }\n\n    // Method to process an order\n    public static void processOrder(Order order) {\n        System.out.println(\"Processing order \" + order.getOrderId() + \" for \" + order.getQuantityOrdered() +\n                \" units of \" + order.getProduct().getName() + \" from supplier: \" + order.getSupplier().getName());\n        // Simulated order processing - Update stock quantity\n        order.getProduct().updateStock(order.getQuantityOrdered());\n        System.out.println(\"Order processed successfully.\\n\");\n    }\n\n    // Method to display inventory details\n    public static void displayInventory(Product product) {\n        System.out.println(\"Inventory Details for \" + product.getName() + \":\");\n        System.out.println(\"Product ID: \" + product.getProductId());\n        System.out.println(\"Name: \" + product.getName());\n        System.out.println(\"Description: \" + product.getDescription());\n        System.out.println(\"Price: $\" + product.getPrice());\n        System.out.println(\"Quantity in Stock: \" + product.getQuantityInStock());\n        System.out.println(\"-------------------------\");\n    }\n}\n"
    },
    {
        "instructions": "Write a Java program to implement an Investing in a Rental System. The system should allow investors to manage rental properties, tenants, and rental transactions.",
        "input": "",
        "output": "// Property class representing a rental property\npublic class Property {\n    // Instance variables\n    private String propertyId;\n    private String address;\n    private double rentalPrice;\n    private int numBedrooms;\n    private int numBathrooms;\n\n    // Constructor\n    public Property(String address, double rentalPrice, int numBedrooms, int numBathrooms) {\n        this.address = address;\n        this.rentalPrice = rentalPrice;\n        this.numBedrooms = numBedrooms;\n        this.numBathrooms = numBathrooms;\n        this.propertyId = generateID();\n    }\n\n    // Method to generate unique property ID\n    private String generateID() {\n        return \"PROP-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getPropertyId() {\n        return propertyId;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public double getRentalPrice() {\n        return rentalPrice;\n    }\n\n    public int getNumBedrooms() {\n        return numBedrooms;\n    }\n\n    public int getNumBathrooms() {\n        return numBathrooms;\n    }\n}\n\n// Tenant class representing a tenant renting a property\npublic class Tenant {\n    // Instance variables\n    private String tenantId;\n    private String name;\n    private String email;\n\n    // Constructor\n    public Tenant(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.tenantId = generateID();\n    }\n\n    // Method to generate unique tenant ID\n    private String generateID() {\n        return \"TENANT-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getTenantId() {\n        return tenantId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n}\n\n// InvestingSystem class representing the investing in a rental system\npublic class InvestingSystem {\n    // Instance variables\n    private Property[] properties;\n    private Tenant[] tenants;\n    private int propertyCount;\n    private int tenantCount;\n\n    // Constructor\n    public InvestingSystem(int maxProperties, int maxTenants) {\n        this.properties = new Property[maxProperties];\n        this.tenants = new Tenant[maxTenants];\n        this.propertyCount = 0;\n        this.tenantCount = 0;\n    }\n\n    // Method to add a property\n    public void addProperty(Property property) {\n        if (propertyCount < properties.length) {\n            properties[propertyCount++] = property;\n        } else {\n            System.out.println(\"Cannot add more properties. Property limit reached.\");\n        }\n    }\n\n    // Method to register a tenant\n    public void registerTenant(Tenant tenant) {\n        if (tenantCount < tenants.length) {\n            tenants[tenantCount++] = tenant;\n        } else {\n            System.out.println(\"Cannot register more tenants. Tenant limit reached.\");\n        }\n    }\n\n    // Method to rent a property to a tenant\n    public void rentProperty(Tenant tenant, Property property) {\n        System.out.println(tenant.getName() + \" has rented property: \" + property.getAddress() + \" for $\" + property.getRentalPrice() + \" per month.\");\n    }\n\n    // Method to display available properties\n    public void displayAvailableProperties() {\n        System.out.println(\"Available Properties:\");\n        for (Property property : properties) {\n            if (property != null) {\n                System.out.println(\"Property ID: \" + property.getPropertyId());\n                System.out.println(\"Address: \" + property.getAddress());\n                System.out.println(\"Price: $\" + property.getRentalPrice() + \" per month\");\n                System.out.println(\"Bedrooms: \" + property.getNumBedrooms());\n                System.out.println(\"Bathrooms: \" + property.getNumBathrooms());\n                System.out.println(\"-------------------------\");\n            }\n        }\n    }\n\n    // Method to display rented properties\n    public void displayRentedProperties() {\n        System.out.println(\"Rented Properties:\");\n        // Simulated data for rented properties\n        System.out.println(\"No rented properties in the system.\");\n    }\n}\n\npublic class InvestingRentalSystem {\n    public static void main(String[] args) {\n        InvestingSystem system = new InvestingSystem(10, 10);\n\n        // Add properties to the system\n        Property property1 = new Property(\"123 Main St\", 1500.00, 3, 2);\n        Property property2 = new Property(\"456 Oak St\", 2000.00, 4, 3);\n        Property property3 = new Property(\"789 Elm St\", 1800.00, 2, 1);\n        system.addProperty(property1);\n        system.addProperty(property2);\n        system.addProperty(property3);\n\n        // Register tenants\n        Tenant tenant1 = new Tenant(\"John Doe\", \"john@example.com\");\n        Tenant tenant2 = new Tenant(\"Alice Smith\", \"alice@example.com\");\n        system.registerTenant(tenant1);\n        system.registerTenant(tenant2);\n\n        // Display available properties\n        system.displayAvailableProperties();\n\n        // Rent a property\n        system.rentProperty(tenant1, property1);\n\n        // Display rented properties\n        system.displayRentedProperties();\n    }\n}"
    },
    {
        "instructions": "Write a Java code to implement a Movie Ticket Booking System. The system should facilitate the booking of movie tickets for customers, allowing them to select movies and showtimes.",
        "input": "",
        "output": "// Movie class representing a movie\npublic class Movie {\n    // Instance variables\n    private String movieId;\n    private String title;\n    private String genre;\n    private int duration;\n\n    // Constructor\n    public Movie(String title, String genre, int duration) {\n        this.title = title;\n        this.genre = genre;\n        this.duration = duration;\n        this.movieId = generateID();\n    }\n\n    // Method to generate unique movie ID\n    private String generateID() {\n        return \"MOVIE-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getMovieId() {\n        return movieId;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getGenre() {\n        return genre;\n    }\n\n    public int getDuration() {\n        return duration;\n    }\n}\n\n// Customer class representing a customer\npublic class Customer {\n    // Instance variables\n    private String customerId;\n    private String name;\n    private String email;\n\n    // Constructor\n    public Customer(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.customerId = generateID();\n    }\n\n    // Method to generate unique customer ID\n    private String generateID() {\n        return \"CUST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n}\n\n// Ticket class representing a movie ticket\npublic class Ticket {\n    // Instance variables\n    private String ticketId;\n    private Movie movie;\n    private Customer customer;\n    private Date showTime;\n\n    // Constructor\n    public Ticket(Movie movie, Customer customer, Date showTime) {\n        this.movie = movie;\n        this.customer = customer;\n        this.showTime = showTime;\n        this.ticketId = generateID();\n    }\n\n    // Method to generate unique ticket ID\n    private String generateID() {\n        return \"TICKET-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getTicketId() {\n        return ticketId;\n    }\n\n    public Movie getMovie() {\n        return movie;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public Date getShowTime() {\n        return showTime;\n    }\n}\n\n// Main class for Movie Ticket Booking System\npublic class MovieTicketBookingSystem {\n    public static void main(String[] args) {\n        // Create movies\n        Movie movie1 = new Movie(\"Inception\", \"Sci-Fi\", 148);\n        Movie movie2 = new Movie(\"The Shawshank Redemption\", \"Drama\", 142);\n\n        // Create customers\n        Customer customer1 = new Customer(\"John Doe\", \"john@example.com\");\n        Customer customer2 = new Customer(\"Alice Smith\", \"alice@example.com\");\n\n        // Create tickets\n        Date showTime1 = new Date();\n        Date showTime2 = new Date(showTime1.getTime() + 2 * 60 * 60 * 1000); // 2 hours later\n        Ticket ticket1 = new Ticket(movie1, customer1, showTime1);\n        Ticket ticket2 = new Ticket(movie2, customer2, showTime2);\n\n        // Display ticket details\n        displayTicketDetails(ticket1);\n        displayTicketDetails(ticket2);\n    }\n\n    // Method to display ticket details\n    public static void displayTicketDetails(Ticket ticket) {\n        System.out.println(\"Ticket ID: \" + ticket.getTicketId());\n        System.out.println(\"Movie: \" + ticket.getMovie().getTitle());\n        System.out.println(\"Genre: \" + ticket.getMovie().getGenre());\n        System.out.println(\"Duration: \" + ticket.getMovie().getDuration() + \" minutes\");\n        System.out.println(\"Customer: \" + ticket.getCustomer().getName());\n        System.out.println(\"Email: \" + ticket.getCustomer().getEmail());\n System.out.println(\"Show Time: \" + ticket.getShowTime());\nSystem.out.println();\n}\n}\n"
    },
    {
        "instructions": "Develop a java code for a Restaurant Management System to streamline operations at a restaurant. The system should facilitate the management of menu items, orders, and reservations efficiently.",
        "input": "",
        "output": "// MenuItem class representing a menu item\npublic class MenuItem {\n    // Instance variables\n    private String itemId;\n    private String name;\n    private String description;\n    private double price;\n    private String category;\n\n    // Constructor\n    public MenuItem(String name, String description, double price, String category) {\n        this.name = name;\n        this.description = description;\n        this.price = price;\n        this.category = category;\n        this.itemId = generateID();\n    }\n\n    // Method to generate unique item ID\n    private String generateID() {\n        return \"ITEM-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getItemId() {\n        return itemId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public String getCategory() {\n        return category;\n    }\n}\n\n// Customer class representing a customer\npublic class Customer {\n    // Instance variables\n    private String customerId;\n    private String name;\n    private String phoneNumber;\n    private String email;\n\n    // Constructor\n    public Customer(String name, String phoneNumber, String email) {\n        this.name = name;\n        this.phoneNumber = phoneNumber;\n        this.email = email;\n        this.customerId = generateID();\n    }\n\n    // Method to generate unique customer ID\n    private String generateID() {\n        return \"CUST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n}\n\n// RestaurantManagementSystem class representing the management system\npublic class RestaurantManagementSystem {\n    // Instance variables\n    private MenuItem[] menuItems;\n    private Customer[] customers;\n    private int menuItemCount;\n    private int customerCount;\n\n    // Constructor\n    public RestaurantManagementSystem(int maxMenuItems, int maxCustomers) {\n        this.menuItems = new MenuItem[maxMenuItems];\n        this.customers = new Customer[maxCustomers];\n        this.menuItemCount = 0;\n        this.customerCount = 0;\n    }\n\n    // Method to add a menu item\n    public void addMenuItem(MenuItem menuItem) {\n        if (menuItemCount < menuItems.length) {\n            menuItems[menuItemCount++] = menuItem;\n        } else {\n            System.out.println(\"Cannot add more menu items. Menu item limit reached.\");\n        }\n    }\n\n    // Method to add a customer\n    public void addCustomer(Customer customer) {\n        if (customerCount < customers.length) {\n            customers[customerCount++] = customer;\n        } else {\n            System.out.println(\"Cannot add more customers. Customer limit reached.\");\n        }\n    }\n\n    // Method to place an order\n    public void placeOrder(Customer customer, MenuItem[] orderedItems) {\n        System.out.println(\"Order placed by customer: \" + customer.getName());\n        System.out.println(\"Ordered Items:\");\n        for (MenuItem item : orderedItems) {\n            System.out.println(\"- \" + item.getName() + \" (\" + item.getCategory() + \"): $\" + item.getPrice());\n        }\n    }\n\n    // Method to make a reservation\n    public void makeReservation(Customer customer, String reservationDetails) {\n        System.out.println(\"Reservation made by customer: \" + customer.getName());\n        System.out.println(\"Reservation Details: \" + reservationDetails);\n    }\n}\n\n// Main class for demonstration\npublic class RestaurantManagementSystemDemo {\n    public static void main(String[] args) {\n        // Initialize Restaurant Management System\n        RestaurantManagementSystem restaurantSystem = new RestaurantManagementSystem(20, 50);\n\n        // Create Menu Items\n        MenuItem menuItem1 = new MenuItem(\"Spaghetti Carbonara\", \"Pasta with creamy sauce and bacon\", 12.99, \"Main Course\");\n        MenuItem menuItem2 = new MenuItem(\"Caesar Salad\", \"Romaine lettuce with Caesar dressing and croutons\", 8.99, \"Appetizer\");\n\n        // Create Customers\n        Customer customer1 = new Customer(\"John Smith\", \"123-456-7890\", \"john@example.com\");\n        Customer customer2 = new Customer(\"Alice Johnson\", \"456-789-0123\", \"alice@example.com\");\n\n        // Add Menu Items and Customers to the System\n        restaurantSystem.addMenuItem(menuItem1);\n        restaurantSystem.addMenuItem(menuItem2);\n        restaurantSystem.addCustomer(customer1);\n        restaurantSystem.addCustomer(customer2);\n\n        // Place Orders\n        MenuItem[] order1 = {menuItem1, menuItem2};\n        MenuItem[] order2 = {menuItem2};\n        restaurantSystem.placeOrder(customer1, order1);\n        restaurantSystem.placeOrder(customer2, order2);\n\n        // Make Reservations\n        restaurantSystem.makeReservation(customer1, \"Table for 4 at 7:00 PM\");\n        restaurantSystem.makeReservation(customer2, \"Table for 2 at 6:30 PM\");\n    }\n}\n"
    },
    {
        "instructions": "Develop a Java code for University Course Management System that facilitates the administration of courses, students, and enrollments at a university. The system should allow for registering students for courses, recording grades, and displaying enrollment details.",
        "input": "",
        "output": "// Course class representing a university course\npublic class Course {\n    // Instance variables\n    private String courseCode;\n    private String courseName;\n    private String instructor;\n    private String department;\n    private String schedule;\n\n    // Constructor\n    public Course(String courseName, String instructor, String department, String schedule) {\n        this.courseName = courseName;\n        this.instructor = instructor;\n        this.department = department;\n        this.schedule = schedule;\n        this.courseCode = generateCode();\n    }\n\n    // Method to generate unique course code\n    private String generateCode() {\n        return \"CSE-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getCourseCode() {\n        return courseCode;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n\n    public String getInstructor() {\n        return instructor;\n    }\n\n    public String getDepartment() {\n        return department;\n    }\n\n    public String getSchedule() {\n        return schedule;\n    }\n\n    // Method to validate course code\n    public boolean validateCode() {\n        return courseCode != null && courseCode.startsWith(\"CSE-\");\n    }\n}\n\n// Student class representing a university student\npublic class Student {\n    // Instance variables\n    private String studentId;\n    private String name;\n    private String email;\n    private String major;\n\n    // Constructor\n    public Student(String name, String email, String major) {\n        this.name = name;\n        this.email = email;\n        this.major = major;\n        this.studentId = generateID();\n    }\n\n    // Method to generate unique student ID\n    private String generateID() {\n        return \"STUD-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getStudentId() {\n        return studentId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getMajor() {\n        return major;\n    }\n\n    // Method to validate student ID\n    public boolean validateID() {\n        return studentId != null && studentId.startsWith(\"STUD-\");\n    }\n}\n\n// UniversityCourseManagement class representing the management system\npublic class UniversityCourseManagement {\n    // Instance variables\n    private Course[] courses;\n    private Student[] students;\n    private int courseCount;\n    private int studentCount;\n\n    // Constructor\n    public UniversityCourseManagement(int maxCourses, int maxStudents) {\n        this.courses = new Course[maxCourses];\n        this.students = new Student[maxStudents];\n        this.courseCount = 0;\n        this.studentCount = 0;\n    }\n\n    // Method to add a course\n    public void addCourse(Course course) {\n        if (courseCount < courses.length) {\n            courses[courseCount++] = course;\n        } else {\n            System.out.println(\"Cannot add more courses. Course limit reached.\");\n        }\n    }\n\n    // Method to add a student\n    public void addStudent(Student student) {\n        if (studentCount < students.length) {\n            students[studentCount++] = student;\n        } else {\n            System.out.println(\"Cannot add more students. Student limit reached.\");\n        }\n    }\n\n    // Method to register a student for a course\n    public void registerStudentForCourse(Student student, Course course) {\n        System.out.println(\"Student \" + student.getName() + \" registered for course: \" + course.getCourseName());\n    }\n\n    // Method to record grade for a student in a course\n    public void recordGrade(Student student, Course course, String grade) {\n        System.out.println(\"Grade recorded for student \" + student.getName() + \" in course \" + course.getCourseName() + \": \" + grade);\n    }\n\n    // Method to display enrollment details for a student\n    public void displayEnrollmentDetails(Student student) {\n        System.out.println(\"Enrollment Details for Student: \" + student.getName());\n        // Display enrollment details if implemented\n    }\n}\n\n// Main class for demonstration\npublic class UniversityCourseManagementSystem {\n    public static void main(String[] args) {\n        // Initialize University Course Management System\n        UniversityCourseManagement courseManagementSystem = new UniversityCourseManagement(10, 20);\n\n        // Create Courses\n        Course course1 = new Course(\"Introduction to Computer Science\", \"Dr. Smith\", \"Computer Science\", \"MWF 9:00 AM\");\n        Course course2 = new Course(\"Data Structures and Algorithms\", \"Prof. Johnson\", \"Computer Science\", \"TTh 1:00 PM\");\n\n        // Create Students\n        Student student1 = new Student(\"Alice Smith\", \"alice@example.com\", \"Computer Science\");\n        Student student2 = new Student(\"Bob Johnson\", \"bob@example.com\", \"Computer Engineering\");\n\n        // Add Courses and Students to the System\n        courseManagementSystem.addCourse(course1);\n        courseManagementSystem.addCourse(course2);\n        courseManagementSystem.addStudent(student1);\n        courseManagementSystem.addStudent(student2);\n\n        // Register Students for Courses\n        courseManagementSystem.registerStudentForCourse(student1, course1);\n        courseManagementSystem.registerStudentForCourse(student2, course2);\n\n        // Record Grades for Students\n        courseManagementSystem.recordGrade(student1, course1, \"A\");\n        courseManagementSystem.recordGrade(student2, course2, \"B+\");\n    }\n}\n"
    },
    {
        "instructions": "Develop a Java program for a Movie Rental System. The system is designed to manage movies, customers, and rental transactions within a rental service. The program should consist of three main classes: Movie, Customer, and RentalTransaction",
        "input": "",
        "output": "// Movie class representing a movie\npublic class Movie {\n    // Instance variables\n    private String movieId;\n    private String title;\n    private String director;\n    private String genre;\n    private int year;\n    private boolean available;\n\n    // Constructor\n    public Movie(String title, String director, String genre, int year) {\n        this.title = title;\n        this.director = director;\n        this.genre = genre;\n        this.year = year;\n        this.available = true;\n        this.movieId = generateID();\n    }\n\n    // Method to generate unique movie ID\n    private String generateID() {\n        return \"MOV-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters and setters\n    public String getMovieId() {\n        return movieId;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getDirector() {\n        return director;\n    }\n\n    public String getGenre() {\n        return genre;\n    }\n\n    public int getYear() {\n        return year;\n    }\n\n    public boolean isAvailable() {\n        return available;\n    }\n\n    public void setAvailable(boolean available) {\n        this.available = available;\n    }\n\n    // Method to validate movie ID\n    public boolean validateID() {\n        return movieId != null && movieId.startsWith(\"MOV-\");\n    }\n}\n\n// Customer class representing a customer\npublic class Customer {\n    // Instance variables\n    private String customerId;\n    private String name;\n    private String email;\n\n    // Constructor\n    public Customer(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.customerId = generateID();\n    }\n\n    // Method to generate unique customer ID\n    private String generateID() {\n        return \"CUST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    // Method to validate customer ID\n    public boolean validateID() {\n        return customerId != null && customerId.startsWith(\"CUST-\");\n    }\n}\n\n// RentalTransaction class representing a rental transaction\npublic class RentalTransaction {\n    // Instance variables\n    private String transactionId;\n    private Movie movie;\n    private Customer customer;\n    private Date rentalDate;\n    private Date returnDate;\n\n    // Constructor\n    public RentalTransaction(Movie movie, Customer customer) {\n        this.movie = movie;\n        this.customer = customer;\n        this.rentalDate = new Date();\n        this.transactionId = generateID();\n    }\n\n    // Method to generate unique transaction ID\n    private String generateID() {\n        return \"TRANS-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters and setters\n    public String getTransactionId() {\n        return transactionId;\n    }\n\n    public Movie getMovie() {\n        return movie;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public Date getRentalDate() {\n        return rentalDate;\n    }\n\n    public Date getReturnDate() {\n        return returnDate;\n    }\n\n    public void setReturnDate(Date returnDate) {\n        this.returnDate = returnDate;\n    }\n\n    // Method to validate transaction ID\n    public boolean validateID() {\n        return transactionId != null && transactionId.startsWith(\"TRANS-\");\n    }\n}\n\n// Main class for Movie Rental System\npublic class MovieRentalSystem {\n    public static void main(String[] args) {\n        // Create Movies\n        Movie movie1 = new Movie(\"Inception\", \"Christopher Nolan\", \"Action\", 2010);\n        Movie movie2 = new Movie(\"The Shawshank Redemption\", \"Frank Darabont\", \"Drama\", 1994);\n\n        // Create Customers\n        Customer customer1 = new Customer(\"Alice Smith\", \"alice@example.com\");\n        Customer customer2 = new Customer(\"Bob Johnson\", \"bob@example.com\");\n\n        // Rent Movies\n        RentalTransaction transaction1 = new RentalTransaction(movie1, customer1);\n        RentalTransaction transaction2 = new RentalTransaction(movie2, customer2);\n\n        // Display Rental Details\n        displayRentalDetails(transaction1);\n        displayRentalDetails(transaction2);\n    }\n\n    // Method to display rental details\n    public static void displayRentalDetails(RentalTransaction transaction) {\n        System.out.println(\"Transaction ID: \" + transaction.getTransactionId());\n        System.out.println(\"Customer: \" + transaction.getCustomer().getName() + \" (ID: \" + transaction.getCustomer().getCustomerId() + \")\");\n        System.out.println(\"Movie: \" + transaction.getMovie().getTitle() + \" (ID: \" + transaction.getMovie().getMovieId() + \")\");\n        System.out.println(\"Rental Date: \" + transaction.getRentalDate());\n        System.out.println(\"Return Date: \" + transaction.getReturnDate());\n        System.out.println();\n    }\n}\n"
    },
    {
        "instructions": "Develop a Java program for a School Management System. The system is designed to manage students, courses, and enrollments within a school. The program should consist of three main classes: Student, Course, and Enrollment.",
        "input": "",
        "output": "// Student class representing a student\npublic class Student {\n    // Instance variables\n    private String studentId;\n    private String name;\n    private String email;\n\n    // Constructor\n    public Student(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.studentId = generateID();\n    }\n\n    // Method to generate unique student ID\n    private String generateID() {\n        return \"STU-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getStudentId() {\n        return studentId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    // Method to validate student ID\n    public boolean validateID() {\n        return studentId != null && studentId.startsWith(\"STU-\");\n    }\n}\n\n// Course class representing a course\npublic class Course {\n    // Instance variables\n    private String courseId;\n    private String courseName;\n    private String instructor;\n\n    // Constructor\n    public Course(String courseName, String instructor) {\n        this.courseName = courseName;\n        this.instructor = instructor;\n        this.courseId = generateID();\n    }\n\n    // Method to generate unique course ID\n    private String generateID() {\n        return \"COURSE-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getCourseId() {\n        return courseId;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n\n    public String getInstructor() {\n        return instructor;\n    }\n\n    // Method to validate course ID\n    public boolean validateID() {\n        return courseId != null && courseId.startsWith(\"COURSE-\");\n    }\n}\n\n// Enrollment class representing an enrollment\npublic class Enrollment {\n    // Instance variables\n    private String enrollmentId;\n    private Student student;\n    private Course course;\n    private Date enrollmentDate;\n\n    // Constructor\n    public Enrollment(Student student, Course course) {\n        this.student = student;\n        this.course = course;\n        this.enrollmentDate = new Date();\n        this.enrollmentId = generateID();\n    }\n\n    // Method to generate unique enrollment ID\n    private String generateID() {\n        return \"ENR-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getEnrollmentId() {\n        return enrollmentId;\n    }\n\n    public Student getStudent() {\n        return student;\n    }\n\n    public Course getCourse() {\n        return course;\n    }\n\n    public Date getEnrollmentDate() {\n        return enrollmentDate;\n    }\n\n    // Method to validate enrollment ID\n    public boolean validateID() {\n        return enrollmentId != null && enrollmentId.startsWith(\"ENR-\");\n    }\n\n    // Method to calculate course duration\n    public int calculateCourseDuration(Date endDate) {\n        long duration = endDate.getTime() - enrollmentDate.getTime();\n        return (int) (duration / (1000 * 60 * 60 * 24));\n    }\n}\n\n// Main class for School Management System\npublic class SchoolManagementSystem {\n    public static void main(String[] args) {\n        // Create Students\n        Student student1 = new Student(\"Alice Smith\", \"alice@example.com\");\n        Student student2 = new Student(\"Bob Johnson\", \"bob@example.com\");\n\n        // Create Courses\n        Course course1 = new Course(\"Mathematics\", \"Dr. Allen\");\n        Course course2 = new Course(\"History\", \"Prof. Baker\");\n\n        // Enroll Students in Courses\n        Enrollment enrollment1 = new Enrollment(student1, course1);\n        Enrollment enrollment2 = new Enrollment(student2, course2);\n\n        // Display Enrollment Details\n        displayEnrollmentDetails(enrollment1);\n        displayEnrollmentDetails(enrollment2);\n    }\n\n    // Method to display enrollment details\n    public static void displayEnrollmentDetails(Enrollment enrollment) {\n        System.out.println(\"Enrollment ID: \" + enrollment.getEnrollmentId());\n        System.out.println(\"Student: \" + enrollment.getStudent().getName() + \" (ID: \" + enrollment.getStudent().getStudentId() + \")\");\n        System.out.println(\"Course: \" + enrollment.getCourse().getCourseName() + \" (ID: \" + enrollment.getCourse().getCourseId() + \")\");\n        System.out.println(\"Enrollment Date: \" + enrollment.getEnrollmentDate());\n        System.out.println();\n    }\n}\n"
    },
    {
        "instructions": "Write a code that represents a banking system designed to manage customer accounts and transactions. It comprises three main classes: Customer, Account, and Transaction, each serving a specific purpose within the system. Customers can hold accounts, and transactions can be performed on these accounts. The system maintains essential details such as customer information, account details, and transaction records.",
        "input": "",
        "output": "import java.util.*;\n\nclass Customer {\n    private String customerId;\n    private String name;\n    private String email;\n    private String phone;\n\n    public Customer(String name, String email, String phone) {\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n        this.customerId = generateID();\n    }\n\n    private String generateID() {\n        return \"CUST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public boolean validateID() {\n        return customerId != null && customerId.startsWith(\"CUST-\");\n    }\n}\n\nclass Account {\n    private String accountId;\n    private Customer customer;\n    private double balance;\n\n    public Account(Customer customer, double initialDeposit) {\n        this.customer = customer;\n        this.balance = initialDeposit;\n        this.accountId = generateID();\n    }\n\n    private String generateID() {\n        return \"ACC-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getAccountId() {\n        return accountId;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n        }\n    }\n\n    public void withdraw(double amount) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n        }\n    }\n\n    public boolean validateID() {\n        return accountId != null && accountId.startsWith(\"ACC-\");\n    }\n}\n\nclass Transaction {\n    private String transactionId;\n    private Account account;\n    private double amount;\n    private Date date;\n    private String type; // \"Deposit\" or \"Withdrawal\"\n\n    public Transaction(Account account, double amount, String type) {\n        this.account = account;\n        this.amount = amount;\n        this.type = type;\n        this.date = new Date();\n        this.transactionId = generateID();\n    }\n\n    private String generateID() {\n        return \"TRANS-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getTransactionId() {\n        return transactionId;\n    }\n\n    public Account getAccount() {\n        return account;\n    }\n\n    public double getAmount() {\n        return amount;\n    }\n\n    public Date getDate() {\n        return date;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public boolean validateID() {\n        return transactionId != null && transactionId.startsWith(\"TRANS-\");\n    }\n\n    public double calculateTransactionFee() {\n        return type.equals(\"Withdrawal\") ? amount * 0.02 : 0;\n    }\n}\n\npublic class BankingSystem {\n    public static void main(String[] args) {\n        // Create Customer\n        Customer customer = new Customer(\"John Doe\", \"john@example.com\", \"123-456-7890\");\n\n        // Create Account\n        Account account = new Account(customer, 5000.00);\n\n        // Perform Transactions\n        account.deposit(1500.00);\n        Transaction depositTransaction = new Transaction(account, 1500.00, \"Deposit\");\n\n        account.withdraw(2000.00);\n        Transaction withdrawalTransaction = new Transaction(account, 2000.00, \"Withdrawal\");\n\n        // Display Transaction Details\n        displayTransactionDetails(depositTransaction);\n        displayTransactionDetails(withdrawalTransaction);\n    }\n\n    public static void displayTransactionDetails(Transaction transaction) {\n        System.out.println(\"Transaction ID: \" + transaction.getTransactionId());\n        System.out.println(\"Account ID: \" + transaction.getAccount().getAccountId());\n        System.out.println(\"Customer: \" + transaction.getAccount().getCustomer().getName() + \" (ID: \" + transaction.getAccount().getCustomer().getCustomerId() + \")\");\n        System.out.println(\"Amount: \" + transaction.getAmount());\n        System.out.println(\"Date: \" + transaction.getDate());\n        System.out.println(\"Type: \" + transaction.getType());\n        System.out.println(\"Transaction Fee: $\" + transaction.calculateTransactionFee());\n    }\n}"
    },
    {
        "instructions": "Write a code that represents a hospital management system designed to streamline patient appointments with doctors. It comprises three main classes: Patient, Doctor, and Appointment, each serving a specific purpose within the system. Patients can schedule appointments with doctors, and the system maintains essential details such as patient information, doctor details, and appointment dates.",
        "input": "",
        "output": "import java.util.*;\n\nclass Patient {\n    private String patientId;\n    private String name;\n    private int age;\n    private String gender;\n    private String medicalCondition;\n\n    public Patient(String name, int age, String gender, String medicalCondition) {\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n        this.medicalCondition = medicalCondition;\n        this.patientId = generateID();\n    }\n\n    private String generateID() {\n        return \"PAT-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getPatientId() {\n        return patientId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String getGender() {\n        return gender;\n    }\n\n    public String getMedicalCondition() {\n        return medicalCondition;\n    }\n}\n\nclass Doctor {\n    private String doctorId;\n    private String name;\n    private String specialization;\n\n    public Doctor(String name, String specialization) {\n        this.name = name;\n        this.specialization = specialization;\n        this.doctorId = generateID();\n    }\n\n    private String generateID() {\n        return \"DOC-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getDoctorId() {\n        return doctorId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getSpecialization() {\n        return specialization;\n    }\n}\n\nclass Appointment {\n    private String appointmentId;\n    private Patient patient;\n    private Doctor doctor;\n    private Date date;\n\n    public Appointment(Patient patient, Doctor doctor, Date date) {\n        this.patient = patient;\n        this.doctor = doctor;\n        this.date = date;\n        this.appointmentId = generateID();\n    }\n\n    private String generateID() {\n        return \"APPT-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getAppointmentId() {\n        return appointmentId;\n    }\n\n    public Patient getPatient() {\n        return patient;\n    }\n\n    public Doctor getDoctor() {\n        return doctor;\n    }\n\n    public Date getDate() {\n        return date;\n    }\n}\n\npublic class HospitalManagementSystem {\n    public static void main(String[] args) {\n        // Create Patient\n        Patient patient = new Patient(\"John Doe\", 35, \"Male\", \"Fever\");\n\n        // Create Doctor\n        Doctor doctor = new Doctor(\"Dr. Smith\", \"Internal Medicine\");\n\n        // Schedule Appointment\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(Calendar.YEAR, 2024);\n        calendar.set(Calendar.MONTH, Calendar.MAY);\n        calendar.set(Calendar.DAY_OF_MONTH, 15);\n        Date date = calendar.getTime();\n        Appointment appointment = new Appointment(patient, doctor, date);\n\n        // Display Appointment Details\n        displayAppointmentDetails(appointment);\n    }\n\n    public static void displayAppointmentDetails(Appointment appointment) {\n        System.out.println(\"Appointment ID: \" + appointment.getAppointmentId());\n        System.out.println(\"Patient: \" + appointment.getPatient().getName() + \" (ID: \" + appointment.getPatient().getPatientId() + \")\");\n        System.out.println(\"Doctor: \" + appointment.getDoctor().getName() + \" (ID: \" + appointment.getDoctor().getDoctorId() + \")\");\n        System.out.println(\"Date: \" + appointment.getDate());\n    }\n}"
    },
    {
        "instructions": "write a code that simulates a hotel management system with classes for Room, Guest, and Reservation. It allows guests to book rooms and keeps track of reservation details such as check-in and check-out dates.",
        "input": "",
        "output": "import java.util.*;\n\nclass Room {\n    private String roomId;\n    private int capacity;\n    private boolean available;\n\n    public Room(int capacity) {\n        this.capacity = capacity;\n        this.roomId = generateID();\n        this.available = true;\n    }\n\n    private String generateID() {\n        return \"ROOM-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getRoomId() {\n        return roomId;\n    }\n\n    public int getCapacity() {\n        return capacity;\n    }\n\n    public boolean isAvailable() {\n        return available;\n    }\n\n    public void setAvailable(boolean available) {\n        this.available = available;\n    }\n}\n\nclass Guest {\n    private String guestId;\n    private String name;\n    private String email;\n    private String phone;\n\n    public Guest(String name, String email, String phone) {\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n        this.guestId = generateID();\n    }\n\n    private String generateID() {\n        return \"GUEST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getGuestId() {\n        return guestId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n}\n\nclass Reservation {\n    private String reservationId;\n    private Room room;\n    private Guest guest;\n    private Date checkInDate;\n    private Date checkOutDate;\n    private boolean checkedIn;\n    private boolean checkedOut;\n\n    public Reservation(Room room, Guest guest, Date checkInDate, Date checkOutDate) {\n        this.room = room;\n        this.guest = guest;\n        this.checkInDate = checkInDate;\n        this.checkOutDate = checkOutDate;\n        this.reservationId = generateID();\n        this.checkedIn = false;\n        this.checkedOut = false;\n    }\n\n    private String generateID() {\n        return \"RES-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getReservationId() {\n        return reservationId;\n    }\n\n    public Room getRoom() {\n        return room;\n    }\n\n    public Guest getGuest() {\n        return guest;\n    }\n\n    public Date getCheckInDate() {\n        return checkInDate;\n    }\n\n    public Date getCheckOutDate() {\n        return checkOutDate;\n    }\n\n    public boolean isCheckedIn() {\n        return checkedIn;\n    }\n\n    public boolean isCheckedOut() {\n        return checkedOut;\n    }\n\n    public void checkIn() {\n        this.checkedIn = true;\n    }\n\n    public void checkOut() {\n        this.checkedOut = true;\n    }\n\n    public void displayReservationDetails() {\n        System.out.println(\"Reservation ID: \" + reservationId);\n        System.out.println(\"Guest: \" + guest.getName());\n        System.out.println(\"Room: \" + room.getRoomId() + \", Capacity: \" + room.getCapacity());\n        System.out.println(\"Check-in Date: \" + checkInDate);\n        System.out.println(\"Check-out Date: \" + checkOutDate);\n        if (checkedIn) {\n            System.out.println(\"Checked-in: Yes\");\n        } else {\n            System.out.println(\"Checked-in: No\");\n        }\n        if (checkedOut) {\n            System.out.println(\"Checked-out: Yes\");\n        } else {\n            System.out.println(\"Checked-out: No\");\n        }\n    }\n}\n\npublic class HotelManagementSystem {\n    public static void main(String[] args) {\n        // Create Room\n        Room room1 = new Room(2);\n\n        // Create Guest\n        Guest guest1 = new Guest(\"Alice Johnson\", \"alice.johnson@example.com\", \"1234567890\");\n\n        // Create Reservation\n        Date checkInDate = new Date();\n        Calendar cal = Calendar.getInstance();\n        cal.add(Calendar.DAY_OF_MONTH, 3); // Check-out in 3 days\n        Date checkOutDate = cal.getTime();\n        Reservation reservation1 = new Reservation(room1, guest1, checkInDate, checkOutDate);\n\n        // Display Reservation Details\n        reservation1.displayReservationDetails();\n    }\n}"
    },
    {
        "instructions": "write a code that simulates a car rental system with classes for Car, Customer, and Rental. It allows customers to rent cars for a specified duration and calculates the total rental amount.",
        "input": "",
        "output": "import java.util.*;\n\nclass Car {\n    private String carId;\n    private String brand;\n    private String model;\n    private double rentalRatePerDay;\n    private boolean available;\n\n    public Car(String brand, String model, double rentalRatePerDay) {\n        this.brand = brand;\n        this.model = model;\n        this.rentalRatePerDay = rentalRatePerDay;\n        this.carId = generateID();\n        this.available = true;\n    }\n\n    private String generateID() {\n        return \"CAR-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getCarId() {\n        return carId;\n    }\n\n    public String getBrand() {\n        return brand;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public double getRentalRatePerDay() {\n        return rentalRatePerDay;\n    }\n\n    public boolean isAvailable() {\n        return available;\n    }\n\n    public void setAvailable(boolean available) {\n        this.available = available;\n    }\n}\n\nclass Customer {\n    private String customerId;\n    private String name;\n    private String email;\n    private String phone;\n\n    public Customer(String name, String email, String phone) {\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n        this.customerId = generateID();\n    }\n\n    private String generateID() {\n        return \"CUST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n}\n\nclass Rental {\n    private String rentalId;\n    private Car car;\n    private Customer customer;\n    private Date startDate;\n    private Date endDate;\n    private double totalAmount;\n\n    public Rental(Car car, Customer customer, Date startDate, Date endDate) {\n        this.car = car;\n        this.customer = customer;\n        this.startDate = startDate;\n        this.endDate = endDate;\n        this.rentalId = generateID();\n        calculateTotalAmount();\n    }\n\n    private String generateID() {\n        return \"RENT-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getRentalId() {\n        return rentalId;\n    }\n\n    public Car getCar() {\n        return car;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public Date getStartDate() {\n        return startDate;\n    }\n\n    public Date getEndDate() {\n        return endDate;\n    }\n\n    public double getTotalAmount() {\n        return totalAmount;\n    }\n\n    private void calculateTotalAmount() {\n        long diffInMillies = Math.abs(endDate.getTime() - startDate.getTime());\n        long diffInDays = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);\n        totalAmount = diffInDays * car.getRentalRatePerDay();\n    }\n\n    public void displayRentalDetails() {\n        System.out.println(\"Rental ID: \" + rentalId);\n        System.out.println(\"Car: \" + car.getBrand() + \" \" + car.getModel());\n        System.out.println(\"Customer: \" + customer.getName());\n        System.out.println(\"Start Date: \" + startDate);\n        System.out.println(\"End Date: \" + endDate);\n        System.out.println(\"Total Amount: $\" + totalAmount);\n    }\n}\n\npublic class CarRentalSystem {\n    public static void main(String[] args) {\n        // Create Car\n        Car car1 = new Car(\"Toyota\", \"Camry\", 50.0);\n\n        // Create Customer\n        Customer customer1 = new Customer(\"John Doe\", \"john.doe@example.com\", \"1234567890\");\n\n        // Create Rental\n        Date startDate = new Date();\n        Calendar cal = Calendar.getInstance();\n        cal.add(Calendar.DAY_OF_MONTH, 7); // Rental for 7 days\n        Date endDate = cal.getTime();\n        Rental rental1 = new Rental(car1, customer1, startDate, endDate);\n\n        // Display Rental Details\n        rental1.displayRentalDetails();\n    }\n}"
    },
    {
        "instructions": "Write a Java program that models a library management system. The program should include classes for Book, LibraryMember, and LibraryLoan. Each Book represents a book in the library with attributes such as title, author, and ISBN. The LibraryMember class represents a member of the library who can borrow books. The LibraryLoan class represents a loan transaction, indicating which book was borrowed by which member. Ensure that the program includes methods for generating and validating IDs for each class, checking out and returning books, calculating late fees, and displaying loan details.",
        "input": "",
        "output": "import java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nclass Book {\n    private String isbn;\n    private String title;\n    private String author;\n\n    public Book(String title, String author, String isbn) {\n        this.title = title;\n        this.author = author;\n        this.isbn = isbn;\n    }\n\n    public String getIsbn() {\n        return isbn;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n}\n\nclass LibraryMember {\n    private String memberId;\n    private String name;\n\n    public LibraryMember(String name) {\n        this.name = name;\n        this.memberId = generateID();\n    }\n\n    private String generateID() {\n        return \"MEM-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getMemberId() {\n        return memberId;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\nclass LibraryLoan {\n    private String loanId;\n    private Book book;\n    private LibraryMember member;\n    private Date dueDate;\n\n    public LibraryLoan(Book book, LibraryMember member, Date dueDate) {\n        this.book = book;\n        this.member = member;\n        this.dueDate = dueDate;\n        this.loanId = generateID();\n    }\n\n    private String generateID() {\n        return \"LOAN-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getLoanId() {\n        return loanId;\n    }\n\n    public Book getBook() {\n        return book;\n    }\n\n    public LibraryMember getMember() {\n        return member;\n    }\n\n    public Date getDueDate() {\n        return dueDate;\n    }\n\n    public void returnBook() {\n        // Set the return date\n        Date currentDate = new Date();\n        long diffInMillies = Math.abs(currentDate.getTime() - dueDate.getTime());\n        long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);\n        if (currentDate.after(dueDate)) {\n            double lateFee = calculateLateFee(diff);\n            System.out.println(\"Late fee charged: $\" + lateFee);\n        }\n        // Logic for returning a book (e.g., updating database)\n        System.out.println(\"Book returned successfully.\");\n    }\n\n    public double calculateLateFee(long daysLate) {\n        // Assuming late fee is $1 per day\n        return daysLate * 1.0;\n    }\n\n    public void displayLoanDetails() {\n        // Display loan details\n        System.out.println(\"Loan ID: \" + loanId);\n        System.out.println(\"Book Title: \" + book.getTitle());\n        System.out.println(\"Member Name: \" + member.getName());\n        System.out.println(\"Due Date: \" + dueDate.toString());\n    }\n}\n\npublic class LibraryManagementSystem {\n    public static void main(String[] args) {\n        // Create Book\n        Book book1 = new Book(\"Java Programming\", \"John Doe\", \"978-0134685991\");\n\n        // Create Library Member\n        LibraryMember member1 = new LibraryMember(\"Alice Smith\");\n\n        // Create Library Loan\n        Calendar cal = Calendar.getInstance();\n        cal.add(Calendar.DAY_OF_MONTH, -7); // Due date a week ago (for testing late fee)\n        Date dueDate = cal.getTime();\n        LibraryLoan loan1 = new LibraryLoan(book1, member1, dueDate);\n\n        // Display Loan Details\n        loan1.displayLoanDetails();\n\n        // Return Book\n        loan1.returnBook();\n    }\n}"
    },
    {
        "instructions": "Write a Java code that simulates a bookstore scenario where customers can place orders for books. It includes classes for Book, Customer, and Order, with methods for generating and validating IDs, adding books to orders, calculating total amounts, and displaying order details.",
        "input": "",
        "output": "class Book {\n    private String bookId;\n    private String title;\n    private String author;\n    private double price;\n\n    public Book(String title, String author, double price) {\n        this.title = title;\n        this.author = author;\n        this.price = price;\n        this.bookId = generateID();\n    }\n\n    private String generateID() {\n        return \"BOOK-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getBookId() {\n        return bookId;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public boolean validateID(String id) {\n        return id.matches(\"BOOK-[A-Z0-9]{8}\");\n    }\n}\n\nclass Customer {\n    private String customerId;\n    private String name;\n    private String email;\n\n    public Customer(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.customerId = generateID();\n    }\n\n    private String generateID() {\n        return \"CUST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public boolean validateID(String id) {\n        return id.matches(\"CUST-[A-Z0-9]{8}\");\n    }\n}\n\nclass Order {\n    private String orderId;\n    private Customer customer;\n    private Book[] books;\n    private int bookCount;\n    private double totalAmount;\n\n    public Order(Customer customer) {\n        this.customer = customer;\n        this.books = new Book[10];\n        this.orderId = generateID();\n        this.bookCount = 0;\n    }\n\n    private String generateID() {\n        return \"ORDER-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public boolean validateID(String id) {\n        return id.matches(\"ORDER-[A-Z0-9]{8}\");\n    }\n\n    public String getOrderId() {\n        return orderId;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public Book[] getBooks() {\n        return Arrays.copyOf(books, bookCount);\n    }\n\n    public double getTotalAmount() {\n        return totalAmount;\n    }\n\n    public void addBook(Book book) {\n        if (book != null && book.validateID(book.getBookId()) && bookCount < books.length) {\n            books[bookCount++] = book;\n            calculateTotalAmount();\n        }\n    }\n\n    private void calculateTotalAmount() {\n        totalAmount = 0;\n        for (Book book : books) {\n            if (book != null) {\n                totalAmount += book.getPrice();\n            }\n        }\n    }\n\n    public void displayOrderDetails() {\n        System.out.println(\"Order ID: \" + orderId);\n        System.out.println(\"Customer ID: \" + customer.getCustomerId() + \", Name: \" + customer.getName());\n        System.out.println(\"Books:\");\n        for (Book book : books) {\n            if (book != null) {\n                System.out.println(\"  ID: \" + book.getBookId() + \", Title: \" + book.getTitle() + \", Author: \" + book.getAuthor() + \", Price: $\" + book.getPrice());\n            }\n        }\n        System.out.println(\"Total Amount: $\" + totalAmount);\n    }\n}\n\npublic class Bookstore {\n    public static void main(String[] args) {\n        // Create Customer\n        Customer customer = new Customer(\"Alice Smith\", \"alice@example.com\");\n\n        // Create Books\n        Book book1 = new Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\", 9.99);\n        Book book2 = new Book(\"To Kill a Mockingbird\", \"Harper Lee\", 12.50);\n        Book book3 = new Book(\"1984\", \"George Orwell\", 8.75);\n\n        // Create Order and add Books\n        Order order = new Order(customer);\n        order.addBook(book1);\n        order.addBook(book2);\n        order.addBook(book3);\n\n        // Display Order Details\n        order.displayOrderDetails();\n\n        // Validate IDs\n        System.out.println(\"Valid Book ID? \" + book1.validateID(book1.getBookId()));\n        System.out.println(\"Valid Customer ID? \" + customer.validateID(customer.getCustomerId()));\n System.out.println(\"Valid Order ID? \" + order.validateID(order.getOrderId())); \n}\n}\n "
    }
]