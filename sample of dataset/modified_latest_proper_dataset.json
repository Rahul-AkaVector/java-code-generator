[
    {
        "instruction": "Write a Java program that models a business scenario using three classes: Customer and two related classes connected through either inheritance, aggregation, or association. The classes should include methods and instance variables relevant to the business scenario, such as generating and validating IDs, calculating specific business metrics, and other necessary functionalities.",
        "input": "",
        "output": "public class Customer {\n    private static final int MAX_LOYALTY_POINTS = 100;\n    private static int customerCounter = 1;\n    private String customerId;\n    private String name;\n    private String email;\n    private Purchase[] purchases;\n    private int purchaseCount;\n    private int loyaltyPoints;\n\n    public Customer(String name, String email) {\n        this.customerId = generateID(name);\n        this.name = name;\n        this.email = email;\n        this.purchases = new Purchase[10];\n        this.purchaseCount = 0;\n        this.loyaltyPoints = 0;\n    }\n\n    private String generateID(String name) {\n        return this.name.substring(0, 3).toUpperCase() + Customer.customerCounter++;\n    }\n\n    public void addPurchase(Purchase purchase) {\n        if (this.purchaseCount < this.purchases.length) {\n            this.purchases[this.purchaseCount++] = purchase;\n            updateLoyaltyPoints(purchase.getTotalAmount());\n        }\n    }\n\n    private void updateLoyaltyPoints(double amount) {\n        int pointsEarned = (int) (amount / 10);\n        this.loyaltyPoints += pointsEarned;\n        if (this.loyaltyPoints > Customer.MAX_LOYALTY_POINTS) {\n            this.loyaltyPoints = Customer.MAX_LOYALTY_POINTS;\n        }\n    }\n\n    public int getLoyaltyPoints() {\n        return this.loyaltyPoints;\n    }\n\n    public String getCustomerId() {\n        return this.customerId;\n    }\n\n    public boolean validateID() {\n        return this.email.endsWith(\"@gmail.com\") && this.name.length() > 0;\n    }\n}\n\nclass Purchase {\n    private static int purchaseCounter = 1;\n    private String purchaseId;\n    private Customer customer;\n    private Item[] items;\n    private double totalAmount;\n\n    public Purchase(Customer customer, Item[] items) {\n        this.purchaseId = customer.getCustomerId() + \"-\" + purchaseCounter++;\n        this.customer = customer;\n        this.items = items;\n        this.totalAmount = calculateTotalAmount();\n    }\n\n    private double calculateTotalAmount() {\n        double total = 0;\n        for (Item item : this.items) {\n            if (item != null) {\n                if (validateItem(item)) {\n                    total += item.getPrice() * item.getQuantity();\n                } else {\n                    System.out.println(\"Item validation failed: \" + item.getItemId());\n                }\n            }\n        }\n        return total;\n    }\n\n    private boolean validateItem(Item item) {\n        // Example validation logic, replace with actual validation rules\n        return item.getPrice() > 0 && item.getQuantity() > 0;\n    }\n\n    public double getTotalAmount() {\n        return this.totalAmount;\n    }\n}\n\nclass Item {\n    private static int itemCounter = 1;\n    private String itemId;\n    private String name;\n    private double price;\n    private int quantity;\n\n    public Item(String name, double price, int quantity) {\n        this.itemId = name.substring(0, 3).toUpperCase() + Item.itemCounter++;\n        this.name = name;\n        this.price = price;\n        this.quantity = quantity;\n    }\n\n    public double getPrice() {\n        return this.price;\n    }\n\n    public int getQuantity() {\n        return this.quantity;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Customer customer = new Customer(\"John\", \"john@gmail.com\");\n        Item item1 = new Item(\"Chair\", 50.0, 2);\n        Item item2 = new Item(\"Table\", 100.0, 1);\n\n        Item[] items = {item1, item2};\n\n        Purchase purchase = new Purchase(customer, items);\n        customer.addPurchase(purchase);\n\n        System.out.println(\"Total purchase amount: $\" + purchase.getTotalAmount());\n        System.out.println(\"Loyalty points earned: \" + customer.getLoyaltyPoints());\n        System.out.println(\"Customer ID is valid: \" + customer.validateID());\n    }\n}"
    },
    {
        "instruction": "Write a Java program for an advertising agency management system. The system should include classes for representing the advertising agency, campaigns managed by the agency, and clients who hire the agency. Implement methods for calculating the total budget of all campaigns managed by the agency, finding the campaign with the highest budget, and calculating the remaining budget for a specific campaign. Ensure that each class has appropriate instance variables, methods, and relationships with other classes. Your implementation should demonstrate complex methods such as calculating remaining budget, and adhere to realistic business scenarios.",
        "input": "",
        "output": "public class AdAgency {\n    private static int agencyCounter = 1;\n\n    private String agencyId;\n    private String name;\n    private Campaign[] campaigns;\n    private int campaignCount;\n\n    public AdAgency(String name) {\n        this.agencyId = generateId(name);\n        this.name = name;\n        this.campaigns = new Campaign[10];\n        this.campaignCount = 0;\n    }\n\n    private String generateId(String name) {\n        return this.name.substring(0, 3).toUpperCase() + AdAgency.agencyCounter++;\n    }\n\n    public void addCampaign(Campaign campaign) {\n        if (this.campaignCount < this.campaigns.length) {\n            this.campaigns[this.campaignCount++] = campaign;\n        }\n    }\n\n    public double calculateTotalBudget() {\n        double totalBudget = 0;\n        for (int i = 0; i < this.campaignCount; i++) {\n            totalBudget += this.campaigns[i].getBudget();\n        }\n        return totalBudget;\n    }\n\n    public Campaign findCampaignWithHighestBudget() {\n        if (this.campaignCount == 0) {\n            return null;\n        }\n        Campaign highestBudgetCampaign = this.campaigns[0];\n        for (int i = 1; i < this.campaignCount; i++) {\n            if (this.campaigns[i].getBudget() > highestBudgetCampaign.getBudget()) {\n                highestBudgetCampaign = this.campaigns[i];\n            }\n        }\n        return highestBudgetCampaign;\n    }\n\n    public Campaign[] getCampaigns() {\n        return this.campaigns;\n    }\n\n    // Method to validate type of advertising movie\n    private boolean validateTypeOfAdMovie(Campaign campaign) {\n        String[] validTypes = {\"TV Commercial\", \"Online Video\", \"Print Ad\"};\n        String campaignType = campaign.getName(); // Assuming campaign name indicates type\n\n        for (String validType : validTypes) {\n            if (campaignType.equalsIgnoreCase(validType)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // Method to validate number of days of shooting\n    private boolean validateNoOfDaysOfShooting(Campaign campaign) {\n        int daysOfShooting = campaign.getDaysOfShooting(); // Get the value from the campaign\n        return daysOfShooting >= 5; // Example: Campaign requires at least 5 days of shooting\n    }\n\n    // Method to calculate final amount\n    public double calculateFinalAmount(Campaign campaign) {\n        if (campaign != null) {\n            boolean validTypeOfAdMovie = validateTypeOfAdMovie(campaign);\n            boolean validNoOfDaysOfShooting = validateNoOfDaysOfShooting(campaign);\n            boolean validRemunerationPerDay = campaign.getClient().validateRemunerationPerDay(); // Validation integrated into Client class\n\n            if (validTypeOfAdMovie && validNoOfDaysOfShooting && validRemunerationPerDay) {\n                double baseQuotationAmount = calculateQuotationAmount(campaign.getBudget());\n                campaign.setBudget(baseQuotationAmount);\n            }\n            return campaign.getBudget();\n        } else {\n            return 0.0;\n        }\n    }\n\n    // Method to calculate quotation amount\n    private double calculateQuotationAmount(double totalBudget) {\n        double serviceChargePercentage = 5.0; // Example service charge percentage\n        double taxPercentage = 2.0; // Example tax percentage\n\n        double serviceCharge = (totalBudget * serviceChargePercentage) / 100;\n        double taxAmount = (totalBudget * taxPercentage) / 100;\n\n        return totalBudget + serviceCharge + taxAmount;\n    }\n}\n\nclass Campaign {\n    private String campaignId;\n    private Client client;\n    private String name;\n    private double budget;\n    private double spent;\n    private int daysOfShooting; // Added attribute for days of shooting\n\n    public Campaign(String campaignId, Client client, String name, double budget, int daysOfShooting) {\n        this.campaignId = campaignId;\n        this.client = client;\n        this.name = name;\n        this.budget = budget;\n        this.spent = 0;\n        this.daysOfShooting = daysOfShooting; // Initialize days of shooting\n    }\n\n    public Double getBudget() {\n        return this.budget;\n    }\n\n    public void setBudget(double budget) {\n        this.budget = budget;\n    }\n\n    public Double calculateRemainingBudget() {\n        return this.budget - this.spent;\n    }\n\n    public void spend(double amount) {\n        if (amount <= this.calculateRemainingBudget()) {\n            this.spent += amount;\n        }\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public Client getClient() {\n        return this.client;\n    }\n\n    public int getDaysOfShooting() {\n        return this.daysOfShooting;\n    }\n}\n\nclass Client {\n    private String clientId;\n    private String name;\n    private String contactInfo;\n    private int age;\n    private Campaign campaign; // One-to-one association with Campaign\n\n    public Client(String clientId, String name, String contactInfo, int age) {\n        this.clientId = clientId;\n        this.name = name;\n        this.contactInfo = contactInfo;\n        this.age = age;\n    }\n\n    public String getClientId() {\n        return this.clientId;\n    }\n\n    public boolean validateId() {\n        return this.contactInfo.endsWith(\"@gmail.com\") && this.age > 18;\n    }\n\n    // Example validation method for remuneration per day\n    public boolean validateRemunerationPerDay() {\n        // Example logic to validate remuneration per day\n        double remunerationPerDay = 300; // Assume we get this value from somewhere\n        return remunerationPerDay >= 100 && remunerationPerDay <= 1000;\n    }\n\n    public Campaign getCampaign() {\n        return this.campaign;\n    }\n\n    public void setCampaign(Campaign campaign) {\n        this.campaign = campaign;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        AdAgency adAgency = new AdAgency(\"XYZ Advertising\");\n\n        Client client1 = new Client(\"CLI001\", \"Client1\", \"client1@gmail.com\", 25);\n        Client client2 = new Client(\"CLI002\", \"Client2\", \"client2@gmail.com\", 30);\n\n        Campaign campaign1 = new Campaign(\"CPN001\", client1, \"TV Commercial\", 5000.0, 7);\n        Campaign campaign2 = new Campaign(\"CPN002\", client2, \"Online Video\", 8000.0, 10);\n\n        // Set client's campaign\n        client1.setCampaign(campaign1);\n        client2.setCampaign(campaign2);\n\n        adAgency.addCampaign(campaign1);\n        adAgency.addCampaign(campaign2);\n\n        System.out.println(\"Total budget of all campaigns: $\" + adAgency.calculateTotalBudget());\n\n        Campaign highestBudgetCampaign = adAgency.findCampaignWithHighestBudget();\n        if (highestBudgetCampaign != null) {\n            System.out.println(\"Campaign with highest budget: \" + highestBudgetCampaign.getName());\n            System.out.println(\"Remaining budget of the campaign: $\" + highestBudgetCampaign.calculateRemainingBudget());\n        } else {\n            System.out.println(\"No campaigns found.\");\n        }\n\n        System.out.println(\"Client1 ID valid: \" + client1.validateId());\n        System.out.println(\"Client2 ID valid: \" + client2.validateId());\n\n        // Example usage of calculateFinalAmount()\n        System.out.println(\"Final amount for Campaign 1: $\" + adAgency.calculateFinalAmount(campaign1));\n        System.out.println(\"Final amount for Campaign 2: $\" + adAgency.calculateFinalAmount(campaign2));\n    }\n}"
    },
    {
        "instruction": "Write a Java program that models a hospital management system with classes for Hospital, Doctor, and Patient. Include methods for adding doctors and patients, calculating average patients per doctor, finding the doctor with the most patients, calculating total budget, and total revenue. All instance variables are invoked using this. Static counters are accessed using the class name. Add a validation check method before calculating the total budget and another in the Hospital class. The validateHospital method should check if the hospital data is valid for budget calculation.",
        "input": "",
        "output": "public class Hospital {\n    private static int hospitalCounter = 1;\n    private static int doctorCounter = 1;\n    private static int patientCounter = 1;\n    private String hospitalId;\n    private String name;\n    private Doctor[] doctors;\n    private int doctorCount;\n    private Patient[] patients;\n    private int patientCount;\n\n    public Hospital(String name) {\n        this.hospitalId = this.generateId(name);\n        this.name = name;\n        this.doctors = new Doctor[10];\n        this.doctorCount = 0;\n        this.patients = new Patient[100];\n        this.patientCount = 0;\n    }\n\n    private String generateId(String name) {\n        return this.name.substring(0, 3).toUpperCase() + Hospital.hospitalCounter++;\n    }\n\n    public boolean validateId(String id) {\n        return id != null && id.matches(\"[A-Z]{3}\\d+\");\n    }\n\n    public void addDoctor(Doctor doctor) {\n        if (this.doctorCount < this.doctors.length) {\n            this.doctors[this.doctorCount++] = doctor;\n        }\n    }\n\n    public void addPatient(Patient patient) {\n        if (this.patientCount < this.patients.length) {\n            this.patients[this.patientCount++] = patient;\n        }\n    }\n\n    public double calculateAveragePatientsPerDoctor() {\n        if (this.doctorCount == 0) {\n            return 0;\n        }\n        int totalPatients = 0;\n        for (int i = 0; i < this.doctorCount; i++) {\n            totalPatients += this.doctors[i].getPatientCount();\n        }\n        return (double) totalPatients / this.doctorCount;\n    }\n\n    public Doctor findDoctorWithMostPatients() {\n        if (this.doctorCount == 0) {\n            return null;\n        }\n        Doctor mostPatientsDoctor = this.doctors[0];\n        for (int i = 1; i < this.doctorCount; i++) {\n            if (this.doctors[i].getPatientCount() > mostPatientsDoctor.getPatientCount()) {\n                mostPatientsDoctor = this.doctors[i];\n            }\n        }\n        return mostPatientsDoctor;\n    }\n\n    public double calculateTotalBudget() {\n        if (!validateHospital()) {\n            System.out.println(\"Hospital data is invalid. Cannot calculate budget.\");\n            return 0.0;\n        }\n\n        double totalBudget = 0.0;\n        double totalDoctorSalaries = this.calculateTotalDoctorSalaries();\n        totalBudget += totalDoctorSalaries;\n        double totalStaffSalaries = this.calculateTotalStaffSalaries();\n        totalBudget += totalStaffSalaries;\n        double medicalSuppliesCost = this.calculateMedicalSuppliesCost();\n        totalBudget += medicalSuppliesCost;\n        double administrativeCosts = this.calculateAdministrativeCosts();\n        totalBudget += administrativeCosts;\n        return totalBudget;\n    }\n\n    private boolean validateHospital() {\n        // Example validation: Check if at least one doctor is added\n        return this.doctorCount > 0;\n    }\n\n    public double calculateTotalRevenue() {\n        double totalRevenue = 0.0;\n        double totalPatientFees = this.calculateTotalPatientFees();\n        totalRevenue += totalPatientFees;\n        double insuranceReimbursements = this.calculateInsuranceReimbursements();\n        totalRevenue += insuranceReimbursements;\n        double otherRevenue = this.calculateOtherRevenue();\n        totalRevenue += otherRevenue;\n        return totalRevenue;\n    }\n\n    private double calculateTotalDoctorSalaries() {\n        double totalSalaries = 0.0;\n        for (int i = 0; i < this.doctorCount; i++) {\n            totalSalaries += this.doctors[i].getSalary();\n        }\n        return totalSalaries;\n    }\n\n    private double calculateTotalStaffSalaries() {\n        // Placeholder method for staff salary calculation\n        // Assuming a basic example calculation based on average salary\n        return 150000.0; // Example average staff salary\n    }\n\n    private double calculateMedicalSuppliesCost() {\n        // Placeholder method for medical supplies cost calculation\n        // Assuming a basic example calculation based on yearly usage\n        return 50000.0; // Example cost for medical supplies\n    }\n\n    private double calculateAdministrativeCosts() {\n        // Placeholder method for administrative costs calculation\n        // Assuming a basic example calculation based on operational expenses\n        return 100000.0; // Example administrative costs\n    }\n\n    private double calculateTotalPatientFees() {\n        // Placeholder method for total patient fees calculation\n        // Example calculation based on average patient fees\n        return 250000.0; // Example total patient fees\n    }\n\n    private double calculateInsuranceReimbursements() {\n        // Placeholder method for insurance reimbursements calculation\n        // Example calculation based on average reimbursements\n        return 100000.0; // Example insurance reimbursements\n    }\n\n    private double calculateOtherRevenue() {\n        // Placeholder method for other revenue calculation\n        // Example calculation based on other sources of revenue\n        return 50000.0; // Example other revenue\n    }\n\n    public class Doctor {\n        private String doctorId;\n        private String name;\n        private double salary;\n        private Patient[] patients;\n        private int patientCount;\n        private Hospital hospital;\n\n        public Doctor(String name, double salary, Hospital hospital) {\n            this.doctorId = hospital.generateId(name);\n            this.name = name;\n            this.salary = salary;\n            this.patients = new Patient[50];\n            this.patientCount = 0;\n            this.hospital = hospital;\n        }\n\n        public void addPatient(Patient patient) {\n            if (this.patientCount < this.patients.length) {\n                this.patients[this.patientCount++] = patient;\n                this.hospital.addPatient(patient);\n            }\n        }\n\n        public int getPatientCount() {\n            return this.patientCount;\n        }\n\n        public String getName() {\n            return this.name;\n        }\n\n        public double getSalary() {\n            return this.salary;\n        }\n    }\n\n    public class Patient {\n        private String patientId;\n        private String name;\n        private int age;\n        private String condition;\n        private Doctor doctor;\n\n        public Patient(String name, int age, String condition, Doctor doctor) {\n            this.patientId = doctor.hospital.generateId(name);\n            this.name = name;\n            this.age = age;\n            this.condition = condition;\n            this.doctor = doctor;\n            this.doctor.addPatient(this);\n        }\n\n        public String getName() {\n            return this.name;\n        }\n\n        public int getAge() {\n            return this.age;\n        }\n\n        public String getCondition() {\n            return this.condition;\n        }\n\n        public Doctor getDoctor() {\n            return this.doctor;\n        }\n    }\n\n    public static class Main {\n        public static void main(String[] args) {\n            Hospital hospital = new Hospital(\"XYZ Hospital\");\n\n            Hospital.Doctor doctor1 = hospital.new Doctor(\"Dr. Smith\", 200000.0, hospital);\n            Hospital.Doctor doctor2 = hospital.new Doctor(\"Dr. Johnson\", 180000.0, hospital);\n\n            hospital.addDoctor(doctor1);\n            hospital.addDoctor(doctor2);\n\n            Hospital.Patient patient1 = doctor1.new Patient(\"John Doe\", 35, \"Fever\", doctor1);\n            Hospital.Patient patient2 = doctor2.new Patient(\"Jane Smith\", 45, \"Injury\", doctor2);\n            Hospital.Patient patient3 = doctor2.new Patient(\"Mary Johnson\", 50, \"Heart Disease\", doctor2);\n\n            System.out.println(\"Average patients per doctor: \" + hospital.calculateAveragePatientsPerDoctor());\n\n            Hospital.Doctor mostPatientsDoctor = hospital.findDoctorWithMostPatients();\n            if (mostPatientsDoctor != null) {\n                System.out.println(\"Doctor with the most patients: \" + mostPatientsDoctor.getName());\n                System.out.println(\"Number of patients: \" + mostPatientsDoctor.getPatientCount());\n            } else {\n               System.out.println(\"No doctors found.\");\n            }\n\n            System.out.println(\"Total budget: $\" + hospital.calculateTotalBudget());\n       System.out.println(\"Total revenue: $\" + hospital.calculateTotalRevenue());\n        }\n    }\n}"
    },
    {
        "instruction": "Write a Java program that models a business scenario using three classes: Marketing, Campaign, and Product. These classes should be connected through inheritance and aggregation. The classes should include methods and instance variables relevant to the business scenario, such as generating and validating IDs, calculating campaign reach, managing products, and other necessary functionalities.",
        "input": "",
        "output": "// Product class representing a product\npublic class Product {\n    // Static variable\n    private static int productCounter = 1;\n    \n    // Instance variables\n    private String productId;\n    private String name;\n    private double price;\n\n    // Constructor\n    public Product(String name, double price) {\n        this.name = name;\n        this.price = price;\n        this.productId = this.generateId(name);\n    }\n\n    // Method to generate ID\n    private String generateId(String name) {\n        return this.name.substring(0, 3).toUpperCase() + Product.productCounter++;\n    }\n\n    // Method to validate ID\n    public boolean validateId(String id) {\n        return id != null && id.matches(\"[A-Z]{3}\\d+\");\n    }\n\n    // Getter methods\n    public String getProductId() {\n        return this.productId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public double getPrice() {\n        return this.price;\n    }\n}\n\nclass Campaign extends Product {\n    // Static variable\n    private static int campaignCounter = 1;\n    \n    // Instance variables\n    private String campaignId;\n    private String campaignName;\n    private Marketing marketing;\n\n    // Constructor\n    public Campaign(String campaignName, double price, Marketing marketing) {\n        super(\"Campaign: \" + campaignName, price);\n        this.campaignName = campaignName;\n        this.marketing = marketing;\n        this.campaignId = this.generateId(campaignName);\n    }\n\n    // Getter methods\n    public String getCampaignId() {\n        return this.campaignId;\n    }\n\n    public String getCampaignName() {\n        return this.campaignName;\n    }\n\n    public Marketing getMarketing() {\n        return this.marketing;\n    }\n}\n\nclass Marketing {\n    // Static variable\n    private static int marketingCounter = 1;\n    \n    // Instance variables\n    private String marketingId;\n    private String marketingName;\n    private Campaign campaign;\n\n    // Constructor\n    public Marketing(String marketingName, Campaign campaign) {\n        this.marketingName = marketingName;\n        this.campaign = campaign;\n        this.marketingId = this.generateId(marketingName);\n    }\n\n    // Method to generate ID\n    private String generateId(String name) {\n        return this.name.substring(0, 3).toUpperCase() + Marketing.marketingCounter++;\n    }\n\n    // Method to validate ID\n    public boolean validateId(String id) {\n        return id != null && id.matches(\"[A-Z]{3}\\d+\");\n    }\n\n    // Method to calculate campaign cost\n    public double calculateCampaignCost() {\n        if (this.validateId(this.marketingId) && this.campaign.validateId(this.campaign.getCampaignId())) {\n            double baseCost = this.campaign.getPrice();\n            double serviceCharge = baseCost * 0.1; // 10% service charge\n            double tax = baseCost * 0.15; // 15% tax\n            return baseCost + serviceCharge + tax;\n        } else {\n            throw new IllegalArgumentException(\"Invalid IDs for campaign cost calculation\");\n        }\n    }\n\n    // Getter methods\n    public String getMarketingId() {\n        return this.marketingId;\n    }\n\n    public String getMarketingName() {\n        return this.marketingName;\n    }\n\n    public Campaign getCampaign() {\n        return this.campaign;\n    }\n}\n\n// Main class\npublic class Main {\n    public static void main(String[] args) {\n        Product product = new Product(\"Smartphone\", 699.99);\n        Campaign campaign = new Campaign(\"Summer Sale Campaign\", 499.99, null);\n        Marketing marketing = new Marketing(\"Summer Sale\", campaign);\n        campaign.marketing = marketing; // Setting marketing reference in campaign\n\n        System.out.println(\"Product ID: \" + product.getProductId());\n        System.out.println(\"Marketing ID: \" + marketing.getMarketingId());\n        System.out.println(\"Campaign ID: \" + marketing.getCampaign().getCampaignId());\n\n        double campaignCost = marketing.calculateCampaignCost();\n        System.out.println(\"Campaign Cost: $\" + campaignCost);\n    }\n}"
    },
    {
        "instruction": "Develop a Java program that includes a Product class, a Customer class, and an Order class, related through inheritance and aggregation. Ensure all methods and instance variables meet real-life business scenarios, including methods such as generateID, validateID, and other necessary calculations. The program should support adding products to orders, creating orders for customers, and validating IDs. Finally, display the order details and validate the generated IDs.",
        "input": "",
        "output": "// Order class for generating and validating IDs\npublic class Order {\n    // Static counters\n    private static int productCounter = 1;\n    private static int customerCounter = 1;\n    private static int orderCounter = 1;\n    \n    // Instance variables\n    private String orderId;\n    private Customer customer;\n    private Product[] products;\n    private double totalAmount;\n    private int productCount;\n\n    // Constructor\n    public Order(Customer customer) {\n        this.customer = customer;\n        this.products = new Product[10]; // Assuming an order can have up to 10 products\n        this.orderId = Order.generateId(\"Order\");\n        this.productCount = 0;\n    }\n\n    // Method to generate ID\n    public static String generateId(String prefix) {\n        String id = prefix.substring(0, 3).toUpperCase();\n        switch (prefix) {\n            case \"Product\":\n                return id + Order.productCounter++;\n            case \"Customer\":\n                return id + Order.customerCounter++;\n            case \"Order\":\n                return \"ORD-\" + Order.orderCounter++;\n            default:\n                throw new IllegalArgumentException(\"Unknown prefix: \" + prefix);\n        }\n    }\n\n    // Method to validate ID\n    public static boolean validateId(String id, String type) {\n        switch (type) {\n            case \"Product\":\n                return id.matches(\"[A-Z]{3}\\d+\");\n            case \"Customer\":\n                return id.matches(\"[A-Z]{3}\\d+\");\n            case \"Order\":\n                return id.matches(\"ORD-\\d+\");\n            default:\n                throw new IllegalArgumentException(\"Unknown type: \" + type);\n        }\n    }\n\n    // Getter methods\n    public String getOrderId() {\n        return this.orderId;\n    }\n\n    public Customer getCustomer() {\n        return this.customer;\n    }\n\n    public Product[] getProducts() {\n        return this.products;\n    }\n\n    public double getTotalAmount() {\n        return this.totalAmount;\n    }\n\n    // Method to add a product to the order\n    public void addProduct(Product product) {\n        if (product != null && Order.validateId(product.getProductId(), \"Product\") && this.productCount < this.products.length) {\n            this.products[this.productCount++] = product;\n            this.calculateOrderTotal();\n        }\n    }\n\n    // Method to calculate total amount\n    private void calculateOrderTotal() {\n        this.totalAmount = 0;\n        for (Product product : this.products) {\n            if (product != null) {\n                this.totalAmount += product.getPrice();\n            }\n        }\n    }\n\n    // Method to calculate order total with validation\n    public double calculateTotalWithValidation() {\n        if (Order.validateId(this.orderId, \"Order\") && Order.validateId(this.customer.getCustomerId(), \"Customer\")) {\n            this.calculateOrderTotal();\n            double serviceCharge = this.totalAmount * 0.1; // 10% service charge\n            double tax = this.totalAmount * 0.15; // 15% tax\n            return this.totalAmount + serviceCharge + tax;\n        } else {\n            throw new IllegalArgumentException(\"Invalid IDs for order total calculation\");\n        }\n    }\n\n    // New method to calculate order total with quotation\n    public double calculateOrderTotalWithQuotation() {\n        // Validate IDs\n        if (!Order.validateId(this.orderId, \"Order\") || !Order.validateId(this.customer.getCustomerId(), \"Customer\")) {\n            throw new IllegalArgumentException(\"Invalid Order or Customer ID\");\n        }\n\n        // Perform initial calculations\n        this.calculateOrderTotal();\n        double baseAmount = this.totalAmount;\n\n        // Calculate service charge and tax\n        double serviceChargePercentage = 0.1; // 10% service charge\n        double taxPercentage = 0.15; // 15% tax\n        double serviceCharge = baseAmount * serviceChargePercentage;\n        double taxAmount = baseAmount * taxPercentage;\n\n        // Calculate total amount including service charge and tax\n        double totalAmountWithCharges = baseAmount + serviceCharge + taxAmount;\n\n        // Add quotation amount from another service or logic\n        double baseQuotationAmount = 500; // Example base quotation amount\n        double totalAmountWithQuotation = totalAmountWithCharges + baseQuotationAmount;\n\n        // Return the final total amount\n        return totalAmountWithQuotation;\n    }\n\n    // Method to display order details\n    public void displayOrderDetails() {\n        System.out.println(\"Order ID: \" + this.orderId);\n        System.out.println(\"Customer ID: \" + this.customer.getCustomerId() + \", Name: \" + this.customer.getName());\n        System.out.println(\"Products:\");\n        for (Product product : this.products) {\n            if (product != null) {\n                System.out.println(\"  ID: \" + product.getProductId() + \", Name: \" + product.getName() + \", Price: $\" + product.getPrice());\n            }\n        }\n        System.out.println(\"Total Amount: $\" + this.totalAmount);\n    }\n}\n\n// Product class representing a product\npublic class Product extends Order {\n    // Instance variables\n    private String productId;\n    private String name;\n    private double price;\n\n    // Constructor\n    public Product(String name, double price) {\n        super(null);\n        this.name = name;\n        this.price = price;\n        this.productId = Order.generateId(\"Product\");\n    }\n\n    // Getter methods\n    public String getProductId() {\n        return this.productId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public double getPrice() {\n        return this.price;\n    }\n}\n\n// Customer class representing a customer\npublic class Customer extends Order {\n    // Instance variables\n    private String customerId;\n    private String name;\n    private String email;\n\n    // Constructor\n    public Customer(String name, String email) {\n        super(null);\n        this.name = name;\n        this.email = email;\n        this.customerId = Order.generateId(\"Customer\");\n    }\n\n    // Getter methods\n    public String getCustomerId() {\n        return this.customerId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public String getEmail() {\n        return this.email;\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Create Customer\n        Customer customer = new Customer(\"John Doe\", \"john.doe@example.com\");\n\n        // Create Products\n        Product product1 = new Product(\"Laptop\", 999.99);\n        Product product2 = new Product(\"Smartphone\", 599.99);\n        Product product3 = new Product(\"Headphones\", 199.99);\n\n        // Create Order and add Products\n        Order order = new Order(customer);\n        order.addProduct(product1);\n        order.addProduct(product2);\n        order.addProduct(product3);\n\n        // Display Order Details\n        order.displayOrderDetails();\n\n        // Calculate total with validation\n        double totalWithValidation = order.calculateTotalWithValidation();\n        System.out.println(\"Total Amount with Service Charge and Tax: $\" + totalWithValidation);\n\n        // Calculate total with quotation\n        double totalWithQuotation = order.calculateOrderTotalWithQuotation();\n        System.out.println(\"Total Amount with Quotation: $\" + totalWithQuotation);\n\n        // Validate IDs\n        System.out.println(\"Valid Product ID? \" + Order.validateId(product1.getProductId(), \"Product\"));\n        System.out.println(\"Valid Customer ID? \" + Order.validateId(customer.getCustomerId(), \"Customer\"));\n        System.out.println(\"Valid Order ID? \" + Order.validateId(order.getOrderId(), \"Order\"));\n    }\n}\n"
    },
    {
        "instruction": "Develop a Java program that includes an Employee class, a Department class, and a Company class, related through inheritance, aggregation, or association. Ensure all methods and instance variables meet real-life business scenarios, including methods such as generateID, validateID, and other necessary calculations. The program should support adding employees to departments, adding departments to companies, and validating IDs.",
        "input": "",
        "output": "class Employee {\n    private String employeeId;\n    private String name;\n    private double salary;\n    private static int employeeCounter = 1;\n\n    public Employee(String name, double salary) {\n        this.name = name;\n        this.salary = salary;\n        this.employeeId = Company.generateId(\"EMP\");\n    }\n\n    public String getEmployeeId() {\n        return this.employeeId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public double getSalary() {\n        return this.salary;\n    }\n}\n\nclass Department {\n    private String departmentId;\n    private String name;\n    private Employee[] employees;\n    private int employeeCount;\n    private static int departmentCounter = 1;\n\n    public Department(String name) {\n        this.name = name;\n        this.employees = new Employee[10]; // Assuming a department can have up to 10 employees\n        this.departmentId = Company.generateId(\"DEP\");\n        this.employeeCount = 0;\n    }\n\n    public String getDepartmentId() {\n        return this.departmentId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public Employee[] getEmployees() {\n        return this.employees;\n    }\n\n    public void addEmployee(Employee employee) {\n        if (employee != null && Company.validateId(employee.getEmployeeId(), \"EMP\") && this.employeeCount < this.employees.length) {\n            this.employees[this.employeeCount++] = employee;\n        }\n    }\n\n    public double calculateTotalSalary() {\n        double totalSalary = 0;\n        for (Employee emp : this.employees) {\n            if (emp != null) {\n                totalSalary += emp.getSalary();\n            }\n        }\n        return totalSalary;\n    }\n}\n\nclass Company {\n    private String companyId;\n    private String name;\n    private Department[] departments;\n    private int departmentCount;\n    private static int companyCounter = 1;\n    private static int employeeCounter = 1;\n    private static int departmentCounter = 1;\n\n    public Company(String name) {\n        this.name = name;\n        this.departments = new Department[10]; // Assuming a company can have up to 10 departments\n        this.companyId = Company.generateId(\"COM\");\n        this.departmentCount = 0;\n    }\n\n    public String getCompanyId() {\n        return this.companyId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public Department[] getDepartments() {\n        return this.departments;\n    }\n\n    public void addDepartment(Department department) {\n        if (department != null && Company.validateId(department.getDepartmentId(), \"DEP\") && this.departmentCount < this.departments.length) {\n            this.departments[this.departmentCount++] = department;\n        }\n    }\n\n    public static String generateId(String prefix) {\n        switch (prefix) {\n            case \"EMP\":\n                return prefix + \"-\" + (Company.employeeCounter++);\n            case \"DEP\":\n                return prefix + \"-\" + (Company.departmentCounter++);\n            case \"COM\":\n                return prefix + \"-\" + (Company.companyCounter++);\n            default:\n                throw new IllegalArgumentException(\"Unknown prefix: \" + prefix);\n        }\n    }\n\n    public static boolean validateId(String id, String prefix) {\n        return id.matches(prefix + \"-\\d+\");\n    }\n\n    public double calculateCompanyTotalSalary() {\n        double totalSalary = 0;\n        for (Department dept : this.departments) {\n            if (dept != null && Company.validateId(dept.getDepartmentId(), \"DEP\")) {\n                totalSalary += dept.calculateTotalSalary();\n            }\n        }\n        return totalSalary;\n    }\n\n    public void displayCompanyDetails() {\n        System.out.println(\"Company ID: \" + this.companyId + \", Name: \" + this.name);\n        for (Department dept : this.departments) {\n            if (dept != null) {\n                System.out.println(\"  Department ID: \" + dept.getDepartmentId() + \", Name: \" + dept.getName());\n                for (Employee emp : dept.getEmployees()) {\n                    if (emp != null) {\n                        System.out.println(\"    Employee ID: \" + emp.getEmployeeId() + \", Name: \" + emp.getName() + \", Salary: $\" + emp.getSalary());\n                    }\n                }\n            }\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create Company\n        Company company = new Company(\"Tech Innovations\");\n\n        // Create Departments\n        Department hrDept = new Department(\"Human Resources\");\n        Department itDept = new Department(\"Information Technology\");\n\n        // Create Employees\n        Employee emp1 = new Employee(\"Alice Johnson\", 60000);\n        Employee emp2 = new Employee(\"Bob Smith\", 75000);\n        Employee emp3 = new Employee(\"Carol Williams\", 70000);\n        Employee emp4 = new Employee(\"David Brown\", 65000);\n\n        // Add Employees to Departments\n        hrDept.addEmployee(emp1);\n        hrDept.addEmployee(emp2);\n        itDept.addEmployee(emp3);\n        itDept.addEmployee(emp4);\n\n        // Add Departments to Company\n        company.addDepartment(hrDept);\n        company.addDepartment(itDept);\n\n        // Display Company Details\n        company.displayCompanyDetails();\n\n        // Calculate and Display Total Salary\n        System.out.println(\"Total Company Salary: $\" + company.calculateCompanyTotalSalary());\n\n        // Validate IDs\n        System.out.println(\"Valid Employee ID? \" + Company.validateId(emp1.getEmployeeId(), \"EMP\"));\n        System.out.println(\"Valid Department ID? \" + Company.validateId(hrDept.getDepartmentId(), \"DEP\"));\n        System.out.println(\"Valid Company ID? \" + Company.validateId(company.getCompanyId(), \"COM\"));\n    }\n}\n"
    },
    {
        "instruction": "Develop a Java code to implement a Social Media Platform. The platform should allow users to create posts, follow other users, and interact with posts through likes and comments.",
        "input": "",
        "output": "public class User {\n    private String userId;\n    private String username;\n    private String email;\n    private User follower;\n    private User following;\n    private static int userCounter = 1;\n\n    public User(String username, String email) {\n        this.username = username;\n        this.email = email;\n        this.userId = generateID(username);\n    }\n\n    private String generateID(String username) {\n        return username.substring(0, 3).toUpperCase() + User.userCounter++;\n    }\n\n    public String getUserId() {\n        return this.userId;\n    }\n\n    public String getUsername() {\n        return this.username;\n    }\n\n    public String getEmail() {\n        return this.email;\n    }\n\n    public User getFollower() {\n        return this.follower;\n    }\n\n    public User getFollowing() {\n        return this.following;\n    }\n\n    public void setFollower(User follower) {\n        this.follower = follower;\n    }\n\n    public void setFollowing(User following) {\n        this.following = following;\n    }\n\n    public void createPost(String content) {\n        Post post = new Post(this, content);\n        System.out.println(this.username + \" has created a new post:\\n\" + content + \"\\n\");\n    }\n\n    public void calculateTotalLikesAndComments() {\n        int totalLikes = 0;\n        int totalComments = 0;\n        for (Post post : SocialNetwork.posts) {\n            if (post != null && post.getPostOwner().equals(this)) {\n                totalLikes += post.getLikes();\n                if (post.getComment() != null) {\n                    totalComments++;\n                }\n            }\n        }\n        System.out.println(\"User \" + this.username + \" has \" + totalLikes + \" likes and \" + totalComments + \" comments across all posts.\");\n    }\n\n    public void calculateAverageLikesPerPost() {\n        int totalLikes = 0;\n        int postCount = 0;\n        for (Post post : SocialNetwork.posts) {\n            if (post != null && post.getPostOwner().equals(this)) {\n                totalLikes += post.getLikes();\n                postCount++;\n            }\n        }\n        if (postCount > 0) {\n            double averageLikes = (double) totalLikes / postCount;\n            System.out.println(\"User \" + this.username + \" has an average of \" + averageLikes + \" likes per post.\");\n        } else {\n            System.out.println(\"User \" + this.username + \" has no posts yet.\");\n        }\n    }\n\n    public boolean validateId(String id, String prefix) {\n        return id.matches(prefix + \"-\\d+\");\n    }\n}\n\nclass Post extends User {\n    private String postId;\n    private String content;\n    private int likes;\n    private String comment;\n    private static int postCounter = 1;\n\n    public Post(User user, String content) {\n        super(user.getUsername(), user.getEmail());\n        this.content = content;\n        this.postId = generateID(user);\n    }\n\n    private String generateID(User user) {\n        return user.getUsername().substring(0, 3).toUpperCase() + Post.postCounter++;\n    }\n\n    public String getPostId() {\n        return this.postId;\n    }\n\n    public String getContent() {\n        return this.content;\n    }\n\n    public int getLikes() {\n        return this.likes;\n    }\n\n    public String getComment() {\n        return this.comment;\n    }\n\n    public void addLike() {\n        this.likes++;\n    }\n\n    public void addComment(String comment) {\n        this.comment = comment;\n    }\n\n    public User getPostOwner() {\n        return (User) this;\n    }\n\n    public void calculatePostEngagement() {\n        if (this.likes > 10) {\n            System.out.println(\"Post ID: \" + this.postId + \" has gone viral!\");\n        } else {\n            System.out.println(\"Post ID: \" + this.postId + \" has average engagement.\");\n        }\n    }\n}\n\nclass SocialNetwork {\n    private User[] users;\n    private static Post[] posts;\n    private int size;\n\n    public SocialNetwork(int capacity) {\n        this.users = new User[capacity];\n        this.posts = new Post[capacity * 10];\n        this.size = 0;\n    }\n\n    public void addUser(User user) {\n        this.users[this.size++] = user;\n    }\n\n    public User[] getUsers() {\n        return this.users;\n    }\n\n    public static Post[] getPosts() {\n        return SocialNetwork.posts;\n    }\n\n    public void addPost(Post post) {\n        for (int i = 0; i < this.posts.length; i++) {\n            if (this.posts[i] == null) {\n                this.posts[i] = post;\n                break;\n            }\n        }\n    }\n\n    public void displayUserPosts(User user) {\n        System.out.println(\"Posts by \" + user.getUsername() + \":\");\n        for (Post post : SocialNetwork.posts) {\n            if (post != null && post.getPostOwner().equals(user)) {\n                System.out.println(\"Post ID: \" + post.getPostId());\n                System.out.println(\"Content: \" + post.getContent());\n                System.out.println(\"Likes: \" + post.getLikes());\n                if (post.getComment() != null) {\n                    System.out.println(\"Comment: \" + post.getComment());\n                }\n                System.out.println(\"----------\");\n            }\n        }\n    }\n\n    public void calculateTotalEngagement() {\n        int totalLikes = 0;\n        int totalComments = 0;\n        for (Post post : SocialNetwork.posts) {\n            if (post != null) {\n                totalLikes += post.getLikes();\n                if (post.getComment() != null) {\n                    totalComments++;\n                }\n            }\n        }\n        System.out.println(\"Total engagement across all posts: \" + totalLikes + \" likes and \" + totalComments + \" comments.\");\n    }\n\n    public double calculateNetworkPopularityIndex() {\n        double networkPopularityIndex = 0;\n        for (User user : this.users) {\n            if (user != null) {\n                for (Post post : SocialNetwork.posts) {\n                    if (post != null && post.getPostOwner().equals(user)) {\n                        networkPopularityIndex += post.getLikes() + (post.getComment() != null ? 1 : 0);\n                    }\n                }\n            }\n        }\n        return networkPopularityIndex / this.size;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        SocialNetwork socialNetwork = new SocialNetwork(2);\n        User user1 = new User(\"Alice\", \"alice@example.com\");\n        User user2 = new User(\"Bob\", \"bob@example.com\");\n        socialNetwork.addUser(user1);\n        socialNetwork.addUser(user2);\n        user1.setFollowing(user2);\n        user2.setFollower(user1);\n        user1.createPost(\"Hello, this is my first post!\");\n        user2.createPost(\"Just chilling out!\");\n        Post post1 = new Post(user1, \"Hello, this is my first post!\");\n        post1.addLike();\n        post1.addLike();\n        post1.addComment(\"Great post, Alice!\");\n        socialNetwork.addPost(post1);\n        socialNetwork.displayUserPosts(user1);\n        socialNetwork.displayUserPosts(user2);\n        user1.calculateTotalLikesAndComments();\n        socialNetwork.calculateTotalEngagement();\n        System.out.println(\"Network Popularity Index: \" + socialNetwork.calculateNetworkPopularityIndex());\n    }\n}"
    },
    {
        "instruction": "Write a Java code to implement an Inventory Management System with classes for Product, Supplier, and Order, allowing management of products, suppliers, and orders.",
        "input": "",
        "output": "public class Product {\n    private String productId;\n    private String name;\n    private String description;\n    private double price;\n    private int quantityInStock;\n    private static int productCounter = 1;\n\n    public Product(String name, String description, double price, int quantityInStock) {\n        this.name = name;\n        this.description = description;\n        this.price = price;\n        this.quantityInStock = quantityInStock;\n        this.productId = this.generateID();\n    }\n\n    private String generateID() {\n        return this.name.substring(0, 3).toUpperCase() + Product.productCounter++;\n    }\n\n    public String getProductId() {\n        return this.productId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public String getDescription() {\n        return this.description;\n    }\n\n    public double getPrice() {\n        return this.price;\n    }\n\n    public int getQuantityInStock() {\n        return this.quantityInStock;\n    }\n\n    public void updateStock(int quantity) {\n        this.quantityInStock += quantity;\n    }\n\n    public boolean validateId(String id, String prefix) {\n        return id.matches(prefix + \"-\\d+\");\n    }\n}\n\nclass Supplier {\n    private String supplierId;\n    private String name;\n    private String contactInfo;\n    private static int supplierCounter = 1;\n\n    public Supplier(String name, String contactInfo) {\n        this.name = name;\n        this.contactInfo = contactInfo;\n        this.supplierId = this.generateID();\n    }\n\n    private String generateID() {\n        return this.name.substring(0, 3).toUpperCase() + Supplier.supplierCounter++;\n    }\n\n    public String getSupplierId() {\n        return this.supplierId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public String getContactInfo() {\n        return this.contactInfo;\n    }\n}\n\nclass Order {\n    private String orderId;\n    private Product product;\n    private int quantityOrdered;\n    private Supplier supplier;\n    private static int orderCounter = 1;\n\n    public Order(Product product, int quantityOrdered, Supplier supplier) {\n        this.product = product;\n        this.quantityOrdered = quantityOrdered;\n        this.supplier = supplier;\n        this.orderId = this.generateID();\n    }\n\n    private String generateID() {\n        return this.supplier.getName().substring(0, 3).toUpperCase() + Order.orderCounter++;\n    }\n\n    public String getOrderId() {\n        return this.orderId;\n    }\n\n    public Product getProduct() {\n        return this.product;\n    }\n\n    public int getQuantityOrdered() {\n        return this.quantityOrdered;\n    }\n\n    public Supplier getSupplier() {\n        return this.supplier;\n    }\n\n    public void updateStock() {\n        int updatedStock = this.product.getQuantityInStock() - this.quantityOrdered;\n        this.product.updateStock(updatedStock);\n    }\n\n    public double calculateOrderAmount() {\n        if (this.validateQuantityOrdered() && this.product.validateId(this.product.getProductId(), \"PRD\")) {\n            double totalAmount = this.product.getPrice() * this.quantityOrdered;\n            double serviceCharge = totalAmount * 0.05;\n            double taxAmount = totalAmount * 0.1;\n            return totalAmount + serviceCharge + taxAmount;\n        } else {\n            System.out.println(\"Invalid order details.\");\n            return 0;\n        }\n    }\n\n    private boolean validateQuantityOrdered() {\n        return this.quantityOrdered > 0 && this.quantityOrdered <= this.product.getQuantityInStock();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Product product1 = new Product(\"Laptop\", \"High-performance laptop\", 1200.00, 10);\n        Product product2 = new Product(\"Smartphone\", \"Latest smartphone model\", 800.00, 20);\n        Supplier supplier1 = new Supplier(\"ABC Electronics\", \"contact@abcelectronics.com\");\n        Supplier supplier2 = new Supplier(\"XYZ Gadgets\", \"contact@xyzgadgets.com\");\n        Order order1 = new Order(product1, 5, supplier1);\n        Order order2 = new Order(product2, 10, supplier2);\n        processOrder(order1);\n        processOrder(order2);\n        displayInventory(product1);\n        displayInventory(product2);\n    }\n\n    public static void processOrder(Order order) {\n        double amount = order.calculateOrderAmount();\n        if (amount > 0) {\n            System.out.println(\"Processing order \" + order.getOrderId() + \" for \" + order.getQuantityOrdered() +\n                    \" units of \" + order.getProduct().getName() + \" from supplier: \" + order.getSupplier().getName() + \" with total amount: $\" + amount);\n            order.updateStock();\n            System.out.println(\"Order processed successfully.\\n\");\n        }\n    }\n\n    public static void displayInventory(Product product) {\n        System.out.println(\"Inventory Details for \" + product.getName() + \":\");\n        System.out.println(\"Product ID: \" + product.getProductId());\n        System.out.println(\"Name: \" + product.getName());\n        System.out.println(\"Description: \" + product.getDescription());\n        System.out.println(\"Price: $\" + product.getPrice());\n        System.out.println(\"Quantity in Stock: \" + product.getQuantityInStock());\n        System.out.println(\"-------------------------\");\n    }\n}\n"
    },
    {
        "instruction": "Write a Java program to implement an Investing in a Rental System. The system should allow investors to manage rental properties, tenants, and rental transactions.",
        "input": "",
        "output": "public class Property {\n    private String propertyId;\n    private String address;\n    private double rentalPrice;\n    private int numBedrooms;\n    private int numBathrooms;\n    private static int propertyCounter = 1;\n\n    public Property(String address, double rentalPrice, int numBedrooms, int numBathrooms) {\n        this.address = address;\n        this.rentalPrice = rentalPrice;\n        this.numBedrooms = numBedrooms;\n        this.numBathrooms = numBathrooms;\n        this.propertyId = this.generateID();\n    }\n\n    private String generateID() {\n        return this.address.substring(0, 3).toUpperCase() + Property.propertyCounter++;\n    }\n\n    public String getPropertyId() {\n        return this.propertyId;\n    }\n\n    public String getAddress() {\n        return this.address;\n    }\n\n    public double getRentalPrice() {\n        return this.rentalPrice;\n    }\n\n    public int getNumBedrooms() {\n        return this.numBedrooms;\n    }\n\n    public int getNumBathrooms() {\n        return this.numBathrooms;\n    }\n}\n\nclass Tenant {\n    private String tenantId;\n    private String name;\n    private String email;\n    private static int tenantCounter = 1;\n\n    public Tenant(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.tenantId = this.generateID();\n    }\n\n    private String generateID() {\n        return this.name.substring(0, 3).toUpperCase() + Tenant.tenantCounter++;\n    }\n\n    public String getTenantId() {\n        return this.tenantId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public String getEmail() {\n        return this.email;\n    }\n}\n\nclass RentalTransaction extends Property {\n    private String transactionId;\n    private Tenant tenant;\n    private Date transactionDate;\n    private static int transactionCounter = 1;\n\n    public RentalTransaction(String address, double rentalPrice, int numBedrooms, int numBathrooms, Tenant tenant) {\n        super(address, rentalPrice, numBedrooms, numBathrooms);\n        this.tenant = tenant;\n        this.transactionDate = new Date();\n        this.transactionId = this.generateID();\n    }\n\n    private String generateID() {\n        return this.getAddress().substring(0, 3).toUpperCase() + this.getTenant().getName().substring(0, 3).toUpperCase() + RentalTransaction.transactionCounter++;\n    }\n\n    public String getTransactionId() {\n        return this.transactionId;\n    }\n\n    public Tenant getTenant() {\n        return this.tenant;\n    }\n\n    public Date getTransactionDate() {\n        return this.transactionDate;\n    }\n\n    public int calculateDuration(Date endDate) {\n        long duration = endDate.getTime() - this.getTransactionDate().getTime();\n        return (int) (duration / (1000 * 60 * 60 * 24));\n    }\n\n    public double calculateTransactionAmount() {\n        double totalAmount = 0.0;\n\n        // Perform validation checks\n        if (this.validatePropertyAvailability() && this.validateTenantEligibility()) {\n            // Calculate base rent\n            double baseRent = this.getRentalPrice();\n\n            // Additional charges and taxes\n            double maintenanceCharge = baseRent * 0.1;\n            double taxAmount = baseRent * 0.05;\n\n            // Calculate total amount\n            totalAmount = baseRent + maintenanceCharge + taxAmount;\n        } else {\n            System.out.println(\"Validation failed. Unable to calculate transaction amount.\");\n        }\n\n        return totalAmount;\n    }\n\n    private boolean validatePropertyAvailability() {\n        // Dummy validation method, replace with actual logic\n        return true;\n    }\n\n    private boolean validateTenantEligibility() {\n        // Dummy validation method, replace with actual logic\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Property property1 = new Property(\"123 Main St\", 1500.00, 3, 2);\n        Property property2 = new Property(\"456 Oak St\", 2000.00, 4, 3);\n        Property property3 = new Property(\"789 Elm St\", 1800.00, 2, 1);\n        Tenant tenant1 = new Tenant(\"John Doe\", \"john@example.com\");\n        Tenant tenant2 = new Tenant(\"Alice Smith\", \"alice@example.com\");\n        RentalTransaction transaction1 = new RentalTransaction(\"123 Main St\", 1500.00, 3, 2, tenant1);\n        RentalTransaction transaction2 = new RentalTransaction(\"456 Oak St\", 2000.00, 4, 3, tenant2);\n        displayTransactionDetails(transaction1);\n        displayTransactionDetails(transaction2);\n    }\n\n    public static void displayTransactionDetails(RentalTransaction transaction) {\n        System.out.println(\"Transaction ID: \" + transaction.getTransactionId());\n        System.out.println(\"Tenant: \" + transaction.getTenant().getName() + \" (ID: \" + transaction.getTenant().getTenantId() + \")\");\n        System.out.println(\"Property Address: \" + transaction.getAddress() + \" (ID: \" + transaction.getPropertyId() + \")\");\n        System.out.println(\"Transaction Date: \" + transaction.getTransactionDate());\n        System.out.println(\"Transaction Amount: $\" + transaction.calculateTransactionAmount());\n        System.out.println();\n    }\n}\n"
    },
    {
        "instruction": "Write a Java program to implement a Movie Ticket Booking System. The system should facilitate the booking of movie tickets for customers, allowing them to select movies and showtimes.",
        "input": "",
        "output": "import java.util.*;\n\npublic class Movie {\n    private String movieId;\n    private String title;\n    private String genre;\n    private int duration;\n    private static int movieCounter = 1;\n\n    public Movie(String title, String genre, int duration) {\n        this.title = title;\n        this.genre = genre;\n        this.duration = duration;\n        this.movieId = generateID(title);\n    }\n\n    private String generateID(String title) {\n        return title.substring(0, 3).toUpperCase() + movieCounter++;\n    }\n\n    public String getMovieId() {\n        return movieId;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getGenre() {\n        return genre;\n    }\n\n    public int getDuration() {\n        return duration;\n    }\n}\n\nclass Customer {\n    private String customerId;\n    private String name;\n    private String email;\n    private boolean validMember; // Additional field for validation\n    private boolean hasValidPaymentInfo; // Additional field for validation\n    private int age; // Additional field for validation\n    private static int customerCounter = 1;\n\n    public Customer(String name, String email, int age, boolean hasValidPaymentInfo) {\n        this.name = name;\n        this.email = email;\n        this.age = age;\n        this.customerId = generateID(name);\n        // Simulating validation logic\n        this.validMember = validateMembership();\n        this.hasValidPaymentInfo = hasValidPaymentInfo;\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + customerCounter++;\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public boolean isValidMember() {\n        return validMember;\n    }\n\n    public boolean hasValidPaymentInfo() {\n        return hasValidPaymentInfo;\n    }\n\n    private boolean validateMembership() {\n        // Simulated complex validation logic based on age, payment info, and email domain\n        if (age >= 18 && hasValidPaymentInfo && email.endsWith(\"@gmail.com\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\nclass Ticket extends Movie {\n    private Customer customer;\n    private Date showTime;\n    private double ticketAmount; // New field to store calculated ticket amount\n    private static int ticketCounter = 1;\n\n    public Ticket(String title, String genre, int duration, Customer customer, Date showTime) {\n        super(title, genre, duration);\n        this.customer = customer;\n        this.showTime = showTime;\n        this.ticketAmount = calculateTicketAmount(); // Calculate ticket amount directly\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public Date getShowTime() {\n        return showTime;\n    }\n\n    public double getTicketAmount() {\n        return ticketAmount;\n    }\n\n    private double calculateTicketAmount() {\n        double basePrice = 12.0; // Base price per movie ticket\n\n        // Complex validation and calculation logic\n        if (customer.isValidMember() && customer.hasValidPaymentInfo()) {\n            // Member discount\n            basePrice -= 2.0;\n        } else {\n            // Non-member fee or additional fee for incomplete details\n            if (!customer.hasValidPaymentInfo()) {\n                basePrice += 5.0;\n            }\n        }\n\n        // Additional fee for late night shows (after 10 PM)\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(showTime);\n        int hour = calendar.get(Calendar.HOUR_OF_DAY);\n        if (hour >= 22) {\n            basePrice += 3.0;\n        }\n\n        // Simulated calculation based on movie duration and base price\n        double amount = basePrice + (0.5 * super.getDuration());\n\n        return amount;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create movies\n        Movie movie1 = new Movie(\"Inception\", \"Sci-Fi\", 148);\n        Movie movie2 = new Movie(\"The Shawshank Redemption\", \"Drama\", 142);\n\n        // Create customers\n        Customer customer1 = new Customer(\"John Doe\", \"john@example.com\", 25, true);\n        Customer customer2 = new Customer(\"Alice Smith\", \"alice@gmail.com\", 17, false);\n\n        // Create tickets\n        Date showTime1 = new Date();\n        Date showTime2 = new Date(showTime1.getTime() + 2 * 60 * 60 * 1000); // 2 hours later\n        Ticket ticket1 = new Ticket(\"Inception\", \"Sci-Fi\", 148, customer1, showTime1);\n        Ticket ticket2 = new Ticket(\"The Shawshank Redemption\", \"Drama\", 142, customer2, showTime2);\n\n        // Display ticket details\n        displayTicketDetails(ticket1);\n        displayTicketDetails(ticket2);\n    }\n\n    // Method to display ticket details\n    public static void displayTicketDetails(Ticket ticket) {\n        System.out.println(\"Ticket ID: \" + ticket.getMovieId());\n        System.out.println(\"Movie: \" + ticket.getTitle());\n        System.out.println(\"Genre: \" + ticket.getGenre());\n        System.out.println(\"Duration: \" + ticket.getDuration() + \" minutes\");\n        System.out.println(\"Customer: \" + ticket.getCustomer().getName());\n        System.out.println(\"Email: \" + ticket.getCustomer().getEmail());\n        System.out.println(\"Show Time: \" + ticket.getShowTime());\n        System.out.println(\"Ticket Amount: $\" + ticket.getTicketAmount());\n        System.out.println();\n    }\n}\n"
    },
    {
        "instruction": "Develop a java code for a Restaurant Management System to streamline operations at a restaurant. The system should facilitate the management of menu items, orders, and reservations efficiently.",
        "input": "",
        "output": "import java.util.Date;\n\nclass MenuItem {\n    private String itemId;\n    private String name;\n    private String description;\n    private double price;\n    private String category;\n    private static int itemCounter = 1;\n\n    public MenuItem(String name, String description, double price, String category) {\n        this.name = name;\n        this.description = description;\n        this.price = price;\n        this.category = category;\n        this.itemId = this.generateID(name);\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + MenuItem.itemCounter++;\n    }\n\n    public String getItemId() {\n        return this.itemId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public String getDescription() {\n        return this.description;\n    }\n\n    public double getPrice() {\n        return this.price;\n    }\n\n    public String getCategory() {\n        return this.category;\n    }\n}\n\nclass Customer {\n    private String customerId;\n    private String name;\n    private String phoneNumber;\n    private String email;\n    private boolean validMember;\n    private boolean hasValidPaymentInfo;\n    private int age;\n    private static int customerCounter = 1;\n\n    public Customer(String name, String phoneNumber, String email, int age, boolean hasValidPaymentInfo) {\n        this.name = name;\n        this.phoneNumber = phoneNumber;\n        this.email = email;\n        this.customerId = generateID(name);\n        this.validMember = validateMembership();\n        this.hasValidPaymentInfo = hasValidPaymentInfo;\n        this.age = age;\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + customerCounter++;\n    }\n\n    public String getCustomerId() {\n        return this.customerId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public String getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    public String getEmail() {\n        return this.email;\n    }\n\n    public boolean isValidMember() {\n        return this.validMember;\n    }\n\n    public boolean hasValidPaymentInfo() {\n        return this.hasValidPaymentInfo;\n    }\n\n    public int getAge() {\n        return this.age;\n    }\n\n    private boolean validateMembership() {\n        if (this.age >= 18 && this.hasValidPaymentInfo && this.email.endsWith(\"@example.com\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\nclass Order {\n    private String orderId;\n    private MenuItem[] items;\n    private Customer customer;\n    private Date orderDate;\n    private static int orderCounter = 1;\n\n    public Order(Customer customer, MenuItem[] items) {\n        this.customer = customer;\n        this.items = items;\n        this.orderDate = new Date();\n        this.orderId = generateID();\n    }\n\n    private String generateID() {\n        return this.customer.getCustomerId().substring(0, 3).toUpperCase() + orderCounter++;\n    }\n\n    public String getOrderId() {\n        return this.orderId;\n    }\n\n    public MenuItem[] getItems() {\n        return this.items;\n    }\n\n    public Customer getCustomer() {\n        return this.customer;\n    }\n\n    public Date getOrderDate() {\n        return this.orderDate;\n    }\n\n    public double calculateBillAmount() {\n        double totalBill = 0.0;\n\n        for (MenuItem item : items) {\n            totalBill += item.getPrice();\n        }\n\n        totalBill += totalBill * 0.05;\n\n        if (customer.isValidMember() && customer.hasValidPaymentInfo()) {\n            totalBill *= 0.9;\n        }\n\n        return totalBill;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MenuItem menuItem1 = new MenuItem(\"Spaghetti Carbonara\", \"Pasta with creamy sauce and bacon\", 12.99, \"Main Course\");\n        MenuItem menuItem2 = new MenuItem(\"Caesar Salad\", \"Romaine lettuce with Caesar dressing and croutons\", 8.99, \"Appetizer\");\n\n        Customer customer1 = new Customer(\"John Smith\", \"123-456-7890\", \"john@example.com\", 25, true);\n        Customer customer2 = new Customer(\"Alice Johnson\", \"456-789-0123\", \"alice@example.com\", 17, false);\n\n        Order[] orders = new Order[50];\n\n        orders[0] = new Order(customer1, new MenuItem[]{menuItem1, menuItem2});\n        orders[1] = new Order(customer2, new MenuItem[]{menuItem2});\n\n        for (Order order : orders) {\n            if (order != null) {\n                double billAmount = order.calculateBillAmount();\n                System.out.println(\"Order ID: \" + order.getOrderId() + \", Bill amount: $\" + billAmount);\n            }\n        }\n    }\n}\n"
    },
    {
        "instruction": "Develop a Java code for University Course Management System that facilitates the administration of courses, students, and enrollments at a university. The system should allow for registering students for courses, recording grades, and displaying enrollment details.",
        "input": "",
        "output": "import java.util.Date;\n\nclass Course {\n    private String courseCode;\n    private String courseName;\n    private String instructor;\n    private String department;\n    private String schedule;\n    private static int courseCounter = 1;\n\n    public Course(String courseName, String instructor, String department, String schedule) {\n        this.courseName = courseName;\n        this.instructor = instructor;\n        this.department = department;\n        this.schedule = schedule;\n        this.courseCode = Course.generateID(courseName);\n    }\n\n    public static String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + Course.courseCounter++;\n    }\n\n    public String getCourseCode() {\n        return this.courseCode;\n    }\n\n    public String getCourseName() {\n        return this.courseName;\n    }\n\n    public String getInstructor() {\n        return this.instructor;\n    }\n\n    public String getDepartment() {\n        return this.department;\n    }\n\n    public String getSchedule() {\n        return this.schedule;\n    }\n\n    public boolean validateCode() {\n        return this.courseCode != null && this.courseCode.startsWith(this.courseName.substring(0, 3).toUpperCase());\n    }\n}\n\nclass Student {\n    private String studentId;\n    private String name;\n    private String email;\n    private String major;\n    private static int studentCounter = 1;\n\n    public Student(String name, String email, String major) {\n        this.name = name;\n        this.email = email;\n        this.major = major;\n        this.studentId = Course.generateID(name);\n    }\n\n    public String getStudentId() {\n        return this.studentId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public String getEmail() {\n        return this.email;\n    }\n\n    public String getMajor() {\n        return this.major;\n    }\n\n    public boolean validateID() {\n        return this.studentId != null && this.studentId.startsWith(this.name.substring(0, 3).toUpperCase());\n    }\n}\n\nclass Enrollment {\n    private String enrollmentId;\n    private Date enrollmentDate;\n    private Student student;\n    private Course course;\n    private static int enrollmentCounter = 1;\n\n    public Enrollment(Student student, Course course) {\n        this.student = student;\n        this.course = course;\n        this.enrollmentDate = new Date();\n        this.enrollmentId = Course.generateID(student.getName() + course.getCourseName());\n    }\n\n    public String getEnrollmentId() {\n        return this.enrollmentId;\n    }\n\n    public Date getEnrollmentDate() {\n        return this.enrollmentDate;\n    }\n\n    public Student getStudent() {\n        return this.student;\n    }\n\n    public Course getCourse() {\n        return this.course;\n    }\n\n    public boolean validateID() {\n        return this.enrollmentId != null && this.enrollmentId.startsWith(this.student.getName().substring(0, 3).toUpperCase()) && this.enrollmentId.contains(this.course.getCourseName().substring(0, 3).toUpperCase());\n    }\n\n    public int calculateCourseDuration(Date endDate) {\n        long duration = endDate.getTime() - this.enrollmentDate.getTime();\n        return (int) (duration / (1000 * 60 * 60 * 24));\n    }\n\n    public double calculateTotalFee() {\n        // Improved validation checks\n        if (this.enrollmentId == null) {\n            throw new IllegalArgumentException(\"Enrollment ID is null.\");\n        }\n        if (!this.course.validateCode()) {\n            throw new IllegalArgumentException(\"Course code validation failed.\");\n        }\n        if (!this.student.validateID()) {\n            throw new IllegalArgumentException(\"Student ID validation failed.\");\n        }\n        if (this.course.getDepartment() == null || this.course.getDepartment().isEmpty()) {\n            throw new IllegalArgumentException(\"Course department is invalid.\");\n        }\n\n        // Basic fee structure\n        double baseFee = 10000.0; // Assume base fee for calculation\n        double departmentFee = this.course.getDepartment().equals(\"Engineering\") ? 5000.0 : 3000.0;\n        double totalFee = baseFee + departmentFee;\n\n        // Adding 5% tax\n        totalFee += totalFee * 0.05;\n\n        // Applying a scholarship if the student is in a specific major\n        if (this.student.getMajor().equals(\"Computer Science\")) {\n            totalFee -= 2000.0; // Subtracting scholarship amount\n        }\n\n        // Returning the calculated total fee\n        return totalFee;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Course course1 = new Course(\"Computer Science\", \"Dr. John Doe\", \"Engineering\", \"MWF 9-10am\");\n        Course course2 = new Course(\"Mathematics\", \"Dr. Jane Doe\", \"Science\", \"TTh 11-12pm\");\n\n        Student student1 = new Student(\"Alice Smith\", \"alice@example.com\", \"Computer Science\");\n        Student student2 = new Student(\"Bob Johnson\", \"bob@example.com\", \"Mathematics\");\n\n        Enrollment enrollment1 = new Enrollment(student1, course1);\n        Enrollment enrollment2 = new Enrollment(student2, course2);\n\n        displayEnrollmentDetails(enrollment1);\n        displayEnrollmentDetails(enrollment2);\n    }\n\n    public static void displayEnrollmentDetails(Enrollment enrollment) {\n        System.out.println(\"Enrollment ID: \" + enrollment.getEnrollmentId());\n        System.out.println(\"Student: \" + enrollment.getStudent().getName() + \" (ID: \" + enrollment.getStudent().getStudentId() + \")\");\n        System.out.println(\"Course: \" + enrollment.getCourse().getCourseName() + \" (ID: \" + enrollment.getCourse().getCourseCode() + \")\");\n        System.out.println(\"Enrollment Date: \" + enrollment.getEnrollmentDate());\n        System.out.println(\"Total Fee: $\" + enrollment.calculateTotalFee());\n        System.out.println();\n    }\n}\n"
    },
    {
        "instruction": "Develop a Java program for a Movie Rental System. The system is designed to manage movies, customers, and rental transactions within a rental service. The program should consist of three main classes: Movie, Customer, and RentalTransaction. Ensure there is only one implementation of the generateID() method across these three classes, and include a method that calculates a rental fee based on the movie and customer scenarios.",
        "input": "",
        "output": "import java.util.Date;\n\npublic class Movie {\n    private String movieId;\n    private String title;\n    private String director;\n    private String genre;\n    private int year;\n    private boolean available;\n    private static int idCounter = 1;\n\n    public Movie(String title, String director, String genre, int year) {\n        this.title = title;\n        this.director = director;\n        this.genre = genre;\n        this.year = year;\n        this.available = true;\n        this.movieId = Movie.generateID(title);\n    }\n\n    private static String generateID(String title) {\n        return title.substring(0, 3).toUpperCase() + Movie.idCounter++;\n    }\n\n    public String getMovieId() {\n        return this.movieId;\n    }\n\n    public String getTitle() {\n        return this.title;\n    }\n\n    public String getDirector() {\n        return this.director;\n    }\n\n    public String getGenre() {\n        return this.genre;\n    }\n\n    public int getYear() {\n        return this.year;\n    }\n\n    public boolean isAvailable() {\n        return this.available;\n    }\n\n    public void setAvailable(boolean available) {\n        this.available = available;\n    }\n\n    public boolean validateID() {\n        return this.movieId != null && this.movieId.startsWith(this.title.substring(0, 3).toUpperCase());\n    }\n\n    public double calculateRentalFee(Customer customer) {\n        // Validation checks\n        if (!this.available || !customer.validateID()) {\n            return 0.0;\n        }\n\n        // Basic fee structure\n        double baseFee = 5.0; // Assume base fee for calculation\n        double genreFee = this.genre.equals(\"Action\") ? 2.0 : 1.0;\n        double totalFee = baseFee + genreFee;\n\n        // Applying discounts based on customer details\n        if (customer.getName().startsWith(\"A\")) {\n            totalFee *= 0.9; // 10% discount for customers whose name starts with 'A'\n        }\n\n        return totalFee;\n    }\n}\n\nclass Customer {\n    private String customerId;\n    private String name;\n    private String email;\n    private static int idCounter = 1;\n\n    public Customer(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.customerId = Customer.generateID(name);\n    }\n\n    private static String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + Customer.idCounter++;\n    }\n\n    public String getCustomerId() {\n        return this.customerId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public String getEmail() {\n        return this.email;\n    }\n\n    public boolean validateID() {\n        return this.customerId != null && this.customerId.startsWith(this.name.substring(0, 3).toUpperCase());\n    }\n}\n\nclass RentalTransaction extends Movie {\n    private String transactionId;\n    private Customer customer;\n    private Date rentalDate;\n    private Date returnDate;\n\n    public RentalTransaction(String title, String director, String genre, int year, Customer customer) {\n        super(title, director, genre, year);\n        if (customer == null) {\n            throw new IllegalArgumentException(\"Customer cannot be null.\");\n        }\n        if (!this.isAvailable()) {\n            throw new IllegalArgumentException(\"Movie is not available for rent.\");\n        }\n        if (!customer.validateID()) {\n            throw new IllegalArgumentException(\"Customer ID validation failed.\");\n        }\n        if (!this.validateID()) {\n            throw new IllegalArgumentException(\"Movie ID validation failed.\");\n        }\n        this.customer = customer;\n        this.rentalDate = new Date();\n        this.transactionId = generateID(customer.getName());\n        this.setAvailable(false); // Set movie as not available after renting\n    }\n\n    public String getTransactionId() {\n        return this.transactionId;\n    }\n\n    public Customer getCustomer() {\n        return this.customer;\n    }\n\n    public Date getRentalDate() {\n        return this.rentalDate;\n    }\n\n    public Date getReturnDate() {\n        return this.returnDate;\n    }\n\n    public void setReturnDate(Date returnDate) {\n        if (returnDate.before(this.rentalDate)) {\n            throw new IllegalArgumentException(\"Return date cannot be before rental date.\");\n        }\n        this.returnDate = returnDate;\n        this.setAvailable(true); // Set movie as available after return\n    }\n\n    @Override\n    public boolean validateID() {\n        return this.transactionId != null && this.transactionId.startsWith(this.customer.getName().substring(0, 3).toUpperCase());\n    }\n\n    @Override\n    public double calculateRentalFee() {\n        // Calculate rental fee based on movie and customer details\n        return super.calculateRentalFee(this.customer);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Movie movie1 = new Movie(\"Inception\", \"Christopher Nolan\", \"Action\", 2010);\n        Movie movie2 = new Movie(\"The Shawshank Redemption\", \"Frank Darabont\", \"Drama\", 1994);\n\n        Customer customer1 = new Customer(\"Alice Smith\", \"alice@example.com\");\n        Customer customer2 = new Customer(\"Bob Johnson\", \"bob@example.com\");\n\n        RentalTransaction transaction1 = new RentalTransaction(\"Inception\", \"Christopher Nolan\", \"Action\", 2010, customer1);\n        RentalTransaction transaction2 = new RentalTransaction(\"The Shawshank Redemption\", \"Frank Darabont\", \"Drama\", 1994, customer2);\n\n        displayRentalDetails(transaction1);\n        displayRentalDetails(transaction2);\n    }\n\n    public static void displayRentalDetails(RentalTransaction transaction) {\n        System.out.println(\"Transaction ID: \" + transaction.getTransactionId());\n        System.out.println(\"Customer: \" + transaction.getCustomer().getName() + \" (ID: \" + transaction.getCustomer().getCustomerId() + \")\");\n        System.out.println(\"Movie: \" + transaction.getTitle() + \" (ID: \" + transaction.getMovieId() + \")\");\n        System.out.println(\"Rental Date: \" + transaction.getRentalDate());\n        System.out.println(\"Return Date: \" + transaction.getReturnDate());\n        System.out.println(\"Rental Fee: $\" + transaction.calculateRentalFee());\n        System.out.println();\n    }\n}\n"
    },
    {
        "instruction": "Develop a Java program for a School Management System. The system is designed to manage students, courses, and enrollments within a school. The program should consist of three main classes: Student, Course, and Enrollment.",
        "input": "",
        "output": "import java.util.Date;\n\npublic class Student {\n    private String studentId;\n    private String name;\n    private String email;\n\n    public Student(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n\n    public String getStudentId() {\n        return this.studentId;\n    }\n\n    public void setStudentId(String studentId) {\n        this.studentId = studentId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public String getEmail() {\n        return this.email;\n    }\n}\n\nclass Course {\n    private String courseId;\n    private String courseName;\n    private String instructor;\n    private static int courseCounter = 1;\n\n    public Course(String courseName, String instructor) {\n        this.courseName = courseName;\n        this.instructor = instructor;\n        this.courseId = Course.generateID(courseName);\n    }\n\n    public static String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + Course.courseCounter++;\n    }\n\n    public String getCourseId() {\n        return this.courseId;\n    }\n\n    public String getCourseName() {\n        return this.courseName;\n    }\n\n    public String getInstructor() {\n        return this.instructor;\n    }\n\n    public static boolean validateID(String id, String name) {\n        return id != null && id.startsWith(name.substring(0, 3).toUpperCase());\n    }\n}\n\nclass Enrollment extends Course {\n    private String enrollmentId;\n    private Student student;\n    private Date enrollmentDate;\n    private static int enrollmentCounter = 1;\n\n    public Enrollment(String courseName, String instructor, Student student) {\n        super(courseName, instructor);\n        this.student = student;\n        this.enrollmentDate = new Date();\n        this.enrollmentId = Course.generateID(courseName);\n        student.setStudentId(Course.generateID(student.getName()));\n    }\n\n    public String getEnrollmentId() {\n        return this.enrollmentId;\n    }\n\n    public Student getStudent() {\n        return this.student;\n    }\n\n    public Date getEnrollmentDate() {\n        return this.enrollmentDate;\n    }\n\n    public static boolean validateEnrollmentID(String id, String courseName, String studentName) {\n        return id != null && id.startsWith(courseName.substring(0, 3).toUpperCase()) && id.contains(studentName.substring(0, 3).toUpperCase());\n    }\n\n    public int calculateCourseDuration(Date endDate) {\n        long duration = endDate.getTime() - this.enrollmentDate.getTime();\n        return (int) (duration / (1000 * 60 * 60 * 24));\n    }\n\n    public String calculateGrade(double assignments, double exam) {\n        if (!Course.validateID(this.getCourseId(), this.getCourseName()) || !Course.validateID(this.student.getStudentId(), this.student.getName())) {\n            return \"Invalid IDs\";\n        }\n        double totalScore = (assignments * 0.4) + (exam * 0.6);\n        if (totalScore >= 90) {\n            return \"A\";\n        } else if (totalScore >= 80) {\n            return \"B\";\n        } else if (totalScore >= 70) {\n            return \"C\";\n        } else if (totalScore >= 60) {\n            return \"D\";\n        } else {\n            return \"F\";\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Student student1 = new Student(\"Alice Smith\", \"alice@example.com\");\n        Student student2 = new Student(\"Bob Johnson\", \"bob@example.com\");\n        Course course1 = new Course(\"Mathematics\", \"Dr. Allen\");\n        Course course2 = new Course(\"History\", \"Prof. Baker\");\n        Enrollment enrollment1 = new Enrollment(\"Mathematics\", \"Dr. Allen\", student1);\n        Enrollment enrollment2 = new Enrollment(\"History\", \"Prof. Baker\", student2);\n        displayEnrollmentDetails(enrollment1);\n        displayEnrollmentDetails(enrollment2);\n    }\n\n    public static void displayEnrollmentDetails(Enrollment enrollment) {\n        System.out.println(\"Enrollment ID: \" + enrollment.getEnrollmentId());\n        System.out.println(\"Student: \" + enrollment.getStudent().getName() + \" (ID: \" + enrollment.getStudent().getStudentId() + \")\");\n        System.out.println(\"Course: \" + enrollment.getCourseName() + \" (ID: \" + enrollment.getCourseId() + \")\");\n        System.out.println(\"Instructor: \" + enrollment.getInstructor());\n        System.out.println(\"Enrollment Date: \" + enrollment.getEnrollmentDate());\n        System.out.println();\n    }\n}\n"
    },
    {
        "instruction": "Develop a Java program for a School Management System. The system is designed to manage students, courses, and enrollments within a school. The program should consist of three main classes: Student, Course, and Enrollment.",
        "input": "",
        "output": "public class Student {\n    private String studentId;\n    private String name;\n    private String email;\n    private static int studentCounter = 1;\n\n    public Student(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.studentId = Student.generateID(name);\n    }\n\n    private static String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + Student.studentCounter++;\n    }\n\n    public String getStudentId() {\n        return this.studentId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public String getEmail() {\n        return this.email;\n    }\n\n    public boolean validateID() {\n        return this.studentId != null && this.studentId.startsWith(this.name.substring(0, 3).toUpperCase());\n    }\n\n    public double calculateTotalGrade(Enrollment[] enrollments) {\n        // Validate attendance and student ID\n        if (!validateAttendance() || !validateID()) {\n            return 0.0;\n        }\n\n        // Calculate total grade for all enrollments\n        double totalGrade = 0.0;\n        for (Enrollment enrollment : enrollments) {\n            double courseGrade = enrollment.calculateCourseGrade();\n            totalGrade += courseGrade;\n        }\n\n        return totalGrade;\n    }\n\n    private boolean validateAttendance() {\n        // Example validation for attendance\n        // Assume minimum attendance requirement is 80%\n        // Actual implementation depends on system requirements\n        return true; // Placeholder, replace with actual logic\n    }\n}\n\nclass Course {\n    private String courseId;\n    private String courseName;\n    private String instructor;\n    private int courseCredits;\n    private int courseMarks;\n    private static int courseCounter = 1;\n\n    public Course(String courseName, String instructor, int credits, int marks) {\n        this.courseName = courseName;\n        this.instructor = instructor;\n        this.courseCredits = credits;\n        this.courseMarks = marks;\n        this.courseId = Course.generateID(courseName);\n    }\n\n    private static String generateID(String courseName) {\n        return courseName.substring(0, 3).toUpperCase() + Course.courseCounter++;\n    }\n\n    public String getCourseId() {\n        return this.courseId;\n    }\n\n    public String getCourseName() {\n        return this.courseName;\n    }\n\n    public String getInstructor() {\n        return this.instructor;\n    }\n\n    public boolean validateID() {\n        return this.courseId != null && this.courseId.startsWith(this.courseName.substring(0, 3).toUpperCase());\n    }\n\n    public int getCourseCredits() {\n        return this.courseCredits;\n    }\n\n    public int getCourseMarks() {\n        return this.courseMarks;\n    }\n}\n\nclass Enrollment extends Course {\n    private String enrollmentId;\n    private Student student;\n    private Date enrollmentDate;\n    private static int enrollmentCounter = 1;\n\n    public Enrollment(String courseName, String instructor, int credits, int marks, Student student) {\n        super(courseName, instructor, credits, marks);\n        this.student = student;\n        this.enrollmentDate = new Date();\n        this.enrollmentId = Enrollment.generateID(courseName);\n    }\n\n    private static String generateID(String courseName) {\n        return courseName.substring(0, 3).toUpperCase() + Enrollment.enrollmentCounter++;\n    }\n\n    public String getEnrollmentId() {\n        return this.enrollmentId;\n    }\n\n    public Student getStudent() {\n        return this.student;\n    }\n\n    public Date getEnrollmentDate() {\n        return this.enrollmentDate;\n    }\n\n    public boolean validateID() {\n        return this.enrollmentId != null && this.enrollmentId.startsWith(super.getCourseName().substring(0, 3).toUpperCase()) && this.enrollmentId.contains(this.student.getName().substring(0, 3).toUpperCase());\n    }\n\n    public double calculateCourseGrade() {\n        // Example complex logic to calculate course grade\n        double grade = (double) super.getCourseMarks() / 100.0 * super.getCourseCredits();\n        return grade;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Student student1 = new Student(\"Alice Smith\", \"alice@example.com\");\n        Student student2 = new Student(\"Bob Johnson\", \"bob@example.com\");\n        Course course1 = new Course(\"Mathematics\", \"Dr. Allen\", 3, 85);\n        Course course2 = new Course(\"History\", \"Prof. Baker\", 4, 75);\n        Enrollment enrollment1 = new Enrollment(\"Mathematics\", \"Dr. Allen\", 3, 85, student1);\n        Enrollment enrollment2 = new Enrollment(\"History\", \"Prof. Baker\", 4, 75, student2);\n        displayEnrollmentDetails(enrollment1);\n        displayEnrollmentDetails(enrollment2);\n    }\n\n    public static void displayEnrollmentDetails(Enrollment enrollment) {\n        System.out.println(\"Enrollment ID: \" + enrollment.getEnrollmentId());\n        System.out.println(\"Student: \" + enrollment.getStudent().getName() + \" (ID: \" + enrollment.getStudent().getStudentId() + \")\");\n        System.out.println(\"Course: \" + enrollment.getCourseName() + \" (ID: \" + enrollment.getCourseId() + \")\");\n        System.out.println(\"Instructor: \" + enrollment.getInstructor());\n        System.out.println(\"Enrollment Date: \" + enrollment.getEnrollmentDate());\n        System.out.println(\"Calculated Total Grade: \" + enrollment.getStudent().calculateTotalGrade(new Enrollment[]{enrollment}));\n        System.out.println();\n    }\n}"
    },
    {
        "instruction": "Design a Java program for managing a hospital management system to streamline patient appointments with doctors. Implement three classes: Patient, Doctor, and Appointment, each serving a specific purpose within the system. Patients can schedule appointments with doctors, and the system maintains essential details such as patient information, doctor details, and appointment dates.",
        "input": "",
        "output": "class Patient {\n    private String patientId;\n    private String name;\n    private int age;\n    private String gender;\n    private String medicalCondition;\n    private static int patientCounter = 1;\n\n    public Patient(String name, int age, String gender, String medicalCondition) {\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n        this.medicalCondition = medicalCondition;\n        this.patientId = Patient.generateID(name);\n    }\n\n    private static String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + Patient.patientCounter++;\n    }\n\n    public String getPatientId() {\n        return this.patientId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public int getAge() {\n        return this.age;\n    }\n\n    public String getGender() {\n        return this.gender;\n    }\n\n    public String getMedicalCondition() {\n        return this.medicalCondition;\n    }\n\n    public boolean validateID() {\n        return this.patientId != null && this.patientId.startsWith(\"PAT-\");\n    }\n\n    public double calculateMedicalCost() {\n        // Simulating calculation based on medical condition and age\n        double baseCost = 50.0; // Base cost per medical appointment\n        double conditionFactor = 0.0; // Factor based on medical condition\n        switch (this.medicalCondition.toLowerCase()) {\n            case \"fever\":\n                conditionFactor = 1.2;\n                break;\n            case \"heart condition\":\n                conditionFactor = 1.5;\n                break;\n            default:\n                conditionFactor = 1.0;\n                break;\n        }\n        double ageFactor = Math.min(1.5, this.age / 50.0); // Factor based on age (max 1.5)\n        return baseCost * conditionFactor * ageFactor;\n    }\n}\n\nclass Doctor extends Patient {\n    private String doctorId;\n    private String specialization;\n    private static int doctorCounter = 1;\n\n    public Doctor(String name, String specialization) {\n        super(name, 0, \"\", \"\");\n        this.specialization = specialization;\n        this.doctorId = Doctor.generateID(name);\n    }\n\n    private static String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + Doctor.doctorCounter++;\n    }\n\n    public String getDoctorId() {\n        return this.doctorId;\n    }\n\n    public String getSpecialization() {\n        return this.specialization;\n    }\n\n    public boolean validateID() {\n        return this.doctorId != null && this.doctorId.startsWith(\"DOC-\");\n    }\n\n    public void prescribeMedication(Patient patient, String medication) {\n        // Example method to prescribe medication\n        // Placeholder for actual implementation\n        System.out.println(\"Dr. \" + this.getName() + \" prescribes \" + medication + \" to patient \" + patient.getName());\n    }\n}\n\nclass Appointment {\n    private String appointmentId;\n    private Patient patient;\n    private Doctor doctor;\n    private Date date;\n    private static int appointmentCounter = 1;\n\n    public Appointment(Patient patient, Doctor doctor, Date date) {\n        this.patient = patient;\n        this.doctor = doctor;\n        this.date = date;\n        this.appointmentId = generateID();\n    }\n\n    private static String generateID() {\n        return \"APPT-\" + Appointment.appointmentCounter++;\n    }\n\n    public String getAppointmentId() {\n        return this.appointmentId;\n    }\n\n    public Patient getPatient() {\n        return this.patient;\n    }\n\n    public Doctor getDoctor() {\n        return this.doctor;\n    }\n\n    public Date getDate() {\n        return this.date;\n    }\n\n    public boolean validateID() {\n        return this.appointmentId != null && this.appointmentId.startsWith(\"APPT-\");\n    }\n\n    public double calculateAppointmentCost() {\n        // Simulating calculation based on doctor's specialization and appointment duration\n        double baseCost = 100.0; // Base cost of appointment\n        double specializationFactor = 0.0; // Factor based on doctor's specialization\n        switch (this.doctor.getSpecialization().toLowerCase()) {\n            case \"internal medicine\":\n                specializationFactor = 1.2;\n                break;\n            case \"cardiology\":\n                specializationFactor = 1.5;\n                break;\n            default:\n                specializationFactor = 1.0;\n                break;\n        }\n        long duration = 30 * 60 * 1000; // Example: 30 minutes appointment duration\n        double durationInHours = duration / (1000.0 * 60.0 * 60.0);\n        return baseCost * specializationFactor * durationInHours;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Patient patient = new Patient(\"John Doe\", 35, \"Male\", \"Fever\");\n        Doctor doctor = new Doctor(\"Dr. Smith\", \"Internal Medicine\");\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(Calendar.YEAR, 2024);\n        calendar.set(Calendar.MONTH, Calendar.MAY);\n        calendar.set(Calendar.DAY_OF_MONTH, 15);\n        Date date = calendar.getTime();\n        Appointment appointment = new Appointment(patient, doctor, date);\n        displayAppointmentDetails(appointment);\n    }\n\n    public static void displayAppointmentDetails(Appointment appointment) {\n        System.out.println(\"Appointment ID: \" + appointment.getAppointmentId());\n        System.out.println(\"Patient: \" + appointment.getPatient().getName() + \" (ID: \" + appointment.getPatient().getPatientId() + \")\");\n        System.out.println(\"Doctor: \" + appointment.getDoctor().getName() + \" (ID: \" + appointment.getDoctor().getDoctorId() + \")\");\n        System.out.println(\"Date: \" + appointment.getDate());\n    }\n}"
    },
    {
        "instruction": "Design a Java program for managing a hotel management system with classes for Room, Guest, and Reservation. Implement a specific relationship between the classes and functionalities such as generating and validating IDs, checking in and out, and displaying reservation details.",
        "input": "",
        "output": "class Room {\n    private String roomId;\n    private int capacity;\n    private boolean available;\n\n    private static int roomCounter = 1;\n\n    public Room(int capacity) {\n        this.capacity = capacity;\n        this.roomId = this.generateID();\n        this.available = true;\n    }\n\n    private String generateID() {\n        return \"ROOM-\" + Room.roomCounter++;\n    }\n\n    public String getRoomId() {\n        return this.roomId;\n    }\n\n    public int getCapacity() {\n        return this.capacity;\n    }\n\n    public boolean isAvailable() {\n        return this.available;\n    }\n\n    public void setAvailable(boolean available) {\n        this.available = available;\n    }\n}\n\nclass Guest {\n    private String guestId;\n    private String name;\n    private String email;\n    private String phone;\n\n    private static int guestCounter = 1;\n\n    public Guest(String name, String email, String phone) {\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n        this.guestId = generateID();\n    }\n\n    private String generateID() {\n        return \"GUEST-\" + Guest.guestCounter++;\n    }\n\n    public String getGuestId() {\n        return this.guestId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public String getEmail() {\n        return this.email;\n    }\n\n    public String getPhone() {\n        return this.phone;\n    }\n}\n\nclass Reservation {\n    private String reservationId;\n    private Room room;\n    private Guest guest;\n    private Date checkInDate;\n    private Date checkOutDate;\n    private boolean checkedIn;\n    private boolean checkedOut;\n\n    private static int reservationCounter = 1;\n\n    public Reservation(Room room, Guest guest, Date checkInDate, Date checkOutDate) {\n        this.room = room;\n        this.guest = guest;\n        this.checkInDate = checkInDate;\n        this.checkOutDate = checkOutDate;\n        this.reservationId = generateID();\n        this.checkedIn = false;\n        this.checkedOut = false;\n    }\n\n    private String generateID() {\n        return \"RES-\" + Reservation.reservationCounter++;\n    }\n\n    public String getReservationId() {\n        return this.reservationId;\n    }\n\n    public Room getRoom() {\n        return this.room;\n    }\n\n    public Guest getGuest() {\n        return this.guest;\n    }\n\n    public Date getCheckInDate() {\n        return this.checkInDate;\n    }\n\n    public Date getCheckOutDate() {\n        return this.checkOutDate;\n    }\n\n    public boolean isCheckedIn() {\n        return this.checkedIn;\n    }\n\n    public boolean isCheckedOut() {\n        return this.checkedOut;\n    }\n\n    public void checkIn() {\n        this.checkedIn = true;\n    }\n\n    public void checkOut() {\n        this.checkedOut = true;\n    }\n\n    public void displayReservationDetails() {\n        System.out.println(\"Reservation ID: \" + this.reservationId);\n        System.out.println(\"Guest: \" + this.guest.getName() + \" (ID: \" + this.guest.getGuestId() + \")\");\n        System.out.println(\"Room: \" + this.room.getRoomId() + \", Capacity: \" + this.room.getCapacity());\n        System.out.println(\"Check-in Date: \" + this.checkInDate);\n        System.out.println(\"Check-out Date: \" + this.checkOutDate);\n        if (this.checkedIn) {\n            System.out.println(\"Checked-in: Yes\");\n        } else {\n            System.out.println(\"Checked-in: No\");\n        }\n        if (this.checkedOut) {\n            System.out.println(\"Checked-out: Yes\");\n        } else {\n            System.out.println(\"Checked-out: No\");\n        }\n    }\n\n    public void calculateHotelBill() {\n        // Validate reservation and guest\n        if (!validateReservation() || !validateGuest()) {\n            System.out.println(\"Validation failed. Cannot calculate bill.\");\n            return;\n        }\n\n        // Example calculation logic\n        long durationMillis = this.checkOutDate.getTime() - this.checkInDate.getTime();\n        int durationDays = (int) (durationMillis / (1000 * 60 * 60 * 24));\n\n        double roomRate = 1500.0; // Example rate per room per day\n        double totalBill = roomRate * durationDays;\n\n        // Apply any discounts or additional charges\n        // Example: Apply discount for longer stays\n        if (durationDays >= 7) {\n            totalBill *= 0.9; // 10% discount for stays of 7 days or more\n        }\n\n        // Display the total bill\n        System.out.println(\"Total Bill for Reservation \" + this.reservationId + \": $\" + totalBill);\n    }\n\n    private boolean validateReservation() {\n        // Example validation logic\n        return this.checkInDate != null && this.checkOutDate != null && this.checkInDate.before(this.checkOutDate);\n    }\n\n    private boolean validateGuest() {\n        // Example validation logic\n        return this.guest != null && this.guest.getName() != null && !this.guest.getName().isEmpty();\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        // Create Room\n        Room room1 = new Room(2);\n\n        // Create Guest\n        Guest guest1 = new Guest(\"Alice Johnson\", \"alice.johnson@example.com\", \"1234567890\");\n\n        // Create Reservation\n        Date checkInDate = new Date();\n        Calendar cal = Calendar.getInstance();\n        cal.add(Calendar.DAY_OF_MONTH, 3); // Check-out in 3 days\n        Date checkOutDate = cal.getTime();\n        Reservation reservation1 = new Reservation(room1, guest1, checkInDate, checkOutDate);\n\n        // Display Reservation Details\n        reservation1.displayReservationDetails();\n\n        // Calculate and display Hotel Bill\n        reservation1.calculateHotelBill();\n    }\n}"
    },
    {
        "instruction": "Implement a Java program simulating a car rental system. Design classes for Car, Customer, and Rental, ensuring they meet specific business requirements. Establish a relationship between the classes following a relevant business scenario.",
        "input": "",
        "output": "class Car {\n    private static int carCounter = 1;\n    private String carId;\n    private String brand;\n    private String model;\n    private double rentalRatePerDay;\n    private boolean available;\n\n    public Car(String brand, String model, double rentalRatePerDay) {\n        this.brand = brand;\n        this.model = model;\n        this.rentalRatePerDay = rentalRatePerDay;\n        this.carId = this.generateID();\n        this.available = true;\n    }\n\n    private String generateID() {\n        return \"CAR-\" + Car.carCounter++;\n    }\n\n    public String getCarId() {\n        return this.carId;\n    }\n\n    public String getBrand() {\n        return this.brand;\n    }\n\n    public String getModel() {\n        return this.model;\n    }\n\n    public double getRentalRatePerDay() {\n        return this.rentalRatePerDay;\n    }\n\n    public boolean isAvailable() {\n        return this.available;\n    }\n\n    public void setAvailable(boolean available) {\n        this.available = available;\n    }\n}\n\nclass Customer {\n    private static int customerCounter = 1;\n    private String customerId;\n    private String name;\n    private String email;\n    private String phone;\n\n    public Customer(String name, String email, String phone) {\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n        this.customerId = this.generateID();\n    }\n\n    private String generateID() {\n        return \"CUST-\" + Customer.customerCounter++;\n    }\n\n    public String getCustomerId() {\n        return this.customerId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public String getEmail() {\n        return this.email;\n    }\n\n    public String getPhone() {\n        return this.phone;\n    }\n}\n\nclass Rental extends Car {\n    private static int rentalCounter = 1;\n    private String rentalId;\n    private Customer customer;\n    private Date startDate;\n    private Date endDate;\n    private double totalAmount;\n\n    public Rental(String brand, String model, double rentalRatePerDay, Customer customer, Date startDate, Date endDate) {\n        super(brand, model, rentalRatePerDay);\n        this.customer = customer;\n        this.startDate = startDate;\n        this.endDate = endDate;\n        this.rentalId = this.generateID();\n        calculateTotalAmount();\n    }\n\n    private String generateID() {\n        return \"RENT-\" + Rental.rentalCounter++;\n    }\n\n    public String getRentalId() {\n        return this.rentalId;\n    }\n\n    public Customer getCustomer() {\n        return this.customer;\n    }\n\n    public Date getStartDate() {\n        return this.startDate;\n    }\n\n    public Date getEndDate() {\n        return this.endDate;\n    }\n\n    public double getTotalAmount() {\n        return this.totalAmount;\n    }\n\n    private void calculateTotalAmount() {\n        long diffInMillies = Math.abs(this.endDate.getTime() - this.startDate.getTime());\n        long diffInDays = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);\n        this.totalAmount = diffInDays * this.getRentalRatePerDay();\n    }\n\n    public void displayRentalDetails() {\n        System.out.println(\"Rental ID: \" + this.rentalId);\n        System.out.println(\"Car: \" + this.getBrand() + \" \" + this.getModel());\n        System.out.println(\"Customer: \" + this.customer.getName());\n        System.out.println(\"Start Date: \" + this.startDate);\n        System.out.println(\"End Date: \" + this.endDate);\n        System.out.println(\"Total Amount: $\" + this.totalAmount);\n    }\n\n    public double calculateRentalDiscount() {\n        // Example validation checks\n        if (!validateRentalDates()) {\n            System.out.println(\"Invalid rental dates. Discount calculation failed.\");\n            return 0.0;\n        }\n\n        // Example discount calculation\n        double discountPercentage = 0.0;\n        if (this.getTotalAmount() > 500.0) {\n            discountPercentage = 10.0; // 10% discount if total amount exceeds $500\n        }\n\n        // Calculate discount amount\n        double discountAmount = this.getTotalAmount() * (discountPercentage / 100.0);\n\n        System.out.println(\"Discount Amount: $\" + discountAmount);\n\n        // Return discounted amount\n        return this.getTotalAmount() - discountAmount;\n    }\n\n    private boolean validateRentalDates() {\n        // Example validation logic\n        return this.startDate != null && this.endDate != null && this.startDate.before(this.endDate);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create Rental\n        Customer customer1 = new Customer(\"John Doe\", \"john.doe@example.com\", \"1234567890\");\n        Date startDate = new Date();\n        Calendar cal = Calendar.getInstance();\n        cal.add(Calendar.DAY_OF_MONTH, 7); // Rental for 7 days\n        Date endDate = cal.getTime();\n        Rental rental1 = new Rental(\"Toyota\", \"Camry\", 50.0, customer1, startDate, endDate);\n\n        // Display Rental Details\n        rental1.displayRentalDetails();\n\n        // Calculate and display Rental Discount\n        rental1.calculateRentalDiscount();\n    }\n}\n"
    },
    {
        "instruction": "Design a Java program for managing a library management system. Implement three classes: Book, LibraryMember, and LibraryLoan. Establish a relationship between the classes following a specific business scenario. Include functionalities such as generating and validating IDs, checking out and returning books, calculating late fees, and displaying loan details.",
        "input": "",
        "output": "class Book {\n    private static int bookCounter = 1;\n    private String isbn;\n    private String title;\n    private String author;\n\n    public Book(String title, String author, String isbn) {\n        this.title = title;\n        this.author = author;\n        this.isbn = isbn;\n    }\n\n    private String generateId() {\n        return this.title.substring(0, 3).toUpperCase() + Book.bookCounter++;\n    }\n\n    public String getIsbn() {\n        return this.isbn;\n    }\n\n    public String getTitle() {\n        return this.title;\n    }\n\n    public String getAuthor() {\n        return this.author;\n    }\n}\n\nclass LibraryMember {\n    private static int memberCounter = 1;\n    private String memberId;\n    private String name;\n\n    public LibraryMember(String name) {\n        this.name = name;\n        this.memberId = generateId();\n    }\n\n    private String generateId() {\n        return \"MEM-\" + LibraryMember.memberCounter++;\n    }\n\n    public String getMemberId() {\n        return this.memberId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n}\n\nclass LibraryLoan {\n    private static int loanCounter = 1;\n    private String loanId;\n    private Book book;\n    private LibraryMember member;\n    private Date dueDate;\n\n    public LibraryLoan(Book book, LibraryMember member, Date dueDate) {\n        this.book = book;\n        this.member = member;\n        this.dueDate = dueDate;\n        this.loanId = generateId();\n    }\n\n    private String generateId() {\n        return \"LOAN-\" + LibraryLoan.loanCounter++;\n    }\n\n    public String getLoanId() {\n        return this.loanId;\n    }\n\n    public Book getBook() {\n        return this.book;\n    }\n\n    public LibraryMember getMember() {\n        return this.member;\n    }\n\n    public Date getDueDate() {\n        return this.dueDate;\n    }\n\n    public void returnBook() {\n        // Set the return date\n        Date currentDate = new Date();\n        long diffInMillies = Math.abs(currentDate.getTime() - this.dueDate.getTime());\n        long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);\n        if (currentDate.after(this.dueDate)) {\n            double lateFee = calculateLateFee(diff);\n            System.out.println(\"Late fee charged: $\" + lateFee);\n        }\n        // Logic for returning a book (e.g., updating database)\n        System.out.println(\"Book returned successfully.\");\n    }\n\n    public double calculateLateFee(long daysLate) {\n        // Assuming late fee is $1 per day\n        return daysLate * 1.0;\n    }\n\n    public void displayLoanDetails() {\n        // Display loan details\n        System.out.println(\"Loan ID: \" + this.loanId);\n        System.out.println(\"Book Title: \" + this.book.getTitle());\n        System.out.println(\"Member Name: \" + this.member.getName());\n        System.out.println(\"Due Date: \" + this.dueDate.toString());\n    }\n\n    public double calculateFine() {\n        // Example validation checks\n        if (!validateLoanConditions()) {\n            System.out.println(\"Unable to calculate fine. Loan conditions not met.\");\n            return 0.0;\n        }\n\n        // Calculate fine logic\n        double fine = 0.0;\n        long diffInMillies = new Date().getTime() - this.dueDate.getTime();\n        long diffInDays = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);\n\n        if (diffInDays > 0) {\n            fine = diffInDays * 2.0; // Assuming $2 per day fine\n        }\n\n        return fine;\n    }\n\n    private boolean validateLoanConditions() {\n        // Example validation logic\n        return this.member != null && this.book != null && this.dueDate != null;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create Book\n        Book book1 = new Book(\"Java Programming\", \"John Doe\", \"978-0134685991\");\n\n        // Create Library Member\n        LibraryMember member1 = new LibraryMember(\"Alice Smith\");\n\n        // Create Library Loan\n        Calendar cal = Calendar.getInstance();\n        cal.add(Calendar.DAY_OF_MONTH, -7); // Due date a week ago (for testing late fee)\n        Date dueDate = cal.getTime();\n        LibraryLoan loan1 = new LibraryLoan(book1, member1, dueDate);\n\n        // Display Loan Details\n        loan1.displayLoanDetails();\n\n        // Return Book\n        loan1.returnBook();\n\n        // Calculate Fine\n        double fineAmount = loan1.calculateFine();\n        System.out.println(\"Fine Amount: $\" + fineAmount);\n    }\n}"
    },
    {
        "instruction": "Develop a Java program for tracking fitness activities with classes for User, Exercise, and WorkoutLog. The program should provide functionalities like logging workouts, setting fitness goals, and tracking progress. Ensure that the classes include methods and instance variables relevant to the business scenario, such as generating and validating IDs, calculating specific business metrics, and other necessary functionalities.",
        "input": "",
        "output": "// User class representing a user\npublic class User {\n    private static int userCounter = 1;\n    private String userId;\n    private String username;\n    private int age;\n    private double weight;\n    private double height;\n    private String gender;\n    private double fitnessGoal;\n\n    public User(String username, int age, double weight, double height, String gender, double fitnessGoal) {\n        this.userId = this.generateId(username);\n        this.username = username;\n        this.age = age;\n        this.weight = weight;\n        this.height = height;\n        this.gender = gender;\n        this.fitnessGoal = fitnessGoal;\n    }\n\n    private String generateId(String username) {\n        return username.substring(0, 3).toUpperCase() + User.userCounter++;\n    }\n\n    public String getUserId() {\n        return this.userId;\n    }\n\n    public boolean validateId() {\n        return this.username.length() > 0 && this.age > 18;\n    }\n\n    public double calculateCaloriesBurned(Exercise[] exercises, int[] durations) {\n        // Example validation checks\n        if (!validateWorkout(exercises, durations)) {\n            System.out.println(\"Unable to calculate calories burned. Workout validation failed.\");\n            return 0.0;\n        }\n\n        // Calculate calories burned logic\n        double totalCalories = 0.0;\n        for (int i = 0; i < exercises.length; i++) {\n            totalCalories += exercises[i].getCaloriesBurnedPerMinute() * durations[i];\n        }\n\n        return totalCalories;\n    }\n\n    private boolean validateWorkout(Exercise[] exercises, int[] durations) {\n        // Example validation logic\n        return exercises != null && durations != null && exercises.length == durations.length;\n    }\n}\n\n// Exercise class representing an exercise\npublic class Exercise {\n    private static int exerciseCounter = 1;\n    private String exerciseId;\n    private String name;\n    private String category;\n    private double caloriesBurnedPerMinute;\n\n    public Exercise(String name, String category, double caloriesBurnedPerMinute) {\n        this.exerciseId = generateId(name);\n        this.name = name;\n        this.category = category;\n        this.caloriesBurnedPerMinute = caloriesBurnedPerMinute;\n    }\n\n    private String generateId(String name) {\n        return name.substring(0, 3).toUpperCase() + Exercise.exerciseCounter++;\n    }\n\n    public String getExerciseId() {\n        return this.exerciseId;\n    }\n\n    public double getCaloriesBurnedPerMinute() {\n        return this.caloriesBurnedPerMinute;\n    }\n}\n\n// WorkoutLog class representing a workout log\npublic class WorkoutLog {\n    private static int logCounter = 1;\n    private String logId;\n    private User user;\n    private Exercise[] exercises;\n    private int exerciseCount;\n\n    public WorkoutLog(User user) {\n        this.logId = generateId(user.getUsername());\n        this.user = user;\n        this.exercises = new Exercise[10];\n        this.exerciseCount = 0;\n    }\n\n    private String generateId(String username) {\n        return username.substring(0, 3).toUpperCase() + WorkoutLog.logCounter++;\n    }\n\n    public String getLogId() {\n        return this.logId;\n    }\n\n    public void addExercise(Exercise exercise) {\n        if (exerciseCount < exercises.length) {\n            exercises[exerciseCount++] = exercise;\n        }\n    }\n\n    public Exercise[] getExercises() {\n        return this.exercises;\n    }\n\n    public double calculateWorkoutIntensity() {\n        // Example validation checks\n        if (!validateWorkout(user, exercises)) {\n            System.out.println(\"Unable to calculate workout intensity. Validation failed.\");\n            return 0.0;\n        }\n\n        // Calculate workout intensity logic\n        double totalIntensity = 0.0;\n        for (Exercise exercise : exercises) {\n            totalIntensity += exercise.getCaloriesBurnedPerMinute();\n        }\n\n        return totalIntensity;\n    }\n\n    private boolean validateWorkout(User user, Exercise[] exercises) {\n        // Example validation logic\n        return user != null && exercises != null && exercises.length > 0;\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        User user = new User(\"JohnDoe\", 30, 75.0, 180.0, \"Male\", 2000);\n        Exercise exercise1 = new Exercise(\"Running\", \"Cardio\", 10.0);\n        Exercise exercise2 = new Exercise(\"Weightlifting\", \"Strength\", 8.0);\n\n        WorkoutLog log = new WorkoutLog(user);\n        log.addExercise(exercise1);\n        log.addExercise(exercise2);\n\n        // Additional functionality testing\n        System.out.println(\"User ID: \" + user.getUserId());\n        System.out.println(\"Log ID: \" + log.getLogId());\n        System.out.println(\"Exercises in log: \");\n        for (Exercise exercise : log.getExercises()) {\n            if (exercise != null) {\n                System.out.println(\"- \" + exercise.getExerciseId() + \": \" + exercise.getName());\n            }\n        }\n        System.out.println(\"Is user ID valid: \" + user.validateId());\n\n        // Calculate workout intensity\n        double intensity = log.calculateWorkoutIntensity();\n        System.out.println(\"Workout Intensity: \" + intensity);\n\n        // Calculate calories burned\n        int[] durations = {30, 45}; // Exercise durations in minutes\n        double caloriesBurned = user.calculateCaloriesBurned(log.getExercises(), durations);\n        System.out.println(\"Calories Burned: \" + caloriesBurned);\n    }\n}\n"
    },
    {
        "instruction": "Design a Java program for managing a tourism booking system. Implement three classes: TourPackage, Customer, and Booking. Establish a relationship between the classes following a specific business scenario. Include functionalities such as generating and validating IDs, calculating specific business metrics, and other necessary functionalities.",
        "input": "",
        "output": "class TourPackage {\n    private static int packageCounter = 1;\n    private String packageId;\n    private String packageName;\n    private double price;\n\n    public TourPackage(String packageName, double price) {\n        this.packageName = packageName;\n        this.price = price;\n        this.packageId = this.generateId(packageName);\n    }\n\n    private String generateId(String packageName) {\n        return packageName.substring(0, 3).toUpperCase() + TourPackage.packageCounter++;\n    }\n\n    public String getPackageId() {\n        return this.packageId;\n    }\n\n    public String getPackageName() {\n        return this.packageName;\n    }\n\n    public double getPrice() {\n        return this.price;\n    }\n}\n\n class Customer {\n    private static int customerCounter = 1;\n    private String customerId;\n    private String firstName;\n    private String lastName;\n    private int age;\n    private String email;\n\n    public Customer(String firstName, String lastName, int age, String email) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.age = age;\n        this.email = email;\n        this.customerId = generateId(firstName);\n    }\n\n    private String generateId(String firstName) {\n        return firstName.substring(0, 3).toUpperCase() + Customer.customerCounter++;\n    }\n\n    public String getCustomerId() {\n        return this.customerId;\n    }\n\n    public boolean validateId() {\n        return this.email.endsWith(\"@gmail.com\") && this.age > 18;\n    }\n}\n\n class Booking extends TourPackage {\n    private static int bookingCounter = 1;\n    private String bookingId;\n    private Customer customer;\n    private double totalPrice;\n\n    public Booking(String packageName, double price, Customer customer) {\n        super(packageName, price);\n        this.customer = customer;\n        this.bookingId = this.generateId(packageName);\n        this.totalPrice = price;\n    }\n\n    private String generateId(String packageName) {\n        return packageName.substring(0, 3).toUpperCase() + this.customer.getCustomerId() + Booking.bookingCounter++;\n    }\n\n    public String getBookingId() {\n        return this.bookingId;\n    }\n\n    public double getTotalPrice() {\n        return this.totalPrice;\n    }\n\n    public double calculateTotalCost() {\n        // Example validation checks\n        if (!this.validateBooking()) {\n            System.out.println(\"Unable to calculate total cost. Validation failed.\");\n            return 0.0;\n        }\n\n        // Calculate total cost logic\n        double serviceChargePercentage = 5.0; // Example percentage\n        double taxPercentage = 10.0; // Example percentage\n\n        double serviceCharge = (serviceChargePercentage / 100) * this.totalPrice;\n        double taxAmount = (taxPercentage / 100) * this.totalPrice;\n\n        double totalCost = this.totalPrice + serviceCharge + taxAmount;\n\n        return totalCost;\n    }\n\n    private boolean validateBooking() {\n        // Additional complex validation checks\n        boolean isValid = true;\n\n        // Example: Ensure customer age is within a reasonable range for booking\n        if (this.customer.getAge() < 18 || this.customer.getAge() > 70) {\n            System.out.println(\"Invalid booking: Customer age must be between 18 and 70.\");\n            isValid = false;\n        }\n\n        // Example: Validate customer email format\n        if (!this.customer.getEmail().matches(\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}\")) {\n            System.out.println(\"Invalid booking: Customer email format is invalid.\");\n            isValid = false;\n        }\n\n        return isValid;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Customer customer1 = new Customer(\"Alice\", \"Smith\", 30, \"alice@gmail.com\");\n        Booking booking1 = new Booking(\"Mountain Trek\", 2000.0, customer1);\n\n        System.out.println(\"Booking ID: \" + booking1.getBookingId());\n        System.out.println(\"Total Price: $\" + booking1.getTotalPrice());\n        System.out.println(\"Customer ID is valid: \" + customer1.validateId());\n\n        // Calculate and print total cost\n        double totalCost = booking1.calculateTotalCost();\n        System.out.println(\"Total Cost: $\" + totalCost);\n    }\n}\n"
    },
    {
        "instruction": "Develop a Java program for an Event Management System. The system should include classes for Event, Organizer, and Attendee. Implement features such as event creation, attendee registration, and ticketing.",
        "input": "",
        "output": "public class Event {\n    private String eventId;\n    private String eventName;\n    private Organizer organizer;\n    private Date eventDate;\n    private static int eventCounter = 1;\n\n    public Event(String eventName, Organizer organizer, Date eventDate) {\n        this.eventName = eventName;\n        this.organizer = organizer;\n        this.eventDate = eventDate;\n        this.eventId = this.generateId(eventName);\n    }\n\n    private String generateId(String eventName) {\n        return eventName.substring(0, 3).toUpperCase() + Event.eventCounter++;\n    }\n\n    public String getEventId() {\n        return this.eventId;\n    }\n\n    public String getEventName() {\n        return this.eventName;\n    }\n\n    public Organizer getOrganizer() {\n        return this.organizer;\n    }\n\n    public Date getEventDate() {\n        return this.eventDate;\n    }\n\n    public double calculateBudget() {\n        // Example validation checks\n        if (!validateEvent()) {\n            System.out.println(\"Unable to calculate budget. Validation failed.\");\n            return 0.0;\n        }\n\n        // Calculate budget logic\n        double serviceChargePercentage = 8.0; // Example percentage\n        double taxPercentage = 12.0; // Example percentage\n\n        double serviceCharge = (serviceChargePercentage / 100) * this.organizer.getBudget();\n        double taxAmount = (taxPercentage / 100) * this.organizer.getBudget();\n\n        double totalBudget = this.organizer.getBudget() + serviceCharge + taxAmount;\n\n        return totalBudget;\n    }\n\n    private boolean validateEvent() {\n        // Additional complex validation checks\n        boolean isValid = true;\n\n        // Example: Validate event date is in the future\n        if (this.eventDate.before(new Date())) {\n            System.out.println(\"Invalid event: Event date must be in the future.\");\n            isValid = false;\n        }\n\n        // Example: Validate organizer's budget is sufficient\n        if (this.organizer.getBudget() < 1000) {\n            System.out.println(\"Invalid event: Organizer's budget must be at least $1000.\");\n            isValid = false;\n        }\n\n        return isValid;\n    }\n}\n\nclass Organizer {\n    private String organizerName;\n    private double budget;\n\n    public Organizer(String organizerName, double budget) {\n        this.organizerName = organizerName;\n        this.budget = budget;\n    }\n\n    public String getOrganizerName() {\n        return this.organizerName;\n    }\n\n    public double getBudget() {\n        return this.budget;\n    }\n}\n\nclass Attendee {\n    private String attendeeId;\n    private String attendeeName;\n    private static int attendeeCounter = 1;\n\n    public Attendee(String attendeeName) {\n        this.attendeeName = attendeeName;\n        this.attendeeId = this.generateId(attendeeName);\n    }\n\n    private String generateId(String attendeeName) {\n        return attendeeName.substring(0, 3).toUpperCase() + Attendee.attendeeCounter++;\n    }\n\n    public String getAttendeeId() {\n        return this.attendeeId;\n    }\n\n    public String getAttendeeName() {\n        return this.attendeeName;\n    }\n\n    public boolean validateId() {\n        return this.attendeeId != null && this.attendeeId.startsWith(this.attendeeName.substring(0, 3).toUpperCase());\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Organizer organizer = new Organizer(\"Event Organizers Inc.\", 5000.0);\n        Event event = new Event(\"Annual Conference\", organizer, new Date());\n        Attendee attendee1 = new Attendee(\"John Doe\");\n        Attendee attendee2 = new Attendee(\"Alice Smith\");\n\n        System.out.println(\"Event ID: \" + event.getEventId());\n        System.out.println(\"Event Name: \" + event.getEventName());\n        System.out.println(\"Organizer: \" + event.getOrganizer().getOrganizerName());\n        System.out.println(\"Event Date: \" + event.getEventDate());\n\n        System.out.println(\"\\nAttendee 1 ID: \" + attendee1.getAttendeeId());\n        System.out.println(\"Attendee 1 Name: \" + attendee1.getAttendeeName());\n        System.out.println(\"Attendee 1 ID is valid: \" + attendee1.validateId());\n\n        System.out.println(\"\\nAttendee 2 ID: \" + attendee2.getAttendeeId());\n        System.out.println(\"Attendee 2 Name: \" + attendee2.getAttendeeName());\n        System.out.println(\"Attendee 2 ID is valid: \" + attendee2.validateId());\n\n        // Calculate and print total budget\n        double totalBudget = event.calculateBudget();\n        System.out.println(\"\\nTotal Budget: $\" + totalBudget);\n    }\n}"
    },
    {
        "instruction": "Develop a Java program for a Music Streaming Service. The system should include classes for Song, Playlist, and User, implementing features such as song playback, playlist creation, and user profile management.",
        "input": "",
        "output": "// Song class representing a song\npublic class Song {\n    private static int songCounter = 1;\n    private String songId;\n    private String title;\n    private String artist;\n    private double duration;\n\n    public Song(String title, String artist, double duration) {\n        this.title = title;\n        this.artist = artist;\n        this.duration = duration;\n        this.songId = User.generateId(title);\n    }\n\n    public String getSongId() {\n        return this.songId;\n    }\n\n    public String getTitle() {\n        return this.title;\n    }\n\n    public String getArtist() {\n        return this.artist;\n    }\n\n    public double getDuration() {\n        return this.duration;\n    }\n}\n\n// Playlist class representing a playlist\npublic class Playlist {\n    private static int playlistCounter = 1;\n    private String playlistId;\n    private String name;\n    private Song[] songs;\n    private int songCount;\n\n    public Playlist(String name) {\n        this.name = name;\n        this.playlistId = User.generateId(name);\n        this.songs = new Song[50]; // Assume a playlist can have up to 50 songs\n        this.songCount = 0;\n    }\n\n    public void addSong(Song song) {\n        if (this.songCount < this.songs.length) {\n            this.songs[this.songCount++] = song;\n        }\n    }\n\n    public Song[] getSongs() {\n        return this.songs;\n    }\n\n    public String getPlaylistId() {\n        return this.playlistId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n}\n\n// User class representing a user\npublic class User {\n    private static int userCounter = 1;\n    private String userId;\n    private String username;\n    private String email;\n    private Playlist[] playlists;\n    private int playlistCount;\n\n    public User(String username, String email) {\n        this.username = username;\n        this.email = email;\n        this.userId = User.generateId(username);\n        this.playlists = new Playlist[10]; // Assume a user can have up to 10 playlists\n        this.playlistCount = 0;\n    }\n\n    public static String generateId(String name) {\n        return name.substring(0, 3).toUpperCase() + userCounter++;\n    }\n\n    public boolean validateId() {\n        return this.email.endsWith(\"@gmail.com\") && this.username.length() > 0;\n    }\n\n    public void createPlaylist(String name) {\n        if (this.playlistCount < this.playlists.length) {\n            this.playlists[this.playlistCount++] = new Playlist(name);\n        }\n    }\n\n    public Playlist[] getPlaylists() {\n        return this.playlists;\n    }\n\n    public double calculateTotalPlaytime() {\n        // Example validation checks\n        if (!this.validateId()) {\n            System.out.println(\"Unable to calculate total playtime. Validation failed.\");\n            return 0.0;\n        }\n\n        double totalPlaytime = 0.0;\n\n        for (Playlist playlist : this.playlists) {\n            if (playlist != null) {\n                for (Song song : playlist.getSongs()) {\n                    if (song != null) {\n                        totalPlaytime += song.getDuration();\n                    }\n                }\n            }\n        }\n\n        return totalPlaytime;\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        User user = new User(\"JohnDoe\", \"john@gmail.com\");\n        user.createPlaylist(\"Favorites\");\n        user.createPlaylist(\"Road Trip\");\n\n        Song song1 = new Song(\"Bohemian Rhapsody\", \"Queen\", 5.55);\n        Song song2 = new Song(\"Imagine\", \"John Lennon\", 3.03);\n\n        Playlist[] playlists = user.getPlaylists();\n        for (Playlist playlist : playlists) {\n            if (playlist != null) {\n                playlist.addSong(song1);\n                playlist.addSong(song2);\n\n                System.out.println(\"Playlist ID: \" + playlist.getPlaylistId());\n                System.out.println(\"Playlist Name: \" + playlist.getName());\n                for (Song song : playlist.getSongs()) {\n                    if (song != null) {\n                        System.out.println(\" - \" + song.getTitle() + \" by \" + song.getArtist());\n                    }\n                }\n                System.out.println();\n            }\n        }\n\n        System.out.println(\"User ID is valid: \" + user.validateId());\n        System.out.println(\"Total Playtime: \" + user.calculateTotalPlaytime() + \" minutes\");\n    }\n}\n"
    },
    {
        "instruction": "Develop a Java program for a Task Management Application. The system should include classes for Task, Project, and TeamMember, implementing features such as task assignment, progress tracking, and deadline management.",
        "input": "",
        "output": "// Task class representing a task\npublic class Task {\n    private static int taskIdCounter = 1;\n    private String taskId;\n    private String title;\n    private String description;\n    private boolean completed;\n    private String deadline;\n    private TeamMember assignedTo;\n\n    public Task(String title, String description, String deadline) {\n        this.title = title;\n        this.description = description;\n        this.deadline = deadline;\n        this.taskId = TeamMember.generateId(title);\n        this.completed = false;\n    }\n\n    public String getTaskId() {\n        return this.taskId;\n    }\n\n    public String getTitle() {\n        return this.title;\n    }\n\n    public String getDescription() {\n        return this.description;\n    }\n\n    public boolean isCompleted() {\n        return this.completed;\n    }\n\n    public String getDeadline() {\n        return this.deadline;\n    }\n\n    public void assignTo(TeamMember member) {\n        this.assignedTo = member;\n    }\n}\n\n// Project class representing a project\npublic class Project {\n    private static int projectIdCounter = 1;\n    private String projectId;\n    private String name;\n    private Task[] tasks;\n    private int taskCount;\n\n    public Project(String name) {\n        this.name = name;\n        this.projectId = TeamMember.generateId(name);\n        this.tasks = new Task[50]; // Assume a project can have up to 50 tasks\n        this.taskCount = 0;\n    }\n\n    public void addTask(Task task) {\n        if (this.taskCount < this.tasks.length) {\n            this.tasks[this.taskCount++] = task;\n        }\n    }\n\n    public Task[] getTasks() {\n        return this.tasks;\n    }\n\n    public double calculateProjectProgress() {\n        int totalTasks = 0;\n        int completedTasks = 0;\n\n        for (Task task : this.tasks) {\n            if (task != null) {\n                totalTasks++;\n                if (task.isCompleted()) {\n                    completedTasks++;\n                }\n            }\n        }\n\n        if (totalTasks == 0) {\n            return 0.0;\n        }\n\n        return (completedTasks / (double) totalTasks) * 100;\n    }\n}\n\n// TeamMember class representing a team member\npublic class TeamMember {\n    private static int memberIdCounter = 1;\n    private String memberId;\n    private String name;\n    private String email;\n\n    public TeamMember(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.memberId = TeamMember.generateId(name);\n    }\n\n    public static String generateId(String name) {\n        return name.substring(0, 3).toUpperCase() + memberIdCounter++;\n    }\n\n    public boolean validateId() {\n        return this.email.endsWith(\"@example.com\") && this.name.length() > 0;\n    }\n\n    public String getMemberId() {\n        return this.memberId;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        TeamMember member1 = new TeamMember(\"Alice Smith\", \"alice@example.com\");\n        TeamMember member2 = new TeamMember(\"Bob Johnson\", \"bob@example.com\");\n\n        Project project = new Project(\"Task Management System\");\n        Task task1 = new Task(\"Implement Task Class\", \"Write code for the Task class\", \"2024-06-15\");\n        Task task2 = new Task(\"Design UI\", \"Create mockups for the user interface\", \"2024-06-20\");\n\n        task1.assignTo(member1);\n        task2.assignTo(member2);\n\n        project.addTask(task1);\n        project.addTask(task2);\n\n        double progress = project.calculateProjectProgress();\n\n        System.out.println(\"Project Progress: \" + progress + \"%\");\n\n        Task[] tasks = project.getTasks();\n        for (Task task : tasks) {\n            if (task != null) {\n                System.out.println(\"Task ID: \" + task.getTaskId());\n                System.out.println(\"Title: \" + task.getTitle());\n                System.out.println(\"Description: \" + task.getDescription());\n                System.out.println(\"Deadline: \" + task.getDeadline());\n                System.out.println(\"Assigned To: \" + (task.assignedTo != null ? task.assignedTo.getName() : \"Not Assigned\"));\n                System.out.println();\n            }\n        }\n    }\n}\n"
    }
]