[
    {
        "instruction": "Write a Java program that models a business scenario using three classes: Customer and two related classes connected through either inheritance, aggregation, or association. The classes should include methods and instance variables relevant to the business scenario, such as generating and validating IDs, calculating specific business metrics, and other necessary functionalities.",
        "input": "",
        "output": "public class Customer {\n    private static final int MAX_LOYALTY_POINTS = 100;\n    private static int customerCounter = 1;\n    private String customerId;\n    private String name;\n    private String email;\n    private Purchase[] purchases;\n    private int purchaseCount;\n    private int loyaltyPoints;\n\n    public Customer(String name, String email) {\n        this.customerId = generateID(name);\n        this.name = name;\n        this.email = email;\n        this.purchases = new Purchase[10];\n        this.purchaseCount = 0;\n        this.loyaltyPoints = 0;\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + customerCounter++;\n    }\n\n    public void addPurchase(Purchase purchase) {\n        if (purchaseCount < purchases.length) {\n            purchases[purchaseCount++] = purchase;\n            updateLoyaltyPoints(purchase.getTotalAmount());\n        }\n    }\n\n    private void updateLoyaltyPoints(double amount) {\n        int pointsEarned = (int) (amount / 10);\n        loyaltyPoints += pointsEarned;\n        if (loyaltyPoints > MAX_LOYALTY_POINTS) {\n            loyaltyPoints = MAX_LOYALTY_POINTS;\n        }\n    }\n\n    public int getLoyaltyPoints() {\n        return loyaltyPoints;\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public boolean validateID() {\n        return email.endsWith(\"@gmail.com\") && name.length() > 0;\n    }\n}\n\nclass Purchase {\n    private static int purchaseCounter = 1;\n    private String purchaseId;\n    private Customer customer;\n    private Item[] items;\n    private double totalAmount;\n\n    public Purchase(Customer customer, Item[] items) {\n        this.purchaseId = \"PUR\" + purchaseCounter++;\n        this.customer = customer;\n        this.items = items;\n        this.totalAmount = calculateTotalAmount();\n    }\n\n    private double calculateTotalAmount() {\n        double total = 0;\n        for (Item item : items) {\n            if (item != null) {\n                total += item.getPrice();\n            }\n        }\n        return total;\n    }\n\n    public double getTotalAmount() {\n        return totalAmount;\n    }\n}\n\nclass Item {\n    private static int itemCounter = 1;\n    private String itemId;\n    private String name;\n    private double price;\n    private int quantity;\n\n    public Item(String name, double price, int quantity) {\n        this.itemId = generateID(name);\n        this.name = name;\n        this.price = price;\n        this.quantity = quantity;\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + itemCounter++;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public int getQuantity() {\n        return quantity;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Customer customer = new Customer(\"John\", \"john@gmail.com\");\n        Item item1 = new Item(\"Chair\", 50.0, 2);\n        Item item2 = new Item(\"Table\", 100.0, 1);\n\n        Item[] items = {item1, item2};\n\n        Purchase purchase = new Purchase(customer, items);\n        customer.addPurchase(purchase);\n\n        System.out.println(\"Total purchase amount: $\" + purchase.getTotalAmount());\n        System.out.println(\"Loyalty points earned: \" + customer.getLoyaltyPoints());\n        System.out.println(\"Customer ID is valid: \" + customer.validateID());\n    }\n}\n"
    },
    {
        "instruction": "Write a Java program for an advertising agency management system. The system should include classes for representing the advertising agency, campaigns managed by the agency, and clients who hire the agency. Implement methods for calculating the total budget of all campaigns managed by the agency, finding the campaign with the highest budget, and calculating the remaining budget for a specific campaign. Ensure that each class has appropriate instance variables, methods, and relationships with other classes. Your implementation should demonstrate complex methods such as calculating remaining budget, and adhere to realistic business scenarios.",
        "input": "",
        "output": "// AdAgency class representing an advertising agency\npublic class AdAgency {\n    private static int agencyCounter = 1;\n\n    // Instance variables\n    private String agencyId;\n    private String name;\n    private Campaign[] campaigns;\n    private int campaignCount;\n\n    // Constructor\n    public AdAgency(String name) {\n        this.agencyId = generateId(name);\n        this.name = name;\n        this.campaigns = new Campaign[10]; // Assume the agency can manage up to 10 campaigns\n        this.campaignCount = 0;\n    }\n\n    // Method to generate ID\n    private String generateId(String name) {\n        return name.substring(0, 3).toUpperCase() + agencyCounter++;\n    }\n\n    // Method to add a campaign\n    public void addCampaign(Campaign campaign) {\n        if (campaignCount < campaigns.length) {\n            campaigns[campaignCount++] = campaign;\n        }\n    }\n\n    // Method to calculate the total budget of all campaigns\n    public Double calculateTotalBudget() {\n        double totalBudget = 0;\n        for (int i = 0; i < campaignCount; i++) {\n            totalBudget += campaigns[i].getBudget();\n        }\n        return totalBudget;\n    }\n\n    // Method to find the campaign with the highest budget\n    public Campaign findCampaignWithHighestBudget() {\n        if (campaignCount == 0) {\n            return null;\n        }\n        Campaign highestBudgetCampaign = campaigns[0];\n        for (int i = 1; i < campaignCount; i++) {\n            if (campaigns[i].getBudget() > highestBudgetCampaign.getBudget()) {\n                highestBudgetCampaign = campaigns[i];\n            }\n        }\n        return highestBudgetCampaign;\n    }\n\n    // Getter method for campaigns\n    public Campaign[] getCampaigns() {\n        return campaigns;\n    }\n}\n\n// Campaign class representing a campaign managed by the agency\npublic class Campaign {\n    // Instance variables\n    private String campaignId;\n    private Client client;\n    private String name;\n    private double budget;\n    private double spent;\n\n    // Constructor\n    public Campaign(String campaignId, Client client, String name, double budget) {\n        this.campaignId = campaignId;\n        this.client = client;\n        this.name = name;\n        this.budget = budget;\n        this.spent = 0;\n    }\n\n    // Getter method for budget\n    public Double getBudget() {\n        return budget;\n    }\n\n    // Method to calculate remaining budget\n    public Double calculateRemainingBudget() {\n        return budget - spent;\n    }\n\n    // Method to update spent amount\n    public void spend(double amount) {\n        if (amount <= calculateRemainingBudget()) {\n            spent += amount;\n        }\n    }\n}\n\n// Client class representing a client of the advertising agency\npublic class Client {\n    // Instance variables\n    private String clientId;\n    private String name;\n    private String contactInfo;\n    private int age;\n\n    // Constructor\n    public Client(String clientId, String name, String contactInfo, int age) {\n        this.clientId = clientId;\n        this.name = name;\n        this.contactInfo = contactInfo;\n        this.age = age;\n    }\n\n    // Getter method for client ID\n    public String getClientId() {\n        return clientId;\n    }\n\n    // Method to validate client ID\n    public boolean validateId() {\n        return contactInfo.endsWith(\"@gmail.com\") && age > 18;\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating an advertising agency\n        AdAgency adAgency = new AdAgency(\"XYZ Advertising\");\n\n        // Creating clients\n        Client client1 = new Client(\"CLI001\", \"Client1\", \"client1@gmail.com\", 25);\n        Client client2 = new Client(\"CLI002\", \"Client2\", \"client2@gmail.com\", 30);\n\n        // Creating campaigns\n        Campaign campaign1 = new Campaign(\"CPN001\", client1, \"Campaign 1\", 5000.0);\n        Campaign campaign2 = new Campaign(\"CPN002\", client2, \"Campaign 2\", 8000.0);\n\n        // Adding campaigns to the agency\n        adAgency.addCampaign(campaign1);\n        adAgency.addCampaign(campaign2);\n\n        // Displaying total budget of all campaigns\n        System.out.println(\"Total budget of all campaigns: $\" + adAgency.calculateTotalBudget());\n\n        // Finding campaign with highest budget and displaying its remaining budget\n        Campaign highestBudgetCampaign = adAgency.findCampaignWithHighestBudget();\n        if (highestBudgetCampaign != null) {\n            System.out.println(\"Campaign with highest budget: \" + highestBudgetCampaign.getName());\n            System.out.println(\"Remaining budget of the campaign: $\" + highestBudgetCampaign.calculateRemainingBudget());\n        } else {\n            System.out.println(\"No campaigns found.\");\n        }\n\n        // Validate client IDs\n        System.out.println(\"Client1 ID valid: \" + client1.validateId());\n        System.out.println(\"Client2 ID valid: \" + client2.validateId());\n    }\n}\n"
    },
    {
        "instruction": "Design a Java program for a hospital management system. The system should include classes representing a hospital, doctors, and patients. Implement methods for calculating the average number of patients per doctor and finding the doctor with the highest number of patients. Ensure that each class has appropriate instance variables, methods, and relationships with other classes.  Your implementation should demonstrate complex methods such as calculating averages and finding maximum values, and adhere to realistic business scenarios.",
        "input": "",
        "output": "// Hospital class representing a hospital\npublic class Hospital {\n    private static int hospitalCounter = 1;\n\n    // Instance variables\n    private String hospitalId;\n    private String name;\n    private Doctor[] doctors;\n    private int doctorCount;\n    private Patient[] patients;\n    private int patientCount;\n\n    // Constructor\n    public Hospital(String name) {\n        this.hospitalId = generateId(name);\n        this.name = name;\n        this.doctors = new Doctor[10]; // Assume the hospital can have up to 10 doctors\n        this.doctorCount = 0;\n        this.patients = new Patient[100]; // Assume the hospital can have up to 100 patients\n        this.patientCount = 0;\n    }\n\n    // Method to generate ID\n    private String generateId(String name) {\n        return name.substring(0, 3).toUpperCase() + hospitalCounter++;\n    }\n\n    // Method to add a doctor\n    public void addDoctor(Doctor doctor) {\n        if (doctorCount < doctors.length) {\n            doctors[doctorCount++] = doctor;\n        }\n    }\n\n    // Method to add a patient\n    public void addPatient(Patient patient) {\n        if (patientCount < patients.length) {\n            patients[patientCount++] = patient;\n        }\n    }\n\n    // Method to calculate the average number of patients per doctor\n    public double calculateAveragePatientsPerDoctor() {\n        if (doctorCount == 0) {\n            return 0;\n        }\n        int totalPatients = 0;\n        for (int i = 0; i < doctorCount; i++) {\n            totalPatients += doctors[i].getPatientCount();\n        }\n        return (double) totalPatients / doctorCount;\n    }\n\n    // Method to find the doctor with the most patients\n    public Doctor findDoctorWithMostPatients() {\n        if (doctorCount == 0) {\n            return null;\n        }\n        Doctor mostPatientsDoctor = doctors[0];\n        for (int i = 1; i < doctorCount; i++) {\n            if (doctors[i].getPatientCount() > mostPatientsDoctor.getPatientCount()) {\n                mostPatientsDoctor = doctors[i];\n            }\n        }\n        return mostPatientsDoctor;\n    }\n}\n\n// Doctor class representing a doctor in the hospital\npublic class Doctor {\n    private static int doctorCounter = 1;\n\n    // Instance variables\n    private String doctorId;\n    private String name;\n    private Patient[] patients;\n    private int patientCount;\n\n    // Constructor\n    public Doctor(String name) {\n        this.doctorId = generateId(name);\n        this.name = name;\n        this.patients = new Patient[50]; // Assume each doctor can have up to 50 patients\n        this.patientCount = 0;\n    }\n\n    // Method to generate ID\n    private String generateId(String name) {\n        return name.substring(0, 3).toUpperCase() + doctorCounter++;\n    }\n\n    // Method to add a patient\n    public void addPatient(Patient patient) {\n        if (patientCount < patients.length) {\n            patients[patientCount++] = patient;\n        }\n    }\n\n    // Getter method for patient count\n    public int getPatientCount() {\n        return patientCount;\n    }\n\n    // Getter method for doctor name\n    public String getName() {\n        return name;\n    }\n}\n\n// Patient class representing a patient in the hospital\npublic class Patient {\n    private static int patientCounter = 1;\n\n    // Instance variables\n    private String patientId;\n    private String name;\n    private int age;\n    private String condition;\n\n    // Constructor\n    public Patient(String name, int age, String condition) {\n        this.patientId = generateId(name);\n        this.name = name;\n        this.age = age;\n        this.condition = condition;\n    }\n\n    // Method to generate ID\n    private String generateId(String name) {\n        return name.substring(0, 3).toUpperCase() + patientCounter++;\n    }\n\n    // Getter method for patient name\n    public String getName() {\n        return name;\n    }\n\n    // Other methods related to managing the patient\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating a hospital\n        Hospital hospital = new Hospital(\"XYZ Hospital\");\n\n        // Creating doctors\n        Doctor doctor1 = new Doctor(\"Dr. Smith\");\n        Doctor doctor2 = new Doctor(\"Dr. Johnson\");\n\n        // Creating patients\n        Patient patient1 = new Patient(\"John Doe\", 35, \"Fever\");\n        Patient patient2 = new Patient(\"Jane Smith\", 45, \"Injury\");\n        Patient patient3 = new Patient(\"Mary Johnson\", 50, \"Heart Disease\");\n\n        // Adding patients to doctors\n        doctor1.addPatient(patient1);\n        doctor2.addPatient(patient2);\n        doctor2.addPatient(patient3);\n\n        // Adding doctors and patients to the hospital\n        hospital.addDoctor(doctor1);\n        hospital.addDoctor(doctor2);\n        hospital.addPatient(patient1);\n        hospital.addPatient(patient2);\n        hospital.addPatient(patient3);\n\n        // Displaying average patients per doctor\n        System.out.println(\"Average patients per doctor: \" + hospital.calculateAveragePatientsPerDoctor());\n\n        // Finding doctor with most patients\n        Doctor mostPatientsDoctor = hospital.findDoctorWithMostPatients();\n        if (mostPatientsDoctor != null) {\n            System.out.println(\"Doctor with the most patients: \" + mostPatientsDoctor.getName());\n            System.out.println(\"Number of patients: \" + mostPatientsDoctor.getPatientCount());\n        } else {\n            System.out.println(\"No doctors found.\");\n        }\n    }\n}\n"
    },
    {
        "instruction": "Write a Java program that models a business scenario using three classes: Marketing, Campaign, and Product. These classes should be connected through inheritance, aggregation, or association. The classes should include methods and instance variables relevant to the business scenario, such as generating and validating IDs, calculating campaign reach, managing products, and other necessary functionalities.",
        "input": "",
        "output": "// Product class representing a product\npublic class Product {\n    // Instance variables\n    private String productId;\n    private String name;\n    private double price;\n\n    // Constructor\n    public Product(String name, double price) {\n        this.name = name;\n        this.price = price;\n        this.productId = generateID(name);\n    }\n\n    // Method to generate ID\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + ProductCounter++;\n    }\n\n    // Getter methods\n    public String getProductId() {\n        return productId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n}\n\nclass Campaign extends Product {\n    // Instance variables\n    private String campaignId;\n    private String campaignName;\n    private Marketing marketing;\n\n    // Constructor\n    public Campaign(String campaignName, double price, Marketing marketing) {\n        super(\"Campaign: \" + campaignName, price);\n        this.campaignName = campaignName;\n        this.marketing = marketing;\n        this.campaignId = generateID(campaignName);\n    }\n\n    // Method to generate ID\n    private String generateID(String campaignName) {\n        return campaignName.substring(0, 3).toUpperCase() + CampaignCounter++;\n    }\n\n    // Getter methods\n    public String getCampaignId() {\n        return campaignId;\n    }\n\n    public String getCampaignName() {\n        return campaignName;\n    }\n\n    public Marketing getMarketing() {\n        return marketing;\n    }\n}\n\nclass Marketing {\n    // Instance variables\n    private String marketingId;\n    private String marketingName;\n    private Campaign campaign;\n\n    // Constructor\n    public Marketing(String marketingName, Campaign campaign) {\n        this.marketingName = marketingName;\n        this.campaign = campaign;\n        this.marketingId = generateID(marketingName);\n    }\n\n    // Method to generate ID\n    private String generateID(String marketingName) {\n        return marketingName.substring(0, 3).toUpperCase() + MarketingCounter++;\n    }\n\n    // Getter methods\n    public String getMarketingId() {\n        return marketingId;\n    }\n\n    public String getMarketingName() {\n        return marketingName;\n    }\n\n    public Campaign getCampaign() {\n        return campaign;\n    }\n}\n\n// Main class\npublic class Main {\n    public static void main(String[] args) {\n        Product product = new Product(\"Smartphone\", 699.99);\n        Marketing marketing = new Marketing(\"Summer Sale\", new Campaign(\"Summer Sale Campaign\", 499.99, marketing));\n\n        System.out.println(\"Product ID: \" + product.getProductId());\n        System.out.println(\"Marketing ID: \" + marketing.getMarketingId());\n        System.out.println(\"Campaign ID: \" + marketing.getCampaign().getCampaignId());\n    }\n}"
    },
    {
        "instruction": "Develop a Java program that includes a Product class, a Customer class, and an Order class, related through aggregation or association. Ensure all methods and instance variables meet real-life business scenarios, including methods such as generateID, validateID, and other necessary calculations. The program should support adding products to orders, creating orders for customers, and validating IDs. Finally, display the order details and validate the generated IDs.",
        "input": "",
        "output": "// Product class representing a product\npublic class Product {\n    // Instance variables\n    private String productId;\n    private String name;\n    private double price;\n    private static int ProductCounter = 1;\n\n    // Constructor\n    public Product(String name, double price) {\n        this.name = name;\n        this.price = price;\n        this.productId = generateID(name);\n    }\n\n    // Method to generate ID\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + ProductCounter++;\n    }\n\n    // Getter methods\n    public String getProductId() {\n        return productId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    // Method to validate ID\n    public boolean validateID(String id) {\n        return id.matches(\"[A-Z]{3}-\\d+\");\n    }\n}\n\n// Customer class representing a customer\npublic class Customer {\n    // Instance variables\n    private String customerId;\n    private String name;\n    private String email;\n    private static int CustomerCounter = 1;\n\n    // Constructor\n    public Customer(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.customerId = generateID(name);\n    }\n\n    // Method to generate ID\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + CustomerCounter++;\n    }\n\n    // Getter methods\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    // Method to validate ID\n    public boolean validateID(String id) {\n        return id.matches(\"[A-Z]{3}-\\d+\");\n    }\n}\n\n// Order class representing an order\npublic class Order {\n    // Instance variables\n    private String orderId;\n    private Customer customer;\n    private Product[] products;\n    private double totalAmount;\n    private static int OrderCounter = 1;\n    private int productCount;\n\n    // Constructor\n    public Order(Customer customer) {\n        this.customer = customer;\n        this.products = new Product[10]; // Assuming an order can have up to 10 products\n        this.orderId = generateID();\n        this.productCount = 0;\n    }\n\n    // Method to generate ID\n    private String generateID() {\n        return \"ORD-\" + OrderCounter++;\n    }\n\n    // Method to validate ID\n    public boolean validateID(String id) {\n        return id.matches(\"ORD-\\d+\");\n    }\n\n    // Getter methods\n    public String getOrderId() {\n        return orderId;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public Product[] getProducts() {\n        return products;\n    }\n\n    public double getTotalAmount() {\n        return totalAmount;\n    }\n\n    // Method to add a product to the order\n    public void addProduct(Product product) {\n        if (product != null && product.validateID(product.getProductId()) && productCount < products.length) {\n            products[productCount++] = product;\n            calculateTotalAmount();\n        }\n    }\n\n    // Method to calculate total amount\n    private void calculateTotalAmount() {\n        totalAmount = 0;\n        for (Product product : products) {\n            if (product != null) {\n                totalAmount += product.getPrice();\n            }\n        }\n    }\n\n    // Method to display order details\n    public void displayOrderDetails() {\n        System.out.println(\"Order ID: \" + orderId);\n        System.out.println(\"Customer ID: \" + customer.getCustomerId() + \", Name: \" + customer.getName());\n        System.out.println(\"Products:\");\n        for (Product product : products) {\n            if (product != null) {\n                System.out.println(\"  ID: \" + product.getProductId() + \", Name: \" + product.getName() + \", Price: $\" + product.getPrice());\n            }\n        }\n        System.out.println(\"Total Amount: $\" + totalAmount);\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Create Customer\n        Customer customer = new Customer(\"John Doe\", \"john.doe@example.com\");\n\n        // Create Products\n        Product product1 = new Product(\"Laptop\", 999.99);\n        Product product2 = new Product(\"Smartphone\", 599.99);\n        Product product3 = new Product(\"Headphones\", 199.99);\n\n        // Create Order and add Products\n        Order order = new Order(customer);\n        order.addProduct(product1);\n        order.addProduct(product2);\n        order.addProduct(product3);\n\n        // Display Order Details\n        order.displayOrderDetails();\n\n        // Validate IDs\n        System.out.println(\"Valid Product ID? \" + product1.validateID(product1.getProductId()));\n        System.out.println(\"Valid Customer ID? \" + customer.validateID(customer.getCustomerId()));\n        System.out.println(\"Valid Order ID? \" + order.validateID(order.getOrderId()));\n    }\n}\n"
    },
    {
        "instruction": "Develop a Java program that includes an Employee class, a Department class, and a Company class, related through inheritance, aggregation, or association. Ensure all methods and instance variables meet real-life business scenarios, including methods such as generateID, validateID, and other necessary calculations. The program should support adding employees to departments, adding departments to companies, and validating IDs.",
        "input": "",
        "output": "class Employee {\n    private String employeeId;\n    private String name;\n    private double salary;\n    private static int employeeCounter = 1;\n\n    public Employee(String name, double salary) {\n        this.name = name;\n        this.salary = salary;\n        this.employeeId = generateID(name);\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + employeeCounter++;\n    }\n\n    public String getEmployeeId() {\n        return employeeId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    public boolean validateID(String id) {\n        return id.matches(\"[A-Z]{3}-\\d+\");\n    }\n}\n\nclass Department extends Employee {\n    private String departmentId;\n    private Employee[] employees;\n    private int employeeCount;\n    private static int departmentCounter = 1;\n\n    public Department(String name) {\n        super(name, 0);\n        this.employees = new Employee[10];\n        this.departmentId = generateID(name);\n        this.employeeCount = 0;\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + departmentCounter++;\n    }\n\n    public String getDepartmentId() {\n        return departmentId;\n    }\n\n    public Employee[] getEmployees() {\n        return employees;\n    }\n\n    public void addEmployee(Employee employee) {\n        if (employee != null && validateID(employee.getEmployeeId()) && employeeCount < employees.length) {\n            employees[employeeCount++] = employee;\n        }\n    }\n\n    public boolean validateID(String id) {\n        return id.matches(\"[A-Z]{3}-\\d+\");\n    }\n}\n\nclass Company extends Department {\n    private String companyId;\n    private Department[] departments;\n    private int departmentCount;\n    private static int companyCounter = 1;\n\n    public Company(String name) {\n        super(name);\n        this.departments = new Department[10];\n        this.companyId = generateID(name);\n        this.departmentCount = 0;\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + companyCounter++;\n    }\n\n    public String getCompanyId() {\n        return companyId;\n    }\n\n    public Department[] getDepartments() {\n        return departments;\n    }\n\n    public void addDepartment(Department department) {\n        if (department != null && validateID(department.getDepartmentId()) && departmentCount < departments.length) {\n            departments[departmentCount++] = department;\n        }\n    }\n\n    public boolean validateID(String id) {\n        return id.matches(\"[A-Z]{3}-\\d+\");\n    }\n\n    public void displayCompanyDetails() {\n        System.out.println(\"Company ID: \" + companyId + \", Name: \" + getName());\n        for (Department dept : departments) {\n            if (dept != null) {\n                System.out.println(\"  Department ID: \" + dept.getDepartmentId() + \", Name: \" + dept.getName());\n                for (Employee emp : dept.getEmployees()) {\n                    if (emp != null) {\n                        System.out.println(\"    Employee ID: \" + emp.getEmployeeId() + \", Name: \" + emp.getName() + \", Salary: $\" + emp.getSalary());\n                    }\n                }\n            }\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create Company\n        Company company = new Company(\"Tech Innovations\");\n\n        // Create Departments\n        Department hrDept = new Department(\"Human Resources\");\n        Department itDept = new Department(\"Information Technology\");\n\n        // Create Employees\n        Employee emp1 = new Employee(\"Alice Johnson\", 60000);\n        Employee emp2 = new Employee(\"Bob Smith\", 75000);\n        Employee emp3 = new Employee(\"Carol Williams\", 70000);\n        Employee emp4 = new Employee(\"David Brown\", 65000);\n\n        // Add Employees to Departments\n        hrDept.addEmployee(emp1);\n        hrDept.addEmployee(emp2);\n        itDept.addEmployee(emp3);\n        itDept.addEmployee(emp4);\n\n        // Add Departments to Company\n        company.addDepartment(hrDept);\n        company.addDepartment(itDept);\n\n        // Display Company Details\n        company.displayCompanyDetails();\n\n        // Validate IDs\n        System.out.println(\"Valid Employee ID? \" + emp1.validateID(emp1.getEmployeeId()));\n        System.out.println(\"Valid Department ID? \" + hrDept.validateID(hrDept.getDepartmentId()));\n        System.out.println(\"Valid Company ID? \" + company.validateID(company.getCompanyId()));\n    }\n}\n"
    },
    {
        "instruction": "Develop a Java code to implement a Social Media Platform. The platform should allow users to create posts, follow other users, and interact with posts through likes and comments.",
        "input": "",
        "output": "public class User {\n    private String userId;\n    private String username;\n    private String email;\n    private User follower;\n    private User following;\n    private static int userCounter = 1;\n\n    public User(String username, String email) {\n        this.username = username;\n        this.email = email;\n        this.userId = generateID(username);\n    }\n\n    private String generateID(String username) {\n        return username.substring(0, 3).toUpperCase() + userCounter++;\n    }\n\n    public String getUserId() {\n        return userId;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public User getFollower() {\n        return follower;\n    }\n\n    public User getFollowing() {\n        return following;\n    }\n\n    public void setFollower(User follower) {\n        this.follower = follower;\n    }\n\n    public void setFollowing(User following) {\n        this.following = following;\n    }\n\n    public void createPost(String content) {\n        Post post = new Post(this, content);\n        System.out.println(username + \" has created a new post:\\n\" + content + \"\\n\");\n    }\n}\n\nclass Post extends User {\n    private String postId;\n    private String content;\n    private int likes;\n    private String comment;\n    private static int postCounter = 1;\n\n    public Post(User user, String content) {\n        super(user.getUsername(), user.getEmail());\n        this.content = content;\n        this.postId = generateID(user);\n    }\n\n    private String generateID(User user) {\n        return user.getUsername().substring(0, 3).toUpperCase() + postCounter++;\n    }\n\n    public String getPostId() {\n        return postId;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public int getLikes() {\n        return likes;\n    }\n\n    public String getComment() {\n        return comment;\n    }\n\n    public void addLike() {\n        likes++;\n    }\n\n    public void addComment(String comment) {\n        this.comment = comment;\n    }\n}\n\nclass SocialNetwork {\n    private User[] users;\n    private int size;\n\n    public SocialNetwork(int capacity) {\n        users = new User[capacity];\n        size = 0;\n    }\n\n    public void addUser(User user) {\n        users[size++] = user;\n    }\n\n    public User[] getUsers() {\n        return users;\n    }\n}\n\npublic class SocialMediaPlatformMain {\n    public static void main(String[] args) {\n        SocialNetwork socialNetwork = new SocialNetwork(2);\n        User user1 = new User(\"Alice\", \"alice@example.com\");\n        User user2 = new User(\"Bob\", \"bob@example.com\");\n        socialNetwork.addUser(user1);\n        socialNetwork.addUser(user2);\n        user1.setFollowing(user2);\n        user2.setFollower(user1);\n        user1.createPost(\"Hello, this is my first post!\");\n        user2.createPost(\"Just chilling out!\");\n        Post post1 = new Post(user1, \"Hello, this is my first post!\");\n        post1.addLike();\n        post1.addLike();\n        post1.addComment(\"Great post, Alice!\");\n        displayUserProfile(user1);\n        displayUserProfile(user2);\n    }\n\n    public static void displayUserProfile(User user) {\n        System.out.println(\"User Profile: \" + user.getUsername());\n        System.out.println(\"User ID: \" + user.getUserId());\n        System.out.println(\"Email: \" + user.getEmail());\n        if (user.getFollower() != null) {\n            System.out.println(\"Follower: \" + user.getFollower().getUsername());\n        }\n        if (user.getFollowing() != null) {\n            System.out.println(\"Following: \" + user.getFollowing().getUsername());\n        }\n        System.out.println(\"----------\");\n    }\n}\n"
    },
    {
        "instruction": "Write a Java code to implement an Inventory Management System with classes for Product, Supplier, and Order, allowing management of products, suppliers, and orders.",
        "input": "",
        "output": "public class Product {\n    private String productId;\n    private String name;\n    private String description;\n    private double price;\n    private int quantityInStock;\n    private static int productCounter = 1;\n\n    public Product(String name, String description, double price, int quantityInStock) {\n        this.name = name;\n        this.description = description;\n        this.price = price;\n        this.quantityInStock = quantityInStock;\n        this.productId = generateID(name);\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + productCounter++;\n    }\n\n    public String getProductId() {\n        return productId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public int getQuantityInStock() {\n        return quantityInStock;\n    }\n\n    public void updateStock(int quantity) {\n        this.quantityInStock += quantity;\n    }\n}\n\nclass Supplier {\n    private String supplierId;\n    private String name;\n    private String contactInfo;\n    private static int supplierCounter = 1;\n\n    public Supplier(String name, String contactInfo) {\n        this.name = name;\n        this.contactInfo = contactInfo;\n        this.supplierId = generateID(name);\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + supplierCounter++;\n    }\n\n    public String getSupplierId() {\n        return supplierId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getContactInfo() {\n        return contactInfo;\n    }\n}\n\nclass Order extends Product {\n    private String orderId;\n    private int quantityOrdered;\n    private Supplier supplier;\n    private static int orderCounter = 1;\n\n    public Order(String name, String description, double price, int quantityInStock, int quantityOrdered, Supplier supplier) {\n        super(name, description, price, quantityInStock);\n        this.quantityOrdered = quantityOrdered;\n        this.supplier = supplier;\n        this.orderId = generateID();\n    }\n\n    private String generateID() {\n        return supplier.getName().substring(0, 3).toUpperCase() + orderCounter++;\n    }\n\n    public String getOrderId() {\n        return orderId;\n    }\n\n    public int getQuantityOrdered() {\n        return quantityOrdered;\n    }\n\n    public Supplier getSupplier() {\n        return supplier;\n    }\n\n    public void updateStock() {\n        int updatedStock = getQuantityInStock() + quantityOrdered;\n        setQuantityInStock(updatedStock);\n    }\n}\n\npublic class InventoryManagementMain {\n    public static void main(String[] args) {\n        Product product1 = new Product(\"Laptop\", \"High-performance laptop\", 1200.00, 10);\n        Product product2 = new Product(\"Smartphone\", \"Latest smartphone model\", 800.00, 20);\n        Supplier supplier1 = new Supplier(\"ABC Electronics\", \"contact@abcelectronics.com\");\n        Supplier supplier2 = new Supplier(\"XYZ Gadgets\", \"contact@xyzgadgets.com\");\n        Order order1 = new Order(\"Laptop\", \"High-performance laptop\", 1200.00, 10, 5, supplier1);\n        Order order2 = new Order(\"Smartphone\", \"Latest smartphone model\", 800.00, 20, 10, supplier2);\n        processOrder(order1);\n        processOrder(order2);\n        displayInventory(product1);\n        displayInventory(product2);\n    }\n\n    public static void processOrder(Order order) {\n        System.out.println(\"Processing order \" + order.getOrderId() + \" for \" + order.getQuantityOrdered() +\n                \" units of \" + order.getName() + \" from supplier: \" + order.getSupplier().getName());\n        order.updateStock();\n        System.out.println(\"Order processed successfully.\\n\");\n    }\n\n    public static void displayInventory(Product product) {\n        System.out.println(\"Inventory Details for \" + product.getName() + \":\");\n        System.out.println(\"Product ID: \" + product.getProductId());\n        System.out.println(\"Name: \" + product.getName());\n        System.out.println(\"Description: \" + product.getDescription());\n        System.out.println(\"Price: $\" + product.getPrice());\n        System.out.println(\"Quantity in Stock: \" + product.getQuantityInStock());\n        System.out.println(\"-------------------------\");\n    }\n}\n"
    },
    {
        "instruction": "Write a Java program to implement an Investing in a Rental System. The system should allow investors to manage rental properties, tenants, and rental transactions.",
        "input": "",
        "output": "public class Property {\n    private String propertyId;\n    private String address;\n    private double rentalPrice;\n    private int numBedrooms;\n    private int numBathrooms;\n    private static int propertyCounter = 1;\n\n    public Property(String address, double rentalPrice, int numBedrooms, int numBathrooms) {\n        this.address = address;\n        this.rentalPrice = rentalPrice;\n        this.numBedrooms = numBedrooms;\n        this.numBathrooms = numBathrooms;\n        this.propertyId = generateID(address);\n    }\n\n    private String generateID(String address) {\n        return address.substring(0, 3).toUpperCase() + propertyCounter++;\n    }\n\n    public String getPropertyId() {\n        return propertyId;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public double getRentalPrice() {\n        return rentalPrice;\n    }\n\n    public int getNumBedrooms() {\n        return numBedrooms;\n    }\n\n    public int getNumBathrooms() {\n        return numBathrooms;\n    }\n}\n\nclass Tenant {\n    private String tenantId;\n    private String name;\n    private String email;\n    private static int tenantCounter = 1;\n\n    public Tenant(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.tenantId = generateID(name);\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + tenantCounter++;\n    }\n\n    public String getTenantId() {\n        return tenantId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n}\n\nclass RentalTransaction extends Property {\n    private String transactionId;\n    private Tenant tenant;\n    private Date transactionDate;\n    private static int transactionCounter = 1;\n\n    public RentalTransaction(String address, double rentalPrice, int numBedrooms, int numBathrooms, Tenant tenant) {\n        super(address, rentalPrice, numBedrooms, numBathrooms);\n        this.tenant = tenant;\n        this.transactionDate = new Date();\n        this.transactionId = generateID(address);\n    }\n\n    private String generateID(String address) {\n        return address.substring(0, 3).toUpperCase() + tenant.getName().substring(0, 3).toUpperCase() + transactionCounter++;\n    }\n\n    public String getTransactionId() {\n        return transactionId;\n    }\n\n    public Tenant getTenant() {\n        return tenant;\n    }\n\n    public Date getTransactionDate() {\n        return transactionDate;\n    }\n\n    public int calculateDuration(Date endDate) {\n        long duration = endDate.getTime() - transactionDate.getTime();\n        return (int) (duration / (1000 * 60 * 60 * 24));\n    }\n}\n\npublic class InvestingRentalSystem {\n    public static void main(String[] args) {\n        Property property1 = new Property(\"123 Main St\", 1500.00, 3, 2);\n        Property property2 = new Property(\"456 Oak St\", 2000.00, 4, 3);\n        Property property3 = new Property(\"789 Elm St\", 1800.00, 2, 1);\n        Tenant tenant1 = new Tenant(\"John Doe\", \"john@example.com\");\n        Tenant tenant2 = new Tenant(\"Alice Smith\", \"alice@example.com\");\n        RentalTransaction transaction1 = new RentalTransaction(\"123 Main St\", 1500.00, 3, 2, tenant1);\n        RentalTransaction transaction2 = new RentalTransaction(\"456 Oak St\", 2000.00, 4, 3, tenant2);\n        displayTransactionDetails(transaction1);\n        displayTransactionDetails(transaction2);\n    }\n\n    public static void displayTransactionDetails(RentalTransaction transaction) {\n        System.out.println(\"Transaction ID: \" + transaction.getTransactionId());\n        System.out.println(\"Tenant: \" + transaction.getTenant().getName() + \" (ID: \" + transaction.getTenant().getTenantId() + \")\");\n        System.out.println(\"Property Address: \" + transaction.getAddress() + \" (ID: \" + transaction.getPropertyId() + \")\");\n        System.out.println(\"Transaction Date: \" + transaction.getTransactionDate());\n        System.out.println();\n    }\n}\n"
    },
    {
        "instruction": "Write a Java program to implement a Movie Ticket Booking System. The system should facilitate the booking of movie tickets for customers, allowing them to select movies and showtimes.",
        "input": "",
        "output": "public class Movie {\n    private String movieId;\n    private String title;\n    private String genre;\n    private int duration;\n    private static int movieCounter = 1;\n\n    public Movie(String title, String genre, int duration) {\n        this.title = title;\n        this.genre = genre;\n        this.duration = duration;\n        this.movieId = generateID(title);\n    }\n\n    private String generateID(String title) {\n        return title.substring(0, 3).toUpperCase() + movieCounter++;\n    }\n\n    public String getMovieId() {\n        return movieId;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getGenre() {\n        return genre;\n    }\n\n    public int getDuration() {\n        return duration;\n    }\n}\n\nclass Customer {\n    private String customerId;\n    private String name;\n    private String email;\n    private static int customerCounter = 1;\n\n    public Customer(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.customerId = generateID(name);\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + customerCounter++;\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n}\n\nclass Ticket extends Movie {\n    private String ticketId;\n    private Customer customer;\n    private Date showTime;\n    private static int ticketCounter = 1;\n\n    public Ticket(String title, String genre, int duration, Customer customer, Date showTime) {\n        super(title, genre, duration);\n        this.customer = customer;\n        this.showTime = showTime;\n        this.ticketId = generateID(title, customer);\n    }\n\n    private String generateID(String title, Customer customer) {\n        return title.substring(0, 3).toUpperCase() + customer.getName().substring(0, 3).toUpperCase() + ticketCounter++;\n    }\n\n    public String getTicketId() {\n        return ticketId;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public Date getShowTime() {\n        return showTime;\n    }\n}\n\npublic class MovieTicketBookingSystem {\n    public static void main(String[] args) {\n        // Create movies\n        Movie movie1 = new Movie(\"Inception\", \"Sci-Fi\", 148);\n        Movie movie2 = new Movie(\"The Shawshank Redemption\", \"Drama\", 142);\n\n        // Create customers\n        Customer customer1 = new Customer(\"John Doe\", \"john@example.com\");\n        Customer customer2 = new Customer(\"Alice Smith\", \"alice@example.com\");\n\n        // Create tickets\n        Date showTime1 = new Date();\n        Date showTime2 = new Date(showTime1.getTime() + 2 * 60 * 60 * 1000); // 2 hours later\n        Ticket ticket1 = new Ticket(\"Inception\", \"Sci-Fi\", 148, customer1, showTime1);\n        Ticket ticket2 = new Ticket(\"The Shawshank Redemption\", \"Drama\", 142, customer2, showTime2);\n\n        // Display ticket details\n        displayTicketDetails(ticket1);\n        displayTicketDetails(ticket2);\n    }\n\n    // Method to display ticket details\n    public static void displayTicketDetails(Ticket ticket) {\n        System.out.println(\"Ticket ID: \" + ticket.getTicketId());\n        System.out.println(\"Movie: \" + ticket.getTitle());\n        System.out.println(\"Genre: \" + ticket.getGenre());\n        System.out.println(\"Duration: \" + ticket.getDuration() + \" minutes\");\n        System.out.println(\"Customer: \" + ticket.getCustomer().getName());\n        System.out.println(\"Email: \" + ticket.getCustomer().getEmail());\n        System.out.println(\"Show Time: \" + ticket.getShowTime());\n        System.out.println();\n    }\n}"
    },
    {
        "instruction": "Develop a java code for a Restaurant Management System to streamline operations at a restaurant. The system should facilitate the management of menu items, orders, and reservations efficiently.",
        "input": "",
        "output": "public class MenuItem {\n    private String itemId;\n    private String name;\n    private String description;\n    private double price;\n    private String category;\n    private static int itemCounter = 1;\n\n    public MenuItem(String name, String description, double price, String category) {\n        this.name = name;\n        this.description = description;\n        this.price = price;\n        this.category = category;\n        this.itemId = generateID(name);\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + itemCounter++;\n    }\n\n    public String getItemId() {\n        return itemId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public String getCategory() {\n        return category;\n    }\n}\n\nclass Customer extends MenuItem {\n    private String customerId;\n    private String phoneNumber;\n    private String email;\n    private static int customerCounter = 1;\n\n    public Customer(String name, String phoneNumber, String email) {\n        super(name, null, 0, null);\n        this.phoneNumber = phoneNumber;\n        this.email = email;\n        this.customerId = generateID(name);\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + customerCounter++;\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n}\n\nclass Order {\n    private String orderId;\n    private MenuItem[] items;\n    private Customer customer;\n    private Date orderDate;\n    private static int orderCounter = 1;\n\n    public Order(Customer customer, MenuItem[] items) {\n        this.customer = customer;\n        this.items = items;\n        this.orderDate = new Date();\n        this.orderId = generateID();\n    }\n\n    private String generateID() {\n        return customer.getCustomerId().substring(0, 3).toUpperCase() + orderCounter++;\n    }\n\n    public String getOrderId() {\n        return orderId;\n    }\n\n    public MenuItem[] getItems() {\n        return items;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public Date getOrderDate() {\n        return orderDate;\n    }\n}\n\npublic class RestaurantManagementSystem {\n    private MenuItem[] menuItems;\n    private Order[] orders;\n    private int menuItemCount;\n    private int orderCount;\n\n    public RestaurantManagementSystem(int maxMenuItems, int maxOrders) {\n        this.menuItems = new MenuItem[maxMenuItems];\n        this.orders = new Order[maxOrders];\n        this.menuItemCount = 0;\n        this.orderCount = 0;\n    }\n\n    public void addMenuItem(MenuItem menuItem) {\n        if (menuItemCount < menuItems.length) {\n            menuItems[menuItemCount++] = menuItem;\n        } else {\n            System.out.println(\"Cannot add more menu items. Menu item limit reached.\");\n        }\n    }\n\n    public void placeOrder(Customer customer, MenuItem[] orderedItems) {\n        if (orderCount < orders.length) {\n            Order order = new Order(customer, orderedItems);\n            orders[orderCount++] = order;\n            System.out.println(\"Order placed by customer: \" + customer.getName() + \" (Order ID: \" + order.getOrderId() + \")\");\n            System.out.println(\"Ordered Items:\");\n            for (MenuItem item : orderedItems) {\n                System.out.println(\"- \" + item.getName() + \" (\" + item.getCategory() + \"): $\" + item.getPrice());\n            }\n        } else {\n            System.out.println(\"Cannot place more orders. Order limit reached.\");\n        }\n    }\n}\n\npublic class RestaurantManagementSystemDemo {\n    public static void main(String[] args) {\n        RestaurantManagementSystem restaurantSystem = new RestaurantManagementSystem(20, 50);\n        MenuItem menuItem1 = new MenuItem(\"Spaghetti Carbonara\", \"Pasta with creamy sauce and bacon\", 12.99, \"Main Course\");\n        MenuItem menuItem2 = new MenuItem(\"Caesar Salad\", \"Romaine lettuce with Caesar dressing and croutons\", 8.99, \"Appetizer\");\n        Customer customer1 = new Customer(\"John Smith\", \"123-456-7890\", \"john@example.com\");\n        Customer customer2 = new Customer(\"Alice Johnson\", \"456-789-0123\", \"alice@example.com\");\n        restaurantSystem.addMenuItem(menuItem1);\n        restaurantSystem.addMenuItem(menuItem2);\n        restaurantSystem.placeOrder(customer1, new MenuItem[]{menuItem1, menuItem2});\n        restaurantSystem.placeOrder(customer2, new MenuItem[]{menuItem2});\n    }\n}\n"
    },
    {
        "instruction": "Develop a Java code for University Course Management System that facilitates the administration of courses, students, and enrollments at a university. The system should allow for registering students for courses, recording grades, and displaying enrollment details.",
        "input": "",
        "output": "public class Course {\n    private String courseCode;\n    private String courseName;\n    private String instructor;\n    private String department;\n    private String schedule;\n    private static int courseCounter = 1;\n\n    public Course(String courseName, String instructor, String department, String schedule) {\n        this.courseName = courseName;\n        this.instructor = instructor;\n        this.department = department;\n        this.schedule = schedule;\n        this.courseCode = generateCode(courseName);\n    }\n\n    private String generateCode(String courseName) {\n        return courseName.substring(0, 3).toUpperCase() + courseCounter++;\n    }\n\n    public String getCourseCode() {\n        return courseCode;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n\n    public String getInstructor() {\n        return instructor;\n    }\n\n    public String getDepartment() {\n        return department;\n    }\n\n    public String getSchedule() {\n        return schedule;\n    }\n\n    public boolean validateCode() {\n        return courseCode != null && courseCode.startsWith(courseName.substring(0, 3).toUpperCase());\n    }\n}\n\nclass Student extends Course {\n    private String studentId;\n    private String name;\n    private String email;\n    private String major;\n    private static int studentCounter = 1;\n\n    public Student(String name, String email, String major) {\n        super(\"\", \"\", \"\", \"\");\n        this.name = name;\n        this.email = email;\n        this.major = major;\n        this.studentId = generateID(name);\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + studentCounter++;\n    }\n\n    public String getStudentId() {\n        return studentId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getMajor() {\n        return major;\n    }\n\n    public boolean validateID() {\n        return studentId != null && studentId.startsWith(name.substring(0, 3).toUpperCase());\n    }\n}\n\nclass Enrollment extends Student {\n    private String enrollmentId;\n    private Date enrollmentDate;\n    private static int enrollmentCounter = 1;\n\n    public Enrollment(String name, String email, String major) {\n        super(name, email, major);\n        this.enrollmentDate = new Date();\n        this.enrollmentId = generateID(name);\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + student.getName().substring(0, 3).toUpperCase() + enrollmentCounter++;\n    }\n\n    public String getEnrollmentId() {\n        return enrollmentId;\n    }\n\n    public Date getEnrollmentDate() {\n        return enrollmentDate;\n    }\n\n    public boolean validateID() {\n        return enrollmentId != null && enrollmentId.startsWith(getCourseName().substring(0, 3).toUpperCase()) && enrollmentId.contains(name.substring(0, 3).toUpperCase());\n    }\n\n    public int calculateCourseDuration(Date endDate) {\n        long duration = endDate.getTime() - enrollmentDate.getTime();\n        return (int) (duration / (1000 * 60 * 60 * 24));\n    }\n}\n\npublic class UniversityCourseManagementSystem {\n    public static void main(String[] args) {\n        Enrollment enrollment1 = new Enrollment(\"Alice Smith\", \"alice@example.com\", \"Computer Science\");\n        Enrollment enrollment2 = new Enrollment(\"Bob Johnson\", \"bob@example.com\", \"Computer Engineering\");\n        displayEnrollmentDetails(enrollment1);\n        displayEnrollmentDetails(enrollment2);\n    }\n\n    public static void displayEnrollmentDetails(Enrollment enrollment) {\n        System.out.println(\"Enrollment ID: \" + enrollment.getEnrollmentId());\n        System.out.println(\"Student: \" + enrollment.getName() + \" (ID: \" + enrollment.getStudentId() + \")\");\n        System.out.println(\"Course: \" + enrollment.getCourseName() + \" (ID: \" + enrollment.getCourseCode() + \")\");\n        System.out.println(\"Enrollment Date: \" + enrollment.getEnrollmentDate());\n        System.out.println();\n    }\n}\n"
    },
    {
        "instruction": "Develop a Java program for a Movie Rental System. The system is designed to manage movies, customers, and rental transactions within a rental service. The program should consist of three main classes: Movie, Customer, and RentalTransaction",
        "input": "",
        "output": "public class Movie {\n    private String movieId;\n    private String title;\n    private String director;\n    private String genre;\n    private int year;\n    private boolean available;\n    private static int movieCounter = 1;\n\n    public Movie(String title, String director, String genre, int year) {\n        this.title = title;\n        this.director = director;\n        this.genre = genre;\n        this.year = year;\n        this.available = true;\n        this.movieId = generateID(title);\n    }\n\n    private String generateID(String title) {\n        return title.substring(0, 3).toUpperCase() + movieCounter++;\n    }\n\n    public String getMovieId() {\n        return movieId;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getDirector() {\n        return director;\n    }\n\n    public String getGenre() {\n        return genre;\n    }\n\n    public int getYear() {\n        return year;\n    }\n\n    public boolean isAvailable() {\n        return available;\n    }\n\n    public void setAvailable(boolean available) {\n        this.available = available;\n    }\n\n    public boolean validateID() {\n        return movieId != null && movieId.startsWith(title.substring(0, 3).toUpperCase());\n    }\n}\n\nclass Customer {\n    private String customerId;\n    private String name;\n    private String email;\n    private static int customerCounter = 1;\n\n    public Customer(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.customerId = generateID(name);\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + customerCounter++;\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public boolean validateID() {\n        return customerId != null && customerId.startsWith(name.substring(0, 3).toUpperCase());\n    }\n}\n\nclass RentalTransaction {\n    private String transactionId;\n    private Movie movie;\n    private Customer customer;\n    private Date rentalDate;\n    private Date returnDate;\n    private static int transactionCounter = 1;\n\n    public RentalTransaction(Movie movie, Customer customer) {\n        this.movie = movie;\n        this.customer = customer;\n        this.rentalDate = new Date();\n        this.transactionId = generateID(customer.getName());\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + transactionCounter++;\n    }\n\n    public String getTransactionId() {\n        return transactionId;\n    }\n\n    public Movie getMovie() {\n        return movie;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public Date getRentalDate() {\n        return rentalDate;\n    }\n\n    public Date getReturnDate() {\n        return returnDate;\n    }\n\n    public void setReturnDate(Date returnDate) {\n        this.returnDate = returnDate;\n    }\n\n    public boolean validateID() {\n        return transactionId != null && transactionId.startsWith(customer.getName().substring(0, 3).toUpperCase());\n    }\n}\n\npublic class MovieRentalSystem {\n    public static void main(String[] args) {\n        Movie movie1 = new Movie(\"Inception\", \"Christopher Nolan\", \"Action\", 2010);\n        Movie movie2 = new Movie(\"The Shawshank Redemption\", \"Frank Darabont\", \"Drama\", 1994);\n        Customer customer1 = new Customer(\"Alice Smith\", \"alice@example.com\");\n        Customer customer2 = new Customer(\"Bob Johnson\", \"bob@example.com\");\n        RentalTransaction transaction1 = new RentalTransaction(movie1, customer1);\n        RentalTransaction transaction2 = new RentalTransaction(movie2, customer2);\n        displayRentalDetails(transaction1);\n        displayRentalDetails(transaction2);\n    }\n\n    public static void displayRentalDetails(RentalTransaction transaction) {\n        System.out.println(\"Transaction ID: \" + transaction.getTransactionId());\n        System.out.println(\"Customer: \" + transaction.getCustomer().getName() + \" (ID: \" + transaction.getCustomer().getCustomerId() + \")\");\n        System.out.println(\"Movie: \" + transaction.getMovie().getTitle() + \" (ID: \" + transaction.getMovie().getMovieId() + \")\");\n        System.out.println(\"Rental Date: \" + transaction.getRentalDate());\n        System.out.println(\"Return Date: \" + transaction.getReturnDate());\n        System.out.println();\n    }\n}\n"
    },
    {
        "instruction": "Develop a Java program for a School Management System. The system is designed to manage students, courses, and enrollments within a school. The program should consist of three main classes: Student, Course, and Enrollment.",
        "input": "",
        "output": "public class Student {\n    private String studentId;\n    private String name;\n    private String email;\n    private static int studentCounter = 1;\n\n    public Student(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.studentId = generateID(name);\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + studentCounter++;\n    }\n\n    public String getStudentId() {\n        return studentId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public boolean validateID() {\n        return studentId != null && studentId.startsWith(name.substring(0, 3).toUpperCase());\n    }\n}\n\nclass Course {\n    private String courseId;\n    private String courseName;\n    private String instructor;\n    private static int courseCounter = 1;\n\n    public Course(String courseName, String instructor) {\n        this.courseName = courseName;\n        this.instructor = instructor;\n        this.courseId = generateID(courseName);\n    }\n\n    private String generateID(String courseName) {\n        return courseName.substring(0, 3).toUpperCase() + courseCounter++;\n    }\n\n    public String getCourseId() {\n        return courseId;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n\n    public String getInstructor() {\n        return instructor;\n    }\n\n    public boolean validateID() {\n        return courseId != null && courseId.startsWith(courseName.substring(0, 3).toUpperCase());\n    }\n}\n\nclass Enrollment extends Course {\n    private String enrollmentId;\n    private Student student;\n    private Date enrollmentDate;\n    private static int enrollmentCounter = 1;\n\n    public Enrollment(String courseName, String instructor, Student student) {\n        super(courseName, instructor);\n        this.student = student;\n        this.enrollmentDate = new Date();\n        this.enrollmentId = generateID(courseName);\n    }\n\n    private String generateID(String courseName) {\n        return courseName.substring(0, 3).toUpperCase() + student.getName().substring(0, 3).toUpperCase() + enrollmentCounter++;\n    }\n\n    public String getEnrollmentId() {\n        return enrollmentId;\n    }\n\n    public Student getStudent() {\n        return student;\n    }\n\n    public Date getEnrollmentDate() {\n        return enrollmentDate;\n    }\n\n    public boolean validateID() {\n        return enrollmentId != null && enrollmentId.startsWith(getCourseName().substring(0, 3).toUpperCase()) && enrollmentId.contains(student.getName().substring(0, 3).toUpperCase());\n    }\n\n    public int calculateCourseDuration(Date endDate) {\n        long duration = endDate.getTime() - enrollmentDate.getTime();\n        return (int) (duration / (1000 * 60 * 60 * 24));\n    }\n}\n\npublic class SchoolManagementSystem {\n    public static void main(String[] args) {\n        Student student1 = new Student(\"Alice Smith\", \"alice@example.com\");\n        Student student2 = new Student(\"Bob Johnson\", \"bob@example.com\");\n        Enrollment enrollment1 = new Enrollment(\"Mathematics\", \"Dr. Allen\", student1);\n        Enrollment enrollment2 = new Enrollment(\"History\", \"Prof. Baker\", student2);\n        displayEnrollmentDetails(enrollment1);\n        displayEnrollmentDetails(enrollment2);\n    }\n\n    public static void displayEnrollmentDetails(Enrollment enrollment) {\n        System.out.println(\"Enrollment ID: \" + enrollment.getEnrollmentId());\n        System.out.println(\"Student: \" + enrollment.getStudent().getName() + \" (ID: \" + enrollment.getStudent().getStudentId() + \")\");\n        System.out.println(\"Course: \" + enrollment.getCourseName() + \" (ID: \" + enrollment.getCourseId() + \")\");\n        System.out.println(\"Instructor: \" + enrollment.getInstructor());\n        System.out.println(\"Enrollment Date: \" + enrollment.getEnrollmentDate());\n        System.out.println();\n    }\n}\n"
    },
    {
        "instruction": "Design a Java program for managing a banking system that includes three main classes: Customer, Account, and Transaction. Establish a relationship between the classes following a specific business scenario. Include functionalities such as generating and validating IDs, calculating transaction fees, and displaying transaction details.",
        "input": "",
        "output": "class Customer {\n    private String customerId;\n    private String name;\n    private String email;\n    private String phone;\n    private static int customerCounter = 1;\n\n    public Customer(String name, String email, String phone) {\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n        this.customerId = generateID();\n    }\n\n    private String generateID() {\n        return name.substring(0, 3).toUpperCase() + customerCounter++;\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public boolean validateID() {\n        return customerId != null && customerId.startsWith(name.substring(0, 3).toUpperCase());\n    }\n}\n\nclass Account {\n    private String accountId;\n    private Customer customer;\n    private double balance;\n    private static int accountCounter = 1;\n\n    public Account(Customer customer, double initialDeposit) {\n        this.customer = customer;\n        this.balance = initialDeposit;\n        this.accountId = generateID();\n    }\n\n    private String generateID() {\n        return customer.getName().substring(0, 3).toUpperCase() + accountCounter++;\n    }\n\n    public String getAccountId() {\n        return accountId;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n        }\n    }\n\n    public void withdraw(double amount) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n        }\n    }\n\n    public boolean validateID() {\n        return accountId != null && accountId.startsWith(customer.getName().substring(0, 3).toUpperCase());\n    }\n}\n\nclass Transaction extends Account {\n    private String transactionId;\n    private double amount;\n    private Date date;\n    private String type; // \"Deposit\" or \"Withdrawal\"\n    private static int transactionCounter = 1;\n\n    public Transaction(Account account, double amount, String type) {\n        super(account.getCustomer(), account.getBalance());\n        this.amount = amount;\n        this.type = type;\n        this.date = new Date();\n        this.transactionId = generateID();\n    }\n\n    private String generateID() {\n        return getAccountId().substring(0, 3).toUpperCase() + transactionCounter++;\n    }\n\n    public String getTransactionId() {\n        return transactionId;\n    }\n\n    public double getAmount() {\n        return amount;\n    }\n\n    public Date getDate() {\n        return date;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public boolean validateID() {\n        return transactionId != null && transactionId.startsWith(getAccountId().substring(0, 3).toUpperCase());\n    }\n\n    public double calculateTransactionFee() {\n        return type.equals(\"Withdrawal\") ? amount * 0.02 : 0;\n    }\n}\n\npublic class BankingSystem {\n    public static void main(String[] args) {\n        Customer customer = new Customer(\"John Doe\", \"john@example.com\", \"123-456-7890\");\n        Account account = new Account(customer, 5000.00);\n        account.deposit(1500.00);\n        Transaction depositTransaction = new Transaction(account, 1500.00, \"Deposit\");\n        account.withdraw(2000.00);\n        Transaction withdrawalTransaction = new Transaction(account, 2000.00, \"Withdrawal\");\n        displayTransactionDetails(depositTransaction);\n        displayTransactionDetails(withdrawalTransaction);\n    }\n\n    public static void displayTransactionDetails(Transaction transaction) {\n        System.out.println(\"Transaction ID: \" + transaction.getTransactionId());\n        System.out.println(\"Account ID: \" + transaction.getAccountId());\n        System.out.println(\"Customer: \" + transaction.getCustomer().getName() + \" (ID: \" + transaction.getCustomer().getCustomerId() + \")\");\n        System.out.println(\"Amount: \" + transaction.getAmount());\n        System.out.println(\"Date: \" + transaction.getDate());\n        System.out.println(\"Type: \" + transaction.getType());\n        System.out.println(\"Transaction Fee: $\" + transaction.calculateTransactionFee());\n    }\n}"
    },
    {
        "instruction": "Design a Java program for managing a hospital management system to streamline patient appointments with doctors. Implement three classes: Patient, Doctor, and Appointment, each serving a specific purpose within the system. Patients can schedule appointments with doctors, and the system maintains essential details such as patient information, doctor details, and appointment dates.",
        "input": "",
        "output": "class Patient {\n    private String patientId;\n    private String name;\n    private int age;\n    private String gender;\n    private String medicalCondition;\n    private static int patientCounter = 1;\n\n    public Patient(String name, int age, String gender, String medicalCondition) {\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n        this.medicalCondition = medicalCondition;\n        this.patientId = generateID(name);\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + patientCounter++;\n    }\n\n    public String getPatientId() {\n        return patientId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String getGender() {\n        return gender;\n    }\n\n    public String getMedicalCondition() {\n        return medicalCondition;\n    }\n\n    public boolean validateID() {\n        return patientId != null && patientId.startsWith(\"PAT-\");\n    }\n}\n\nclass Doctor extends Patient {\n    private String doctorId;\n    private String specialization;\n    private static int doctorCounter = 1;\n\n    public Doctor(String name, String specialization) {\n        super(name, 0, \"\", \"\");\n        this.specialization = specialization;\n        this.doctorId = generateID(name);\n    }\n\n    private String generateID(String name) {\n        return name.substring(0, 3).toUpperCase() + doctorCounter++;\n    }\n\n    public String getDoctorId() {\n        return doctorId;\n    }\n\n    public String getSpecialization() {\n        return specialization;\n    }\n\n    public boolean validateID() {\n        return doctorId != null && doctorId.startsWith(\"DOC-\");\n    }\n}\n\nclass Appointment {\n    private String appointmentId;\n    private Patient patient;\n    private Doctor doctor;\n    private Date date;\n    private static int appointmentCounter = 1;\n\n    public Appointment(Patient patient, Doctor doctor, Date date) {\n        this.patient = patient;\n        this.doctor = doctor;\n        this.date = date;\n        this.appointmentId = generateID();\n    }\n\n    private String generateID() {\n        return \"APPT-\" + appointmentCounter++;\n    }\n\n    public String getAppointmentId() {\n        return appointmentId;\n    }\n\n    public Patient getPatient() {\n        return patient;\n    }\n\n    public Doctor getDoctor() {\n        return doctor;\n    }\n\n    public Date getDate() {\n        return date;\n    }\n\n    public boolean validateID() {\n        return appointmentId != null && appointmentId.startsWith(\"APPT-\");\n    }\n}\n\npublic class HospitalManagementSystem {\n    public static void main(String[] args) {\n        Patient patient = new Patient(\"John Doe\", 35, \"Male\", \"Fever\");\n        Doctor doctor = new Doctor(\"Dr. Smith\", \"Internal Medicine\");\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(Calendar.YEAR, 2024);\n        calendar.set(Calendar.MONTH, Calendar.MAY);\n        calendar.set(Calendar.DAY_OF_MONTH, 15);\n        Date date = calendar.getTime();\n        Appointment appointment = new Appointment(patient, doctor, date);\n        displayAppointmentDetails(appointment);\n    }\n\n    public static void displayAppointmentDetails(Appointment appointment) {\n        System.out.println(\"Appointment ID: \" + appointment.getAppointmentId());\n        System.out.println(\"Patient: \" + appointment.getPatient().getName() + \" (ID: \" + appointment.getPatient().getPatientId() + \")\");\n        System.out.println(\"Doctor: \" + appointment.getDoctor().getName() + \" (ID: \" + appointment.getDoctor().getDoctorId() + \")\");\n        System.out.println(\"Date: \" + appointment.getDate());\n    }\n}"
    },
    {
        "instruction": "Design a Java program for managing a hotel management system with classes for Room, Guest, and Reservation. Implement a specific relationship between the classes and functionalities such as generating and validating IDs, checking in and out, and displaying reservation details.",
        "input": "",
        "output": "class Room {\n    private String roomId;\n    private int capacity;\n    private boolean available;\n\n    public Room(int capacity) {\n        this.capacity = capacity;\n        this.roomId = generateID();\n        this.available = true;\n    }\n\n    private static int roomCounter = 1;\n\n    private String generateID() {\n        return \"ROOM-\" + roomCounter++;\n    }\n\n    public String getRoomId() {\n        return roomId;\n    }\n\n    public int getCapacity() {\n        return capacity;\n    }\n\n    public boolean isAvailable() {\n        return available;\n    }\n\n    public void setAvailable(boolean available) {\n        this.available = available;\n    }\n}\n\nclass Guest {\n    private String guestId;\n    private String name;\n    private String email;\n    private String phone;\n\n    public Guest(String name, String email, String phone) {\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n        this.guestId = generateID();\n    }\n\n    private static int guestCounter = 1;\n\n    private String generateID() {\n        return \"GUEST-\" + guestCounter++;\n    }\n\n    public String getGuestId() {\n        return guestId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n}\n\nclass Reservation {\n    private String reservationId;\n    private Room room;\n    private Guest guest;\n    private Date checkInDate;\n    private Date checkOutDate;\n    private boolean checkedIn;\n    private boolean checkedOut;\n\n    public Reservation(Room room, Guest guest, Date checkInDate, Date checkOutDate) {\n        this.room = room;\n        this.guest = guest;\n        this.checkInDate = checkInDate;\n        this.checkOutDate = checkOutDate;\n        this.reservationId = generateID();\n        this.checkedIn = false;\n        this.checkedOut = false;\n    }\n\n    private static int reservationCounter = 1;\n\n    private String generateID() {\n        return \"RES-\" + reservationCounter++;\n    }\n\n    public String getReservationId() {\n        return reservationId;\n    }\n\n    public Room getRoom() {\n        return room;\n    }\n\n    public Guest getGuest() {\n        return guest;\n    }\n\n    public Date getCheckInDate() {\n        return checkInDate;\n    }\n\n    public Date getCheckOutDate() {\n        return checkOutDate;\n    }\n\n    public boolean isCheckedIn() {\n        return checkedIn;\n    }\n\n    public boolean isCheckedOut() {\n        return checkedOut;\n    }\n\n    public void checkIn() {\n        this.checkedIn = true;\n    }\n\n    public void checkOut() {\n        this.checkedOut = true;\n    }\n\n    public void displayReservationDetails() {\n        System.out.println(\"Reservation ID: \" + reservationId);\n        System.out.println(\"Guest: \" + guest.getName());\n        System.out.println(\"Room: \" + room.getRoomId() + \", Capacity: \" + room.getCapacity());\n        System.out.println(\"Check-in Date: \" + checkInDate);\n        System.out.println(\"Check-out Date: \" + checkOutDate);\n        if (checkedIn) {\n            System.out.println(\"Checked-in: Yes\");\n        } else {\n            System.out.println(\"Checked-in: No\");\n        }\n        if (checkedOut) {\n            System.out.println(\"Checked-out: Yes\");\n        } else {\n            System.out.println(\"Checked-out: No\");\n        }\n    }\n}\n\npublic class HotelManagementSystem {\n    public static void main(String[] args) {\n        // Create Room\n        Room room1 = new Room(2);\n\n        // Create Guest\n        Guest guest1 = new Guest(\"Alice Johnson\", \"alice.johnson@example.com\", \"1234567890\");\n\n        // Create Reservation\n        Date checkInDate = new Date();\n        Calendar cal = Calendar.getInstance();\n        cal.add(Calendar.DAY_OF_MONTH, 3); // Check-out in 3 days\n        Date checkOutDate = cal.getTime();\n        Reservation reservation1 = new Reservation(room1, guest1, checkInDate, checkOutDate);\n\n        // Display Reservation Details\n        reservation1.displayReservationDetails();\n    }\n}"
    },
    {
        "instruction": "Implement a Java program simulating a car rental system. Design classes for Car, Customer, and Rental, ensuring they meet specific business requirements. Establish a relationship between the classes following a relevant business scenario.",
        "input": "",
        "output": "class Car {\n    private static int carCounter = 1;\n    private String carId;\n    private String brand;\n    private String model;\n    private double rentalRatePerDay;\n    private boolean available;\n\n    public Car(String brand, String model, double rentalRatePerDay) {\n        this.brand = brand;\n        this.model = model;\n        this.rentalRatePerDay = rentalRatePerDay;\n        this.carId = generateID();\n        this.available = true;\n    }\n\n    private String generateID() {\n        return \"CAR-\" + carCounter++;\n    }\n\n    public String getCarId() {\n        return carId;\n    }\n\n    public String getBrand() {\n        return brand;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public double getRentalRatePerDay() {\n        return rentalRatePerDay;\n    }\n\n    public boolean isAvailable() {\n        return available;\n    }\n\n    public void setAvailable(boolean available) {\n        this.available = available;\n    }\n}\n\nclass Customer {\n    private static int customerCounter = 1;\n    private String customerId;\n    private String name;\n    private String email;\n    private String phone;\n\n    public Customer(String name, String email, String phone) {\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n        this.customerId = generateID();\n    }\n\n    private String generateID() {\n        return \"CUST-\" + customerCounter++;\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n}\n\nclass Rental extends Car {\n    private static int rentalCounter = 1;\n    private String rentalId;\n    private Customer customer;\n    private Date startDate;\n    private Date endDate;\n    private double totalAmount;\n\n    public Rental(String brand, String model, double rentalRatePerDay, Customer customer, Date startDate, Date endDate) {\n        super(brand, model, rentalRatePerDay);\n        this.customer = customer;\n        this.startDate = startDate;\n        this.endDate = endDate;\n        this.rentalId = generateID();\n        calculateTotalAmount();\n    }\n\n    private String generateID() {\n        return \"RENT-\" + rentalCounter++;\n    }\n\n    public String getRentalId() {\n        return rentalId;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public Date getStartDate() {\n        return startDate;\n    }\n\n    public Date getEndDate() {\n        return endDate;\n    }\n\n    public double getTotalAmount() {\n        return totalAmount;\n    }\n\n    private void calculateTotalAmount() {\n        long diffInMillies = Math.abs(endDate.getTime() - startDate.getTime());\n        long diffInDays = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);\n        totalAmount = diffInDays * getRentalRatePerDay();\n    }\n\n    public void displayRentalDetails() {\n        System.out.println(\"Rental ID: \" + rentalId);\n        System.out.println(\"Car: \" + getBrand() + \" \" + getModel());\n        System.out.println(\"Customer: \" + customer.getName());\n        System.out.println(\"Start Date: \" + startDate);\n        System.out.println(\"End Date: \" + endDate);\n        System.out.println(\"Total Amount: $\" + totalAmount);\n    }\n}\n\npublic class CarRentalSystem {\n    public static void main(String[] args) {\n        // Create Rental\n        Customer customer1 = new Customer(\"John Doe\", \"john.doe@example.com\", \"1234567890\");\n        Date startDate = new Date();\n        Calendar cal = Calendar.getInstance();\n        cal.add(Calendar.DAY_OF_MONTH, 7); // Rental for 7 days\n        Date endDate = cal.getTime();\n        Rental rental1 = new Rental(\"Toyota\", \"Camry\", 50.0, customer1, startDate, endDate);\n\n        // Display Rental Details\n        rental1.displayRentalDetails();\n    }\n}\n"
    },
    {
        "instruction": "Design a Java program for managing a library management system. Implement three classes: Book, LibraryMember, and LibraryLoan. Establish a relationship between the classes following a specific business scenario. Include functionalities such as generating and validating IDs, checking out and returning books, calculating late fees, and displaying loan details.",
        "input": "",
        "output": "class Book {\n    private static int bookCounter = 1;\n    private String isbn;\n    private String title;\n    private String author;\n\n    public Book(String title, String author, String isbn) {\n        this.title = title;\n        this.author = author;\n        this.isbn = isbn;\n    }\n\n    private String generateId() {\n        return \"BOK-\" + bookCounter++;\n    }\n\n    public String getIsbn() {\n        return isbn;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n}\n\nclass LibraryMember {\n    private static int memberCounter = 1;\n    private String memberId;\n    private String name;\n\n    public LibraryMember(String name) {\n        this.name = name;\n        this.memberId = generateId();\n    }\n\n    private String generateId() {\n        return \"MEM-\" + memberCounter++;\n    }\n\n    public String getMemberId() {\n        return memberId;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\nclass LibraryLoan {\n    private static int loanCounter = 1;\n    private String loanId;\n    private Book book;\n    private LibraryMember member;\n    private Date dueDate;\n\n    public LibraryLoan(Book book, LibraryMember member, Date dueDate) {\n        this.book = book;\n        this.member = member;\n        this.dueDate = dueDate;\n        this.loanId = generateId();\n    }\n\n    private String generateId() {\n        return \"LOAN-\" + loanCounter++;\n    }\n\n    public String getLoanId() {\n        return loanId;\n    }\n\n    public Book getBook() {\n        return book;\n    }\n\n    public LibraryMember getMember() {\n        return member;\n    }\n\n    public Date getDueDate() {\n        return dueDate;\n    }\n\n    public void returnBook() {\n        // Set the return date\n        Date currentDate = new Date();\n        long diffInMillies = Math.abs(currentDate.getTime() - dueDate.getTime());\n        long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);\n        if (currentDate.after(dueDate)) {\n            double lateFee = calculateLateFee(diff);\n            System.out.println(\"Late fee charged: $\" + lateFee);\n        }\n        // Logic for returning a book (e.g., updating database)\n        System.out.println(\"Book returned successfully.\");\n    }\n\n    public double calculateLateFee(long daysLate) {\n        // Assuming late fee is $1 per day\n        return daysLate * 1.0;\n    }\n\n    public void displayLoanDetails() {\n        // Display loan details\n        System.out.println(\"Loan ID: \" + loanId);\n        System.out.println(\"Book Title: \" + book.getTitle());\n        System.out.println(\"Member Name: \" + member.getName());\n        System.out.println(\"Due Date: \" + dueDate.toString());\n    }\n}\n\npublic class LibraryManagementSystem {\n    public static void main(String[] args) {\n        // Create Book\n        Book book1 = new Book(\"Java Programming\", \"John Doe\", \"978-0134685991\");\n\n        // Create Library Member\n        LibraryMember member1 = new LibraryMember(\"Alice Smith\");\n\n        // Create Library Loan\n        Calendar cal = Calendar.getInstance();\n        cal.add(Calendar.DAY_OF_MONTH, -7); // Due date a week ago (for testing late fee)\n        Date dueDate = cal.getTime();\n        LibraryLoan loan1 = new LibraryLoan(book1, member1, dueDate);\n\n        // Display Loan Details\n        loan1.displayLoanDetails();\n\n        // Return Book\n        loan1.returnBook();\n    }\n}"
    },
    {
        "instruction": "Develop a Java program for tracking fitness activities with classes for User, Exercise, and WorkoutLog. The program should provide functionalities like logging workouts, setting fitness goals, and tracking progress. Ensure that the classes include methods and instance variables relevant to the business scenario, such as generating and validating IDs, calculating specific business metrics, and other necessary functionalities.",
        "input": "",
        "output": "// User class representing a user\npublic class User {\n    private static int userCounter = 1;\n    private String userId;\n    private String username;\n    private int age;\n    private double weight;\n    private double height;\n    private String gender;\n    private double fitnessGoal;\n\n    public User(String username, int age, double weight, double height, String gender, double fitnessGoal) {\n        this.userId = generateId(username);\n        this.username = username;\n        this.age = age;\n        this.weight = weight;\n        this.height = height;\n        this.gender = gender;\n        this.fitnessGoal = fitnessGoal;\n    }\n\n    private String generateId(String username) {\n        return username.substring(0, 3).toUpperCase() + userCounter++;\n    }\n\n    public String getUserId() {\n        return userId;\n    }\n\n    public boolean validateId() {\n        return username.length() > 0 && age > 18;\n    }\n}\n\n// Exercise class representing an exercise\npublic class Exercise {\n    private static int exerciseCounter = 1;\n    private String exerciseId;\n    private String name;\n    private String category;\n    private double caloriesBurnedPerMinute;\n\n    public Exercise(String name, String category, double caloriesBurnedPerMinute) {\n        this.exerciseId = generateId(name);\n        this.name = name;\n        this.category = category;\n        this.caloriesBurnedPerMinute = caloriesBurnedPerMinute;\n    }\n\n    private String generateId(String name) {\n        return name.substring(0, 3).toUpperCase() + exerciseCounter++;\n    }\n\n    public String getExerciseId() {\n        return exerciseId;\n    }\n}\n\n// WorkoutLog class representing a workout log\npublic class WorkoutLog {\n    private static int logCounter = 1;\n    private String logId;\n    private User user;\n    private Exercise[] exercises;\n    private int exerciseCount;\n\n    public WorkoutLog(User user) {\n        this.logId = generateId(user.getUsername());\n        this.user = user;\n        this.exercises = new Exercise[10];\n        this.exerciseCount = 0;\n    }\n\n    private String generateId(String username) {\n        return username.substring(0, 3).toUpperCase() + logCounter++;\n    }\n\n    public String getLogId() {\n        return logId;\n    }\n\n    public void addExercise(Exercise exercise) {\n        if (exerciseCount < exercises.length) {\n            exercises[exerciseCount++] = exercise;\n        }\n    }\n\n    public Exercise[] getExercises() {\n        return exercises;\n    }\n}\n\n// Main class for testing\npublic class FitnessTracker {\n    public static void main(String[] args) {\n        User user = new User(\"JohnDoe\", 30, 75.0, 180.0, \"Male\", 2000);\n        Exercise exercise1 = new Exercise(\"Running\", \"Cardio\", 10.0);\n        Exercise exercise2 = new Exercise(\"Weightlifting\", \"Strength\", 8.0);\n\n        WorkoutLog log = new WorkoutLog(user);\n        log.addExercise(exercise1);\n        log.addExercise(exercise2);\n\n        // Additional functionality testing\n        System.out.println(\"User ID: \" + user.getUserId());\n        System.out.println(\"Log ID: \" + log.getLogId());\n        System.out.println(\"Exercises in log: \");\n        for (Exercise exercise : log.getExercises()) {\n            if (exercise != null) {\n                System.out.println(\"- \" + exercise.getExerciseId() + \": \" + exercise.getName());\n            }\n        }\n        System.out.println(\"Is user ID valid: \" + user.validateId());\n    }\n}\n"
    },
    {
        "instruction": "Design a Java program for managing a tourism booking system. Implement three classes: TourPackage, Customer, and Booking. Establish a relationship between the classes following a specific business scenario. Include functionalities such as generating and validating IDs, calculating specific business metrics, and other necessary functionalities.",
        "input": "",
        "output": "class TourPackage {\n    private static int packageCounter = 1;\n    private String packageId;\n    private String packageName;\n    private double price;\n\n    public TourPackage(String packageName, double price) {\n        this.packageName = packageName;\n        this.price = price;\n        this.packageId = generateId(packageName);\n    }\n\n    private String generateId(String packageName) {\n        return packageName.substring(0, 3).toUpperCase() + packageCounter++;\n    }\n\n    public String getPackageId() {\n        return packageId;\n    }\n\n    public String getPackageName() {\n        return packageName;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n}\n\n class Customer {\n    private static int customerCounter = 1;\n    private String customerId;\n    private String firstName;\n    private String lastName;\n    private int age;\n    private String email;\n\n    public Customer(String firstName, String lastName, int age, String email) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.age = age;\n        this.email = email;\n        this.customerId = generateId(firstName);\n    }\n\n    private String generateId(String firstName) {\n        return firstName.substring(0, 3).toUpperCase() + customerCounter++;\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public boolean validateId() {\n        return email.endsWith(\"@gmail.com\") && age > 18;\n    }\n}\n\n class Booking extends TourPackage {\n    private static int bookingCounter = 1;\n    private String bookingId;\n    private Customer customer;\n    private double totalPrice;\n\n    public Booking(String packageName, double price, Customer customer) {\n        super(packageName, price);\n        this.customer = customer;\n        this.bookingId = generateId(packageName);\n        this.totalPrice = price;\n    }\n\n    private String generateId(String packageName) {\n        return packageName.substring(0, 3).toUpperCase() + customer.getCustomerId() + bookingCounter++;\n    }\n\n    public String getBookingId() {\n        return bookingId;\n    }\n\n    public double getTotalPrice() {\n        return totalPrice;\n    }\n}\n\npublic class TourismBookingSystem {\n    public static void main(String[] args) {\n        Customer customer1 = new Customer(\"Alice\", \"Smith\", 30, \"alice@gmail.com\");\n        Booking booking1 = new Booking(\"Mountain Trek\", 2000.0, customer1);\n\n        System.out.println(\"Booking ID: \" + booking1.getBookingId());\n        System.out.println(\"Total Price: $\" + booking1.getTotalPrice());\n        System.out.println(\"Customer ID is valid: \" + customer1.validateId());\n    }\n}\n"
    },
    {
        "instruction": "Develop a Java program for an Event Management System. The system should include classes for Event, Organizer, and Attendee. Implement features such as event creation, attendee registration, and ticketing.",
        "input": "",
        "output": "public class Event {\n    private String eventId;\n    private String eventName;\n    private Organizer organizer;\n    private Date eventDate;\n    private static int eventCounter = 1;\n\n    public Event(String eventName, Organizer organizer, Date eventDate) {\n        this.eventName = eventName;\n        this.organizer = organizer;\n        this.eventDate = eventDate;\n        this.eventId = generateID(eventName);\n    }\n\n    private String generateID(String eventName) {\n        return eventName.substring(0, 3).toUpperCase() + eventCounter++;\n    }\n\n    public String getEventId() {\n        return eventId;\n    }\n\n    public String getEventName() {\n        return eventName;\n    }\n\n    public Organizer getOrganizer() {\n        return organizer;\n    }\n\n    public Date getEventDate() {\n        return eventDate;\n    }\n}\n\nclass Organizer {\n    private String organizerName;\n\n    public Organizer(String organizerName) {\n        this.organizerName = organizerName;\n    }\n\n    public String getOrganizerName() {\n        return organizerName;\n    }\n}\n\nclass Attendee {\n    private String attendeeId;\n    private String attendeeName;\n    private static int attendeeCounter = 1;\n\n    public Attendee(String attendeeName) {\n        this.attendeeName = attendeeName;\n        this.attendeeId = generateID(attendeeName);\n    }\n\n    private String generateID(String attendeeName) {\n        return attendeeName.substring(0, 3).toUpperCase() + attendeeCounter++;\n    }\n\n    public String getAttendeeId() {\n        return attendeeId;\n    }\n\n    public String getAttendeeName() {\n        return attendeeName;\n    }\n\n    public boolean validateId() {\n        return attendeeId != null && attendeeId.startsWith(attendeeName.substring(0, 3).toUpperCase());\n    }\n}\n\npublic class EventManagementSystem {\n    public static void main(String[] args) {\n        Organizer organizer = new Organizer(\"Event Organizers Inc.\");\n        Event event = new Event(\"Annual Conference\", organizer, new Date());\n        Attendee attendee1 = new Attendee(\"John Doe\");\n        Attendee attendee2 = new Attendee(\"Alice Smith\");\n\n        System.out.println(\"Event ID: \" + event.getEventId());\n        System.out.println(\"Event Name: \" + event.getEventName());\n        System.out.println(\"Organizer: \" + event.getOrganizer().getOrganizerName());\n        System.out.println(\"Event Date: \" + event.getEventDate());\n\n        System.out.println(\"\\nAttendee 1 ID: \" + attendee1.getAttendeeId());\n        System.out.println(\"Attendee 1 Name: \" + attendee1.getAttendeeName());\n        System.out.println(\"Attendee 1 ID is valid: \" + attendee1.validateId());\n\n        System.out.println(\"\\nAttendee 2 ID: \" + attendee2.getAttendeeId());\n        System.out.println(\"Attendee 2 Name: \" + attendee2.getAttendeeName());\n        System.out.println(\"Attendee 2 ID is valid: \" + attendee2.validateId());\n    }\n}"
    },
    {
        "instruction": "Develop a Java program for a Music Streaming Service. The system should include classes for Song, Playlist, and User, implementing features such as song playback, playlist creation, and user profile management.",
        "input": "",
        "output": "// Song class representing a song\npublic class Song {\n    private static int songCounter = 1;\n    private String songId;\n    private String title;\n    private String artist;\n    private Double duration;\n\n    public Song(String title, String artist, Double duration) {\n        this.title = title;\n        this.artist = artist;\n        this.duration = duration;\n        this.songId = generateId(title);\n    }\n\n    private String generateId(String title) {\n        return title.substring(0, 3).toUpperCase() + songCounter++;\n    }\n\n    public String getSongId() {\n        return songId;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getArtist() {\n        return artist;\n    }\n\n    public Double getDuration() {\n        return duration;\n    }\n}\n\n// Playlist class representing a playlist\npublic class Playlist {\n    private static int playlistCounter = 1;\n    private String playlistId;\n    private String name;\n    private Song[] songs;\n    private int songCount;\n\n    public Playlist(String name) {\n        this.name = name;\n        this.playlistId = generateId(name);\n        this.songs = new Song[50]; // Assume a playlist can have up to 50 songs\n        this.songCount = 0;\n    }\n\n    private String generateId(String name) {\n        return name.substring(0, 3).toUpperCase() + playlistCounter++;\n    }\n\n    public void addSong(Song song) {\n        if (songCount < songs.length) {\n            songs[songCount++] = song;\n        }\n    }\n\n    public Song[] getSongs() {\n        return songs;\n    }\n\n    public String getPlaylistId() {\n        return playlistId;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\n// User class representing a user\npublic class User {\n    private static int userCounter = 1;\n    private String userId;\n    private String username;\n    private String email;\n    private Playlist[] playlists;\n    private int playlistCount;\n\n    public User(String username, String email) {\n        this.username = username;\n        this.email = email;\n        this.userId = generateId(username);\n        this.playlists = new Playlist[10]; // Assume a user can have up to 10 playlists\n        this.playlistCount = 0;\n    }\n\n    private String generateId(String username) {\n        return username.substring(0, 3).toUpperCase() + userCounter++;\n    }\n\n    public void createPlaylist(String name) {\n        if (playlistCount < playlists.length) {\n            playlists[playlistCount++] = new Playlist(name);\n        }\n    }\n\n    public Playlist[] getPlaylists() {\n        return playlists;\n    }\n\n    public boolean validateId() {\n        return email.endsWith(\"@gmail.com\") && username.length() > 0;\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        User user = new User(\"JohnDoe\", \"john@gmail.com\");\n        user.createPlaylist(\"Favorites\");\n        user.createPlaylist(\"Road Trip\");\n\n        Song song1 = new Song(\"Bohemian Rhapsody\", \"Queen\", 5.55);\n        Song song2 = new Song(\"Imagine\", \"John Lennon\", 3.03);\n\n        Playlist[] playlists = user.getPlaylists();\n        for (Playlist playlist : playlists) {\n            if (playlist != null) {\n                playlist.addSong(song1);\n                playlist.addSong(song2);\n\n                System.out.println(\"Playlist ID: \" + playlist.getPlaylistId());\n                System.out.println(\"Playlist Name: \" + playlist.getName());\n                for (Song song : playlist.getSongs()) {\n                    if (song != null) {\n                        System.out.println(\" - \" + song.getTitle() + \" by \" + song.getArtist());\n                    }\n                }\n                System.out.println();\n            }\n        }\n\n        System.out.println(\"User ID is valid: \" + user.validateId());\n    }\n}\n"
    },
    {
        "instruction": "Develop a Java program for a Task Management Application. The system should include classes for Task, Project, and TeamMember, implementing features such as task assignment, progress tracking, and deadline management.",
        "input": "",
        "output": "// Task class representing a task\npublic class Task {\n    private String taskId;\n    private String title;\n    private String description;\n    private boolean completed;\n    private String deadline;\n    private TeamMember assignedTo;\n\n    public Task(String title, String description, String deadline) {\n        this.title = title;\n        this.description = description;\n        this.deadline = deadline;\n        this.taskId = generateId(title);\n        this.completed = false;\n    }\n\n    private String generateId(String title) {\n        return title.substring(0, 3).toUpperCase() + taskIdCounter++;\n    }\n\n    public String getTaskId() {\n        return taskId;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public boolean isCompleted() {\n        return completed;\n    }\n\n    public String getDeadline() {\n        return deadline;\n    }\n\n    public void assignTo(TeamMember member) {\n        this.assignedTo = member;\n    }\n}\n\n// Project class representing a project\npublic class Project {\n    private String projectId;\n    private String name;\n    private Task[] tasks;\n    private int taskCount;\n\n    public Project(String name) {\n        this.name = name;\n        this.projectId = generateId(name);\n        this.tasks = new Task[50]; // Assume a project can have up to 50 tasks\n        this.taskCount = 0;\n    }\n\n    private String generateId(String name) {\n        return name.substring(0, 3).toUpperCase() + projectIdCounter++;\n    }\n\n    public void addTask(Task task) {\n        if (taskCount < tasks.length) {\n            tasks[taskCount++] = task;\n        }\n    }\n\n    public Task[] getTasks() {\n        return tasks;\n    }\n}\n\n// TeamMember class representing a team member\npublic class TeamMember {\n    private String memberId;\n    private String name;\n    private String email;\n\n    public TeamMember(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.memberId = generateId(name);\n    }\n\n    private String generateId(String name) {\n        return name.substring(0, 3).toUpperCase() + memberIdCounter++;\n    }\n\n    public String getMemberId() {\n        return memberId;\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        TeamMember member1 = new TeamMember(\"Alice Smith\", \"alice@example.com\");\n        TeamMember member2 = new TeamMember(\"Bob Johnson\", \"bob@example.com\");\n\n        Project project = new Project(\"Task Management System\");\n        Task task1 = new Task(\"Implement Task Class\", \"Write code for the Task class\", \"2024-06-15\");\n        Task task2 = new Task(\"Design UI\", \"Create mockups for the user interface\", \"2024-06-20\");\n\n        task1.assignTo(member1);\n        task2.assignTo(member2);\n\n        project.addTask(task1);\n        project.addTask(task2);\n\n        Task[] tasks = project.getTasks();\n        for (Task task : tasks) {\n            if (task != null) {\n                System.out.println(\"Task ID: \" + task.getTaskId());\n                System.out.println(\"Title: \" + task.getTitle());\n                System.out.println(\"Description: \" + task.getDescription());\n                System.out.println(\"Deadline: \" + task.getDeadline());\n                System.out.println(\"Assigned To: \" + (task.assignedTo != null ? task.assignedTo.getName() : \"Not Assigned\"));\n                System.out.println();\n            }\n        }\n    }\n}\n"
    }
]