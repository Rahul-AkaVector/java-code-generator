[
    {
        "instructions": "Write a Java program that models a business scenario using three classes: Customer and two related classes connected through either inheritance, aggregation, or association. The classes should include methods and instance variables relevant to the business scenario, such as generating and validating IDs, calculating specific business metrics, and other necessary functionalities.",
        "input": "",
        "output": "// Customer class representing a customer\npublic class Customer {\n    // Static variable\n    private static final int MAX_LOYALTY_POINTS = 100;\n\n    // Instance variables\n    private String customerId;\n    private String name;\n    private String email;\n    private ArrayList<Purchase> purchases;\n    private int loyaltyPoints;\n\n    // Constructor\n    public Customer(String name, String email) {\n        this.customerId = generateId();\n        this.name = name;\n        this.email = email;\n        this.purchases = new ArrayList<>();\n        this.loyaltyPoints = 0;\n    }\n\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    public void addPurchase(Purchase purchase) {\n        purchases.add(purchase);\n        updateLoyaltyPoints(purchase.getTotalAmount());\n    }\n\n    private void updateLoyaltyPoints(double amount) {\n        int pointsEarned = (int) (amount / 10); // Earn 1 loyalty point for every $10 spent\n        loyaltyPoints += pointsEarned;\n        if (loyaltyPoints > MAX_LOYALTY_POINTS) {\n            loyaltyPoints = MAX_LOYALTY_POINTS;\n        }\n    }\n\n    public int getLoyaltyPoints() {\n        return loyaltyPoints;\n    }\n}\n\n// Cart class representing a shopping cart\npublic class Cart {\n    private String cartId;\n    private Customer customer;\n    private ArrayList<Item> items;\n\n    public Cart(Customer customer) {\n        this.cartId = generateId();\n        this.customer = customer;\n        this.items = new ArrayList<>();\n    }\n\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    public void addItem(Item item) {\n        items.add(item);\n    }\n\n    public void removeItem(Item item) {\n        items.remove(item);\n    }\n\n    public ArrayList<Item> getItems() {\n        return items;\n    }\n}\n\n// Purchase class representing a purchase\npublic class Purchase {\n    private String purchaseId;\n    private Customer customer;\n    private ArrayList<Item> items;\n    private double totalAmount;\n\n    public Purchase(Customer customer, ArrayList<Item> items) {\n        this.purchaseId = generateId();\n        this.customer = customer;\n        this.items = items;\n        this.totalAmount = calculateTotalAmount();\n    }\n\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    private double calculateTotalAmount() {\n        double total = 0;\n        for (Item item : items) {\n            total += item.getPrice();\n        }\n        return total;\n    }\n\n    public double getTotalAmount() {\n        return totalAmount;\n    }\n}\n\n// Item class representing an item\npublic class Item {\n    private String itemId;\n    private String name;\n    private double price;\n    private int quantity;\n\n    public Item(String name, double price, int quantity) {\n        this.itemId = generateId();\n        this.name = name;\n        this.price = price;\n        this.quantity = quantity;\n    }\n\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public int getQuantity() {\n        return quantity;\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        Customer customer = new Customer(\"John Doe\", \"john@example.com\");\n        Item item1 = new Item(\"Chair\", 50.0, 2);\n        Item item2 = new Item(\"Table\", 100.0, 1);\n\n        Cart cart = new Cart(customer);\n        cart.addItem(item1);\n        cart.addItem(item2);\n\n        Purchase purchase = new Purchase(customer, cart.getItems());\n\n        System.out.println(\"Total purchase amount: $\" + purchase.getTotalAmount());\n        System.out.println(\"Loyalty points earned: \" + customer.getLoyaltyPoints());\n    }\n}\n"
    },
    {
        "instructions": "Write a Java program for an advertising agency management system. The system should include classes for representing the advertising agency, campaigns managed by the agency, and clients who hire the agency. Implement methods for calculating the total budget of all campaigns managed by the agency, finding the campaign with the highest budget, and calculating the remaining budget for a specific campaign. Ensure that each class has appropriate instance variables, methods, and relationships with other classes. Use UUIDs for generating unique identifiers for agencies, campaigns, and clients. Your implementation should demonstrate complex methods such as calculating remaining budget, and adhere to realistic business scenarios.",
        "input": "",
        "output": "// AdAgency class representing an advertising agency\npublic class AdAgency {\n    // Instance variables\n    private String agencyId;\n    private String name;\n    private ArrayList<Campaign> campaigns;\n\n    // Constructor\n    public AdAgency(String name) {\n        this.agencyId = generateId();\n        this.name = name;\n        this.campaigns = new ArrayList<>();\n    }\n\n    // Method to generate ID\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    // Method to add a campaign\n    public void addCampaign(Campaign campaign) {\n        campaigns.add(campaign);\n    }\n\n    // Method to calculate the total budget of all campaigns\n    public double calculateTotalBudget() {\n        double totalBudget = 0;\n        for (Campaign campaign : campaigns) {\n            totalBudget += campaign.getBudget();\n        }\n        return totalBudget;\n    }\n\n    // Method to find the campaign with the highest budget\n    public Campaign findCampaignWithHighestBudget() {\n        if (campaigns.isEmpty()) {\n            return null;\n        }\n        return Collections.max(campaigns, (c1, c2) -> Double.compare(c1.getBudget(), c2.getBudget()));\n    }\n\n    // Getter method for campaigns\n    public ArrayList<Campaign> getCampaigns() {\n        return campaigns;\n    }\n}\n\n// Campaign class representing a campaign managed by the agency\npublic class Campaign {\n    // Instance variables\n    private String campaignId;\n    private Client client;\n    private String name;\n    private double budget;\n\n    // Constructor\n    public Campaign(Client client, String name, double budget) {\n        this.campaignId = generateId();\n        this.client = client;\n        this.name = name;\n        this.budget = budget;\n    }\n\n    // Method to generate ID\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    // Getter method for budget\n    public double getBudget() {\n        return budget;\n    }\n\n    // Method to calculate remaining budget\n    public double calculateRemainingBudget() {\n        // Simulating a complex calculation for remaining budget\n        return budget * 0.8; // For example, assuming 80% of the budget is remaining\n    }\n}\n\n// Client class representing a client of the advertising agency\npublic class Client {\n    // Instance variables\n    private String clientId;\n    private String name;\n    private String contactInfo;\n\n    // Constructor\n    public Client(String name, String contactInfo) {\n        this.clientId = generateId();\n        this.name = name;\n        this.contactInfo = contactInfo;\n    }\n\n    // Method to generate ID\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    // Getter method for client ID\n    public String getClientId() {\n        return clientId;\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating an advertising agency\n        AdAgency adAgency = new AdAgency(\"XYZ Advertising\");\n\n        // Creating clients\n        Client client1 = new Client(\"Client1\", \"client1@example.com\");\n        Client client2 = new Client(\"Client2\", \"client2@example.com\");\n\n        // Creating campaigns\n        Campaign campaign1 = new Campaign(client1, \"Campaign 1\", 5000.0);\n        Campaign campaign2 = new Campaign(client2, \"Campaign 2\", 8000.0);\n\n        // Adding campaigns to the agency\n        adAgency.addCampaign(campaign1);\n        adAgency.addCampaign(campaign2);\n\n        // Displaying total budget of all campaigns\n        System.out.println(\"Total budget of all campaigns: $\" + adAgency.calculateTotalBudget());\n\n        // Finding campaign with highest budget and displaying its remaining budget\n        Campaign highestBudgetCampaign = adAgency.findCampaignWithHighestBudget();\n        if (highestBudgetCampaign != null) {\n            System.out.println(\"Campaign with highest budget: \" + highestBudgetCampaign.getName());\n            System.out.println(\"Remaining budget of the campaign: $\" + highestBudgetCampaign.calculateRemainingBudget());\n        } else {\n            System.out.println(\"No campaigns found.\");\n        }\n    }\n}\n"
    },
    {
        "instructions": "Design a Java program for a hospital management system. The system should include classes representing a hospital, doctors, and patients. Implement methods for calculating the average number of patients per doctor and finding the doctor with the highest number of patients. Ensure that each class has appropriate instance variables, methods, and relationships with other classes. Use UUIDs for generating unique identifiers for hospitals, doctors, and patients. Your implementation should demonstrate complex methods such as calculating averages and finding maximum values, and adhere to realistic business scenarios.",
        "input": "",
        "output": "// Hospital class representing a hospital\npublic class Hospital {\n    // Instance variables\n    private String hospitalId;\n    private String name;\n    private ArrayList<Doctor> doctors;\n    private ArrayList<Patient> patients;\n\n    // Constructor\n    public Hospital(String name) {\n        this.hospitalId = generateId();\n        this.name = name;\n        this.doctors = new ArrayList<>();\n        this.patients = new ArrayList<>();\n    }\n\n    // Method to generate ID\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    // Method to add a doctor\n    public void addDoctor(Doctor doctor) {\n        doctors.add(doctor);\n    }\n\n    // Method to add a patient\n    public void addPatient(Patient patient) {\n        patients.add(patient);\n    }\n\n    // Method to calculate the average number of patients per doctor\n    public double calculateAveragePatientsPerDoctor() {\n        if (doctors.isEmpty()) {\n            return 0;\n        }\n        int totalPatients = 0;\n        for (Doctor doctor : doctors) {\n            totalPatients += doctor.getPatients().size();\n        }\n        return (double) totalPatients / doctors.size();\n    }\n\n    // Method to find the doctor with the most patients\n    public Doctor findDoctorWithMostPatients() {\n        if (doctors.isEmpty()) {\n            return null;\n        }\n        return Collections.max(doctors, (d1, d2) -> Integer.compare(d1.getPatients().size(), d2.getPatients().size()));\n    }\n\n    // Getter method for doctors\n    public ArrayList<Doctor> getDoctors() {\n        return doctors;\n    }\n\n    // Getter method for patients\n    public ArrayList<Patient> getPatients() {\n        return patients;\n    }\n}\n\n// Doctor class representing a doctor in the hospital\npublic class Doctor {\n    // Instance variables\n    private String doctorId;\n    private String name;\n    private ArrayList<Patient> patients;\n\n    // Constructor\n    public Doctor(String name) {\n        this.doctorId = generateId();\n        this.name = name;\n        this.patients = new ArrayList<>();\n    }\n\n    // Method to generate ID\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    // Method to add a patient\n    public void addPatient(Patient patient) {\n        patients.add(patient);\n    }\n\n    // Getter method for patients\n    public ArrayList<Patient> getPatients() {\n        return patients;\n    }\n\n    // Getter method for doctor name\n    public String getName() {\n        return name;\n    }\n}\n\n// Patient class representing a patient in the hospital\npublic class Patient {\n    // Instance variables\n    private String patientId;\n    private String name;\n    private int age;\n    private String condition;\n\n    // Constructor\n    public Patient(String name, int age, String condition) {\n        this.patientId = generateId();\n        this.name = name;\n        this.age = age;\n        this.condition = condition;\n    }\n\n    // Method to generate ID\n    private String generateId() {\n        return UUID.randomUUID().toString().substring(0, 8);\n    }\n\n    // Getter method for patient name\n    public String getName() {\n        return name;\n    }\n\n    // Other methods related to managing the patient\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Creating a hospital\n        Hospital hospital = new Hospital(\"XYZ Hospital\");\n\n        // Creating doctors\n        Doctor doctor1 = new Doctor(\"Dr. Smith\");\n        Doctor doctor2 = new Doctor(\"Dr. Johnson\");\n\n        // Creating patients\n        Patient patient1 = new Patient(\"John Doe\", 35, \"Fever\");\n        Patient patient2 = new Patient(\"Jane Smith\", 45, \"Injury\");\n        Patient patient3 = new Patient(\"Mary Johnson\", 50, \"Heart Disease\");\n\n        // Adding patients to doctors\n        doctor1.addPatient(patient1);\n        doctor2.addPatient(patient2);\n        doctor2.addPatient(patient3);\n\n        // Adding doctors and patients to the hospital\n        hospital.addDoctor(doctor1);\n        hospital.addDoctor(doctor2);\n        hospital.addPatient(patient1);\n        hospital.addPatient(patient2);\n        hospital.addPatient(patient3);\n\n        // Displaying average patients per doctor\n        System.out.println(\"Average patients per doctor: \" + hospital.calculateAveragePatientsPerDoctor());\n\n        // Finding doctor with most patients\n        Doctor mostPatientsDoctor = hospital.findDoctorWithMostPatients();\n        if (mostPatientsDoctor != null) {\n            System.out.println(\"Doctor with the most patients: \" + mostPatientsDoctor.getName());\n            System.out.println(\"Number of patients: \" + mostPatientsDoctor.getPatients().size());\n        } else {\n            System.out.println(\"No doctors found.\");\n        }\n    }\n}\n"
    },
    {
        "instructions": "Write a Java program that models a business scenario using three classes: Marketing, Campaign, and Product. These classes should be connected through inheritance, aggregation, or association. The classes should include methods and instance variables relevant to the business scenario, such as generating and validating IDs, calculating campaign reach, managing products, and other necessary functionalities.",
        "input": "",
        "output": "// Product class representing a product\npublic class Product {\n    // Instance variables\n    private String productId;\n    private String name;\n    private double price;\n\n    // Constructor\n    public Product(String name, double price) {\n        this.name = name;\n        this.price = price;\n        this.productId = generateID();\n    }\n\n    // Method to generate ID\n    private String generateID() {\n        return \"PROD-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getter methods\n    public String getProductId() {\n        return productId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n}\n\n// Customer class representing a customer\npublic class Customer {\n    // Instance variables\n    private String customerId;\n    private String name;\n    private String email;\n    private String phone;\n\n    // Constructor\n    public Customer(String name, String email, String phone) {\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n        this.customerId = generateID();\n    }\n\n    // Method to generate ID\n    private String generateID() {\n        return \"CUST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getter methods\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n}\n\n// Marketing class representing a marketing campaign\npublic class Marketing {\n    // Instance variables\n    private String marketingId;\n    private String campaignName;\n    private Product product;\n    private List<Customer> customers;\n\n    // Constructor\n    public Marketing(String campaignName, Product product) {\n        this.campaignName = campaignName;\n        this.product = product;\n        this.customers = new ArrayList<>();\n        this.marketingId = generateID();\n    }\n\n    // Method to generate ID\n    private String generateID() {\n        return \"MKT-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Method to validate ID\n    public boolean validateID(String id) {\n        return id.matches(\"MKT-[A-Z0-9]{8}\");\n    }\n\n    // Method to add a customer\n    public void addCustomer(Customer customer) {\n        customers.add(customer);\n    }\n\n    // Method to remove a customer\n    public void removeCustomer(String customerId) {\n        customers.removeIf(customer -> customer.getCustomerId().equals(customerId));\n    }\n\n    // Method to display campaign details\n    public void displayCampaignDetails() {\n        System.out.println(\"Campaign ID: \" + marketingId);\n        System.out.println(\"Campaign Name: \" + campaignName);\n        System.out.println(\"Product: \" + product.getName() + \" (ID: \" + product.getProductId() + \")\");\n        System.out.println(\"Customers in this campaign:\");\n        for (Customer customer : customers) {\n            System.out.println(\" - \" + customer.getName() + \" (ID: \" + customer.getCustomerId() + \")\");\n        }\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Product product = new Product(\"Smartphone\", 699.99);\n        Customer customer1 = new Customer(\"Alice\", \"alice@example.com\", \"123-456-7890\");\n        Customer customer2 = new Customer(\"Bob\", \"bob@example.com\", \"098-765-4321\");\n\n        Marketing marketing = new Marketing(\"Holiday Sale\", product);\n        marketing.addCustomer(customer1);\n        marketing.addCustomer(customer2);\n\n        marketing.displayCampaignDetails();\n\n        System.out.println(\"\\nValidating Campaign ID...\");\n        System.out.println(\"Valid ID? \" + marketing.validateID(marketing.marketingId));\n        System.out.println(\"Invalid ID? \" + marketing.validateID(\"INVALID-ID\"));\n\n        System.out.println(\"\\nRemoving Customer with ID: \" + customer1.getCustomerId());\n        marketing.removeCustomer(customer1.getCustomerId());\n\n        marketing.displayCampaignDetails();\n    }\n}\n"
    },
    {
        "instructions": "Develop a Java program that includes a Product class, a Customer class, and an Order class, related through aggregation or association. Ensure all methods and instance variables meet real-life business scenarios, including methods such as generateID, validateID, and other necessary calculations. The program should support adding products to orders, creating orders for customers, and validating IDs. Finally, display the order details and validate the generated IDs.",
        "input": "",
        "output": "// Product class representing a product\npublic class Product {\n    // Instance variables\n    private String productId;\n    private String name;\n    private double price;\n\n    // Constructor\n    public Product(String name, double price) {\n        this.name = name;\n        this.price = price;\n        this.productId = generateID();\n    }\n\n    // Method to generate ID\n    private String generateID() {\n        return \"PROD-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getter methods\n    public String getProductId() {\n        return productId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    // Method to validate ID\n    public boolean validateID(String id) {\n        return id.matches(\"PROD-[A-Z0-9]{8}\");\n    }\n}\n\n// Customer class representing a customer\npublic class Customer {\n    // Instance variables\n    private String customerId;\n    private String name;\n    private String email;\n\n    // Constructor\n    public Customer(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.customerId = generateID();\n    }\n\n    // Method to generate ID\n    private String generateID() {\n        return \"CUST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getter methods\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    // Method to validate ID\n    public boolean validateID(String id) {\n        return id.matches(\"CUST-[A-Z0-9]{8}\");\n    }\n}\n\n// Order class representing an order\npublic class Order {\n    // Instance variables\n    private String orderId;\n    private Customer customer;\n    private List<Product> products;\n    private double totalAmount;\n\n    // Constructor\n    public Order(Customer customer) {\n        this.customer = customer;\n        this.products = new ArrayList<>();\n        this.orderId = generateID();\n    }\n\n    // Method to generate ID\n    private String generateID() {\n        return \"ORD-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Method to validate ID\n    public boolean validateID(String id) {\n        return id.matches(\"ORD-[A-Z0-9]{8}\");\n    }\n\n    // Getter methods\n    public String getOrderId() {\n        return orderId;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public List<Product> getProducts() {\n        return products;\n    }\n\n    public double getTotalAmount() {\n        return totalAmount;\n    }\n\n    // Method to add a product to the order\n    public void addProduct(Product product) {\n        if (product != null && product.validateID(product.getProductId())) {\n            products.add(product);\n            calculateTotalAmount();\n        }\n    }\n\n    // Method to calculate total amount\n    private void calculateTotalAmount() {\n        totalAmount = 0;\n        for (Product product : products) {\n            totalAmount += product.getPrice();\n        }\n    }\n\n    // Method to display order details\n    public void displayOrderDetails() {\n        System.out.println(\"Order ID: \" + orderId);\n        System.out.println(\"Customer ID: \" + customer.getCustomerId() + \", Name: \" + customer.getName());\n        System.out.println(\"Products:\");\n        for (Product product : products) {\n            System.out.println(\"  ID: \" + product.getProductId() + \", Name: \" + product.getName() + \", Price: $\" + product.getPrice());\n        }\n        System.out.println(\"Total Amount: $\" + totalAmount);\n    }\n}\n\n// Main class for testing\npublic class Main {\n    public static void main(String[] args) {\n        // Create Customer\n        Customer customer = new Customer(\"John Doe\", \"john.doe@example.com\");\n\n        // Create Products\n        Product product1 = new Product(\"Laptop\", 999.99);\n        Product product2 = new Product(\"Smartphone\", 599.99);\n        Product product3 = new Product(\"Headphones\", 199.99);\n\n        // Create Order and add Products\n        Order order = new Order(customer);\n        order.addProduct(product1);\n        order.addProduct(product2);\n        order.addProduct(product3);\n\n        // Display Order Details\n        order.displayOrderDetails();\n\n        // Validate IDs\n        System.out.println(\"Valid Product ID? \" + product1.validateID(product1.getProductId()));\n        System.out.println(\"Valid Customer ID? \" + customer.validateID(customer.getCustomerId()));\n        System.out.println(\"Valid Order ID? \" + order.validateID(order.getOrderId()));\n    }\n}\n"
    },
    {
        "instructions": "Develop a Java program that includes an Employee class, a Department class, and a Company class, related through inheritance, aggregation, or association. Ensure all methods and instance variables meet real-life business scenarios, including methods such as generateID, validateID, and other necessary calculations. The program should support adding employees to departments, adding departments to companies, and validating IDs.",
        "input": "",
        "output": "import java.util.*;\n\nclass Employee {\n    private String employeeId;\n    private String name;\n    private double salary;\n\n    public Employee(String name, double salary) {\n        this.name = name;\n        this.salary = salary;\n        this.employeeId = generateID();\n    }\n\n    private String generateID() {\n        return \"EMP-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getEmployeeId() {\n        return employeeId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    public boolean validateID(String id) {\n        return id.matches(\"EMP-[A-Z0-9]{8}\");\n    }\n}\n\nclass Department {\n    private String departmentId;\n    private String name;\n    private Employee[] employees;\n    private int employeeCount;\n\n    public Department(String name) {\n        this.name = name;\n        this.employees = new Employee[10];\n        this.departmentId = generateID();\n        this.employeeCount = 0;\n    }\n\n    private String generateID() {\n        return \"DEPT-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getDepartmentId() {\n        return departmentId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Employee[] getEmployees() {\n        return Arrays.copyOf(employees, employeeCount);\n    }\n\n    public void addEmployee(Employee employee) {\n        if (employee != null && employee.validateID(employee.getEmployeeId()) && employeeCount < employees.length) {\n            employees[employeeCount++] = employee;\n        }\n    }\n\n    public boolean validateID(String id) {\n        return id.matches(\"DEPT-[A-Z0-9]{8}\");\n    }\n}\n\nclass Company {\n    private String companyId;\n    private String name;\n    private Department[] departments;\n    private int departmentCount;\n\n    public Company(String name) {\n        this.name = name;\n        this.departments = new Department[10];\n        this.companyId = generateID();\n        this.departmentCount = 0;\n    }\n\n    private String generateID() {\n        return \"COMP-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getCompanyId() {\n        return companyId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Department[] getDepartments() {\n        return Arrays.copyOf(departments, departmentCount);\n    }\n\n    public void addDepartment(Department department) {\n        if (department != null && department.validateID(department.getDepartmentId()) && departmentCount < departments.length) {\n            departments[departmentCount++] = department;\n        }\n    }\n\n    public boolean validateID(String id) {\n        return id.matches(\"COMP-[A-Z0-9]{8}\");\n    }\n\n    public void displayCompanyDetails() {\n        System.out.println(\"Company ID: \" + companyId + \", Name: \" + name);\n        for (Department dept : departments) {\n            if (dept != null) {\n                System.out.println(\"  Department ID: \" + dept.getDepartmentId() + \", Name: \" + dept.getName());\n                for (Employee emp : dept.getEmployees()) {\n                    if (emp != null) {\n                        System.out.println(\"    Employee ID: \" + emp.getEmployeeId() + \", Name: \" + emp.getName() + \", Salary: $\" + emp.getSalary());\n                    }\n                }\n            }\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create Company\n        Company company = new Company(\"Tech Innovations\");\n\n        // Create Departments\n        Department hrDept = new Department(\"Human Resources\");\n        Department itDept = new Department(\"Information Technology\");\n\n        // Create Employees\n        Employee emp1 = new Employee(\"Alice Johnson\", 60000);\n        Employee emp2 = new Employee(\"Bob Smith\", 75000);\n        Employee emp3 = new Employee(\"Carol Williams\", 70000);\n        Employee emp4 = new Employee(\"David Brown\", 65000);\n\n        // Add Employees to Departments\n        hrDept.addEmployee(emp1);\n        hrDept.addEmployee(emp2);\n        itDept.addEmployee(emp3);\n        itDept.addEmployee(emp4);\n\n        // Add Departments to Company\n        company.addDepartment(hrDept);\n        company.addDepartment(itDept);\n\n        // Display Company Details\n        company.displayCompanyDetails();\n\n        // Validate IDs\n        System.out.println(\"Valid Employee ID? \" + emp1.validateID(emp1.getEmployeeId()));\n        System.out.println(\"Valid Department ID? \" + hrDept.validateID(hrDept.getDepartmentId()));\n        System.out.println(\"Valid Company ID? \" + company.validateID(company.getCompanyId()));\n    }\n}\n"
    },
    {
        "instructions": "Develop a Java code to implement a Social Media Platform. The platform should allow users to create posts, follow other users, and interact with posts through likes and comments.",
        "input": "",
        "output": "// User class representing a user on the social media platform\npublic class User {\n    // Instance variables\n    private String userId;\n    private String username;\n    private String email;\n    private User follower;\n    private User following;\n\n    // Constructor\n    public User(String username, String email) {\n        this.username = username;\n        this.email = email;\n        this.userId = generateID();\n    }\n\n    // Method to generate unique user ID\n    private String generateID() {\n        return \"USER-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters and setters\n    public String getUserId() {\n        return userId;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public User getFollower() {\n        return follower;\n    }\n\n    public User getFollowing() {\n        return following;\n    }\n\n    public void setFollower(User follower) {\n        this.follower = follower;\n    }\n\n    public void setFollowing(User following) {\n        this.following = following;\n    }\n\n    public void createPost(String content) {\n        Post post = new Post(this, content);\n        System.out.println(username + \" has created a new post:\\n\" + content + \"\\n\");\n    }\n}\n\n// Post class representing a post made by a user\npublic class Post {\n    // Instance variables\n    private String postId;\n    private User user;\n    private String content;\n    private int likes;\n    private String comment;\n\n    // Constructor\n    public Post(User user, String content) {\n        this.user = user;\n        this.content = content;\n        // Generate unique post ID\n        this.postId = generateID();\n    }\n\n    // Method to generate unique post ID\n    private String generateID() {\n        return \"POST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getPostId() {\n        return postId;\n    }\n\n    public User getUser() {\n        return user;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public int getLikes() {\n        return likes;\n    }\n\n    public String getComment() {\n        return comment;\n    }\n\n    // Method to add a like\n    public void addLike() {\n        likes++;\n    }\n\n    // Method to add a comment\n    public void addComment(String comment) {\n        this.comment = comment;\n    }\n}\n\n// SocialNetwork class representing the entire social network\npublic class SocialNetwork {\n    // Instance variables\n    private User[] users;\n    private int size;\n\n    // Constructor\n    public SocialNetwork(int capacity) {\n        users = new User[capacity];\n        size = 0;\n    }\n\n    // Method to add a user to the network\n    public void addUser(User user) {\n        users[size++] = user;\n    }\n\n    // Getters\n    public User[] getUsers() {\n        return users;\n    }\n}\n\npublic class SocialMediaPlatformMain {\n    public static void main(String[] args) {\n        // Create social network\n        SocialNetwork socialNetwork = new SocialNetwork(2);\n\n        // Create users\n        User user1 = new User(\"Alice\", \"alice@example.com\");\n        User user2 = new User(\"Bob\", \"bob@example.com\");\n\n        // Add users to the social network\n        socialNetwork.addUser(user1);\n        socialNetwork.addUser(user2);\n\n        // User interactions\n        user1.setFollowing(user2);\n        user2.setFollower(user1);\n\n        // User posts\n        user1.createPost(\"Hello, this is my first post!\");\n        user2.createPost(\"Just chilling out!\");\n\n        // Simulate likes and comments\n        Post post1 = new Post(user1, \"Hello, this is my first post!\");\n        post1.addLike();\n        post1.addLike();\n        post1.addComment(\"Great post, Alice!\");\n\n        // Display user profiles, posts, and interactions\n        displayUserProfile(user1);\n        displayUserProfile(user2);\n    }\n\n    // Method to display user profile\n    public static void displayUserProfile(User user) {\n        System.out.println(\"User Profile: \" + user.getUsername());\n        System.out.println(\"User ID: \" + user.getUserId());\n        System.out.println(\"Email: \" + user.getEmail());\n        if (user.getFollower() != null) {\n            System.out.println(\"Follower: \" + user.getFollower().getUsername());\n        }\n        if (user.getFollowing() != null) {\n            System.out.println(\"Following: \" + user.getFollowing().getUsername());\n}  System.out.println(\"----------\"); \n}\n} \n"
    },
    {
        "instructions": "Write a Java code to implement an Inventory Management System with classes for Product, Supplier, and Order, allowing management of products, suppliers, and orders.",
        "input": "",
        "output": "// Product class representing a product in the inventory\npublic class Product {\n    // Instance variables\n    private String productId;\n    private String name;\n    private String description;\n    private double price;\n    private int quantityInStock;\n\n    // Constructor\n    public Product(String name, String description, double price, int quantityInStock) {\n        this.name = name;\n        this.description = description;\n        this.price = price;\n        this.quantityInStock = quantityInStock;\n        this.productId = generateID();\n    }\n\n    // Method to generate unique product ID\n    private String generateID() {\n        return \"PROD-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getProductId() {\n        return productId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public int getQuantityInStock() {\n        return quantityInStock;\n    }\n\n    // Method to update stock quantity\n    public void updateStock(int quantity) {\n        this.quantityInStock += quantity;\n    }\n}\n\n// Supplier class representing a supplier providing products\npublic class Supplier {\n    // Instance variables\n    private String supplierId;\n    private String name;\n    private String contactInfo;\n\n    // Constructor\n    public Supplier(String name, String contactInfo) {\n        this.name = name;\n        this.contactInfo = contactInfo;\n        this.supplierId = generateID();\n    }\n\n    // Method to generate unique supplier ID\n    private String generateID() {\n        return \"SUPP-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getSupplierId() {\n        return supplierId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getContactInfo() {\n        return contactInfo;\n    }\n}\n\n// Order class representing an order for a product from a supplier\npublic class Order {\n    // Instance variables\n    private String orderId;\n    private Product product;\n    private int quantityOrdered;\n    private Supplier supplier;\n\n    // Constructor\n    public Order(Product product, int quantityOrdered, Supplier supplier) {\n        this.product = product;\n        this.quantityOrdered = quantityOrdered;\n        this.supplier = supplier;\n        this.orderId = generateID();\n    }\n\n    // Method to generate unique order ID\n    private String generateID() {\n        return \"ORDER-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getOrderId() {\n        return orderId;\n    }\n\n    public Product getProduct() {\n        return product;\n    }\n\n    public int getQuantityOrdered() {\n        return quantityOrdered;\n    }\n\n    public Supplier getSupplier() {\n        return supplier;\n    }\n}\n\n// Main class for testing\npublic class InventoryManagementMain {\n    public static void main(String[] args) {\n        // Create instances of products\n        Product product1 = new Product(\"Laptop\", \"High-performance laptop\", 1200.00, 10);\n        Product product2 = new Product(\"Smartphone\", \"Latest smartphone model\", 800.00, 20);\n\n        // Create instances of suppliers\n        Supplier supplier1 = new Supplier(\"ABC Electronics\", \"contact@abcelectronics.com\");\n        Supplier supplier2 = new Supplier(\"XYZ Gadgets\", \"contact@xyzgadgets.com\");\n\n        // Create instances of orders\n        Order order1 = new Order(product1, 5, supplier1);\n        Order order2 = new Order(product2, 10, supplier2);\n\n        // Simulate order processing\n        processOrder(order1);\n        processOrder(order2);\n\n        // Display current inventory status\n        displayInventory(product1);\n        displayInventory(product2);\n    }\n\n    // Method to process an order\n    public static void processOrder(Order order) {\n        System.out.println(\"Processing order \" + order.getOrderId() + \" for \" + order.getQuantityOrdered() +\n                \" units of \" + order.getProduct().getName() + \" from supplier: \" + order.getSupplier().getName());\n        // Simulated order processing - Update stock quantity\n        order.getProduct().updateStock(order.getQuantityOrdered());\n        System.out.println(\"Order processed successfully.\\n\");\n    }\n\n    // Method to display inventory details\n    public static void displayInventory(Product product) {\n        System.out.println(\"Inventory Details for \" + product.getName() + \":\");\n        System.out.println(\"Product ID: \" + product.getProductId());\n        System.out.println(\"Name: \" + product.getName());\n        System.out.println(\"Description: \" + product.getDescription());\n        System.out.println(\"Price: $\" + product.getPrice());\n        System.out.println(\"Quantity in Stock: \" + product.getQuantityInStock());\n        System.out.println(\"-------------------------\");\n    }\n}\n"
    },
    {
        "instructions": "Write a Java program to implement an Investing in a Rental System. The system should allow investors to manage rental properties, tenants, and rental transactions.",
        "input": "",
        "output": "// Property class representing a rental property\npublic class Property {\n    // Instance variables\n    private String propertyId;\n    private String address;\n    private double rentalPrice;\n    private int numBedrooms;\n    private int numBathrooms;\n\n    // Constructor\n    public Property(String address, double rentalPrice, int numBedrooms, int numBathrooms) {\n        this.address = address;\n        this.rentalPrice = rentalPrice;\n        this.numBedrooms = numBedrooms;\n        this.numBathrooms = numBathrooms;\n        this.propertyId = generateID();\n    }\n\n    // Method to generate unique property ID\n    private String generateID() {\n        return \"PROP-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getPropertyId() {\n        return propertyId;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public double getRentalPrice() {\n        return rentalPrice;\n    }\n\n    public int getNumBedrooms() {\n        return numBedrooms;\n    }\n\n    public int getNumBathrooms() {\n        return numBathrooms;\n    }\n}\n\n// Tenant class representing a tenant renting a property\npublic class Tenant {\n    // Instance variables\n    private String tenantId;\n    private String name;\n    private String email;\n\n    // Constructor\n    public Tenant(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.tenantId = generateID();\n    }\n\n    // Method to generate unique tenant ID\n    private String generateID() {\n        return \"TENANT-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getTenantId() {\n        return tenantId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n}\n\n// InvestingSystem class representing the investing in a rental system\npublic class InvestingSystem {\n    // Instance variables\n    private Property[] properties;\n    private Tenant[] tenants;\n    private int propertyCount;\n    private int tenantCount;\n\n    // Constructor\n    public InvestingSystem(int maxProperties, int maxTenants) {\n        this.properties = new Property[maxProperties];\n        this.tenants = new Tenant[maxTenants];\n        this.propertyCount = 0;\n        this.tenantCount = 0;\n    }\n\n    // Method to add a property\n    public void addProperty(Property property) {\n        if (propertyCount < properties.length) {\n            properties[propertyCount++] = property;\n        } else {\n            System.out.println(\"Cannot add more properties. Property limit reached.\");\n        }\n    }\n\n    // Method to register a tenant\n    public void registerTenant(Tenant tenant) {\n        if (tenantCount < tenants.length) {\n            tenants[tenantCount++] = tenant;\n        } else {\n            System.out.println(\"Cannot register more tenants. Tenant limit reached.\");\n        }\n    }\n\n    // Method to rent a property to a tenant\n    public void rentProperty(Tenant tenant, Property property) {\n        System.out.println(tenant.getName() + \" has rented property: \" + property.getAddress() + \" for $\" + property.getRentalPrice() + \" per month.\");\n    }\n\n    // Method to display available properties\n    public void displayAvailableProperties() {\n        System.out.println(\"Available Properties:\");\n        for (Property property : properties) {\n            if (property != null) {\n                System.out.println(\"Property ID: \" + property.getPropertyId());\n                System.out.println(\"Address: \" + property.getAddress());\n                System.out.println(\"Price: $\" + property.getRentalPrice() + \" per month\");\n                System.out.println(\"Bedrooms: \" + property.getNumBedrooms());\n                System.out.println(\"Bathrooms: \" + property.getNumBathrooms());\n                System.out.println(\"-------------------------\");\n            }\n        }\n    }\n\n    // Method to display rented properties\n    public void displayRentedProperties() {\n        System.out.println(\"Rented Properties:\");\n        // Simulated data for rented properties\n        System.out.println(\"No rented properties in the system.\");\n    }\n}\n\npublic class InvestingRentalSystem {\n    public static void main(String[] args) {\n        InvestingSystem system = new InvestingSystem(10, 10);\n\n        // Add properties to the system\n        Property property1 = new Property(\"123 Main St\", 1500.00, 3, 2);\n        Property property2 = new Property(\"456 Oak St\", 2000.00, 4, 3);\n        Property property3 = new Property(\"789 Elm St\", 1800.00, 2, 1);\n        system.addProperty(property1);\n        system.addProperty(property2);\n        system.addProperty(property3);\n\n        // Register tenants\n        Tenant tenant1 = new Tenant(\"John Doe\", \"john@example.com\");\n        Tenant tenant2 = new Tenant(\"Alice Smith\", \"alice@example.com\");\n        system.registerTenant(tenant1);\n        system.registerTenant(tenant2);\n\n        // Display available properties\n        system.displayAvailableProperties();\n\n        // Rent a property\n        system.rentProperty(tenant1, property1);\n\n        // Display rented properties\n        system.displayRentedProperties();\n    }\n}"
    },
    {
        "instructions": "Write a Java code to implement a Movie Ticket Booking System. The system should facilitate the booking of movie tickets for customers, allowing them to select movies and showtimes.",
        "input": "",
        "output": "// Movie class representing a movie\npublic class Movie {\n    // Instance variables\n    private String movieId;\n    private String title;\n    private String genre;\n    private int duration;\n\n    // Constructor\n    public Movie(String title, String genre, int duration) {\n        this.title = title;\n        this.genre = genre;\n        this.duration = duration;\n        this.movieId = generateID();\n    }\n\n    // Method to generate unique movie ID\n    private String generateID() {\n        return \"MOVIE-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getMovieId() {\n        return movieId;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getGenre() {\n        return genre;\n    }\n\n    public int getDuration() {\n        return duration;\n    }\n}\n\n// Customer class representing a customer\npublic class Customer {\n    // Instance variables\n    private String customerId;\n    private String name;\n    private String email;\n\n    // Constructor\n    public Customer(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.customerId = generateID();\n    }\n\n    // Method to generate unique customer ID\n    private String generateID() {\n        return \"CUST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n}\n\n// Ticket class representing a movie ticket\npublic class Ticket {\n    // Instance variables\n    private String ticketId;\n    private Movie movie;\n    private Customer customer;\n    private Date showTime;\n\n    // Constructor\n    public Ticket(Movie movie, Customer customer, Date showTime) {\n        this.movie = movie;\n        this.customer = customer;\n        this.showTime = showTime;\n        this.ticketId = generateID();\n    }\n\n    // Method to generate unique ticket ID\n    private String generateID() {\n        return \"TICKET-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getTicketId() {\n        return ticketId;\n    }\n\n    public Movie getMovie() {\n        return movie;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public Date getShowTime() {\n        return showTime;\n    }\n}\n\n// Main class for Movie Ticket Booking System\npublic class MovieTicketBookingSystem {\n    public static void main(String[] args) {\n        // Create movies\n        Movie movie1 = new Movie(\"Inception\", \"Sci-Fi\", 148);\n        Movie movie2 = new Movie(\"The Shawshank Redemption\", \"Drama\", 142);\n\n        // Create customers\n        Customer customer1 = new Customer(\"John Doe\", \"john@example.com\");\n        Customer customer2 = new Customer(\"Alice Smith\", \"alice@example.com\");\n\n        // Create tickets\n        Date showTime1 = new Date();\n        Date showTime2 = new Date(showTime1.getTime() + 2 * 60 * 60 * 1000); // 2 hours later\n        Ticket ticket1 = new Ticket(movie1, customer1, showTime1);\n        Ticket ticket2 = new Ticket(movie2, customer2, showTime2);\n\n        // Display ticket details\n        displayTicketDetails(ticket1);\n        displayTicketDetails(ticket2);\n    }\n\n    // Method to display ticket details\n    public static void displayTicketDetails(Ticket ticket) {\n        System.out.println(\"Ticket ID: \" + ticket.getTicketId());\n        System.out.println(\"Movie: \" + ticket.getMovie().getTitle());\n        System.out.println(\"Genre: \" + ticket.getMovie().getGenre());\n        System.out.println(\"Duration: \" + ticket.getMovie().getDuration() + \" minutes\");\n        System.out.println(\"Customer: \" + ticket.getCustomer().getName());\n        System.out.println(\"Email: \" + ticket.getCustomer().getEmail());\n System.out.println(\"Show Time: \" + ticket.getShowTime());\nSystem.out.println();\n}\n}\n"
    },
    {
        "instructions": "Develop a java code for a Restaurant Management System to streamline operations at a restaurant. The system should facilitate the management of menu items, orders, and reservations efficiently.",
        "input": "",
        "output": "// MenuItem class representing a menu item\npublic class MenuItem {\n    // Instance variables\n    private String itemId;\n    private String name;\n    private String description;\n    private double price;\n    private String category;\n\n    // Constructor\n    public MenuItem(String name, String description, double price, String category) {\n        this.name = name;\n        this.description = description;\n        this.price = price;\n        this.category = category;\n        this.itemId = generateID();\n    }\n\n    // Method to generate unique item ID\n    private String generateID() {\n        return \"ITEM-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getItemId() {\n        return itemId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public String getCategory() {\n        return category;\n    }\n}\n\n// Customer class representing a customer\npublic class Customer {\n    // Instance variables\n    private String customerId;\n    private String name;\n    private String phoneNumber;\n    private String email;\n\n    // Constructor\n    public Customer(String name, String phoneNumber, String email) {\n        this.name = name;\n        this.phoneNumber = phoneNumber;\n        this.email = email;\n        this.customerId = generateID();\n    }\n\n    // Method to generate unique customer ID\n    private String generateID() {\n        return \"CUST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n}\n\n// RestaurantManagementSystem class representing the management system\npublic class RestaurantManagementSystem {\n    // Instance variables\n    private MenuItem[] menuItems;\n    private Customer[] customers;\n    private int menuItemCount;\n    private int customerCount;\n\n    // Constructor\n    public RestaurantManagementSystem(int maxMenuItems, int maxCustomers) {\n        this.menuItems = new MenuItem[maxMenuItems];\n        this.customers = new Customer[maxCustomers];\n        this.menuItemCount = 0;\n        this.customerCount = 0;\n    }\n\n    // Method to add a menu item\n    public void addMenuItem(MenuItem menuItem) {\n        if (menuItemCount < menuItems.length) {\n            menuItems[menuItemCount++] = menuItem;\n        } else {\n            System.out.println(\"Cannot add more menu items. Menu item limit reached.\");\n        }\n    }\n\n    // Method to add a customer\n    public void addCustomer(Customer customer) {\n        if (customerCount < customers.length) {\n            customers[customerCount++] = customer;\n        } else {\n            System.out.println(\"Cannot add more customers. Customer limit reached.\");\n        }\n    }\n\n    // Method to place an order\n    public void placeOrder(Customer customer, MenuItem[] orderedItems) {\n        System.out.println(\"Order placed by customer: \" + customer.getName());\n        System.out.println(\"Ordered Items:\");\n        for (MenuItem item : orderedItems) {\n            System.out.println(\"- \" + item.getName() + \" (\" + item.getCategory() + \"): $\" + item.getPrice());\n        }\n    }\n\n    // Method to make a reservation\n    public void makeReservation(Customer customer, String reservationDetails) {\n        System.out.println(\"Reservation made by customer: \" + customer.getName());\n        System.out.println(\"Reservation Details: \" + reservationDetails);\n    }\n}\n\n// Main class for demonstration\npublic class RestaurantManagementSystemDemo {\n    public static void main(String[] args) {\n        // Initialize Restaurant Management System\n        RestaurantManagementSystem restaurantSystem = new RestaurantManagementSystem(20, 50);\n\n        // Create Menu Items\n        MenuItem menuItem1 = new MenuItem(\"Spaghetti Carbonara\", \"Pasta with creamy sauce and bacon\", 12.99, \"Main Course\");\n        MenuItem menuItem2 = new MenuItem(\"Caesar Salad\", \"Romaine lettuce with Caesar dressing and croutons\", 8.99, \"Appetizer\");\n\n        // Create Customers\n        Customer customer1 = new Customer(\"John Smith\", \"123-456-7890\", \"john@example.com\");\n        Customer customer2 = new Customer(\"Alice Johnson\", \"456-789-0123\", \"alice@example.com\");\n\n        // Add Menu Items and Customers to the System\n        restaurantSystem.addMenuItem(menuItem1);\n        restaurantSystem.addMenuItem(menuItem2);\n        restaurantSystem.addCustomer(customer1);\n        restaurantSystem.addCustomer(customer2);\n\n        // Place Orders\n        MenuItem[] order1 = {menuItem1, menuItem2};\n        MenuItem[] order2 = {menuItem2};\n        restaurantSystem.placeOrder(customer1, order1);\n        restaurantSystem.placeOrder(customer2, order2);\n\n        // Make Reservations\n        restaurantSystem.makeReservation(customer1, \"Table for 4 at 7:00 PM\");\n        restaurantSystem.makeReservation(customer2, \"Table for 2 at 6:30 PM\");\n    }\n}\n"
    },
    {
        "instructions": "Develop a Java code for University Course Management System that facilitates the administration of courses, students, and enrollments at a university. The system should allow for registering students for courses, recording grades, and displaying enrollment details.",
        "input": "",
        "output": "// Course class representing a university course\npublic class Course {\n    // Instance variables\n    private String courseCode;\n    private String courseName;\n    private String instructor;\n    private String department;\n    private String schedule;\n\n    // Constructor\n    public Course(String courseName, String instructor, String department, String schedule) {\n        this.courseName = courseName;\n        this.instructor = instructor;\n        this.department = department;\n        this.schedule = schedule;\n        this.courseCode = generateCode();\n    }\n\n    // Method to generate unique course code\n    private String generateCode() {\n        return \"CSE-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getCourseCode() {\n        return courseCode;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n\n    public String getInstructor() {\n        return instructor;\n    }\n\n    public String getDepartment() {\n        return department;\n    }\n\n    public String getSchedule() {\n        return schedule;\n    }\n\n    // Method to validate course code\n    public boolean validateCode() {\n        return courseCode != null && courseCode.startsWith(\"CSE-\");\n    }\n}\n\n// Student class representing a university student\npublic class Student {\n    // Instance variables\n    private String studentId;\n    private String name;\n    private String email;\n    private String major;\n\n    // Constructor\n    public Student(String name, String email, String major) {\n        this.name = name;\n        this.email = email;\n        this.major = major;\n        this.studentId = generateID();\n    }\n\n    // Method to generate unique student ID\n    private String generateID() {\n        return \"STUD-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getStudentId() {\n        return studentId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getMajor() {\n        return major;\n    }\n\n    // Method to validate student ID\n    public boolean validateID() {\n        return studentId != null && studentId.startsWith(\"STUD-\");\n    }\n}\n\n// UniversityCourseManagement class representing the management system\npublic class UniversityCourseManagement {\n    // Instance variables\n    private Course[] courses;\n    private Student[] students;\n    private int courseCount;\n    private int studentCount;\n\n    // Constructor\n    public UniversityCourseManagement(int maxCourses, int maxStudents) {\n        this.courses = new Course[maxCourses];\n        this.students = new Student[maxStudents];\n        this.courseCount = 0;\n        this.studentCount = 0;\n    }\n\n    // Method to add a course\n    public void addCourse(Course course) {\n        if (courseCount < courses.length) {\n            courses[courseCount++] = course;\n        } else {\n            System.out.println(\"Cannot add more courses. Course limit reached.\");\n        }\n    }\n\n    // Method to add a student\n    public void addStudent(Student student) {\n        if (studentCount < students.length) {\n            students[studentCount++] = student;\n        } else {\n            System.out.println(\"Cannot add more students. Student limit reached.\");\n        }\n    }\n\n    // Method to register a student for a course\n    public void registerStudentForCourse(Student student, Course course) {\n        System.out.println(\"Student \" + student.getName() + \" registered for course: \" + course.getCourseName());\n    }\n\n    // Method to record grade for a student in a course\n    public void recordGrade(Student student, Course course, String grade) {\n        System.out.println(\"Grade recorded for student \" + student.getName() + \" in course \" + course.getCourseName() + \": \" + grade);\n    }\n\n    // Method to display enrollment details for a student\n    public void displayEnrollmentDetails(Student student) {\n        System.out.println(\"Enrollment Details for Student: \" + student.getName());\n        // Display enrollment details if implemented\n    }\n}\n\n// Main class for demonstration\npublic class UniversityCourseManagementSystem {\n    public static void main(String[] args) {\n        // Initialize University Course Management System\n        UniversityCourseManagement courseManagementSystem = new UniversityCourseManagement(10, 20);\n\n        // Create Courses\n        Course course1 = new Course(\"Introduction to Computer Science\", \"Dr. Smith\", \"Computer Science\", \"MWF 9:00 AM\");\n        Course course2 = new Course(\"Data Structures and Algorithms\", \"Prof. Johnson\", \"Computer Science\", \"TTh 1:00 PM\");\n\n        // Create Students\n        Student student1 = new Student(\"Alice Smith\", \"alice@example.com\", \"Computer Science\");\n        Student student2 = new Student(\"Bob Johnson\", \"bob@example.com\", \"Computer Engineering\");\n\n        // Add Courses and Students to the System\n        courseManagementSystem.addCourse(course1);\n        courseManagementSystem.addCourse(course2);\n        courseManagementSystem.addStudent(student1);\n        courseManagementSystem.addStudent(student2);\n\n        // Register Students for Courses\n        courseManagementSystem.registerStudentForCourse(student1, course1);\n        courseManagementSystem.registerStudentForCourse(student2, course2);\n\n        // Record Grades for Students\n        courseManagementSystem.recordGrade(student1, course1, \"A\");\n        courseManagementSystem.recordGrade(student2, course2, \"B+\");\n    }\n}\n"
    },
    {
        "instructions": "Develop a Java program for a Movie Rental System. The system is designed to manage movies, customers, and rental transactions within a rental service. The program should consist of three main classes: Movie, Customer, and RentalTransaction",
        "input": "",
        "output": "// Movie class representing a movie\npublic class Movie {\n    // Instance variables\n    private String movieId;\n    private String title;\n    private String director;\n    private String genre;\n    private int year;\n    private boolean available;\n\n    // Constructor\n    public Movie(String title, String director, String genre, int year) {\n        this.title = title;\n        this.director = director;\n        this.genre = genre;\n        this.year = year;\n        this.available = true;\n        this.movieId = generateID();\n    }\n\n    // Method to generate unique movie ID\n    private String generateID() {\n        return \"MOV-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters and setters\n    public String getMovieId() {\n        return movieId;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getDirector() {\n        return director;\n    }\n\n    public String getGenre() {\n        return genre;\n    }\n\n    public int getYear() {\n        return year;\n    }\n\n    public boolean isAvailable() {\n        return available;\n    }\n\n    public void setAvailable(boolean available) {\n        this.available = available;\n    }\n\n    // Method to validate movie ID\n    public boolean validateID() {\n        return movieId != null && movieId.startsWith(\"MOV-\");\n    }\n}\n\n// Customer class representing a customer\npublic class Customer {\n    // Instance variables\n    private String customerId;\n    private String name;\n    private String email;\n\n    // Constructor\n    public Customer(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.customerId = generateID();\n    }\n\n    // Method to generate unique customer ID\n    private String generateID() {\n        return \"CUST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    // Method to validate customer ID\n    public boolean validateID() {\n        return customerId != null && customerId.startsWith(\"CUST-\");\n    }\n}\n\n// RentalTransaction class representing a rental transaction\npublic class RentalTransaction {\n    // Instance variables\n    private String transactionId;\n    private Movie movie;\n    private Customer customer;\n    private Date rentalDate;\n    private Date returnDate;\n\n    // Constructor\n    public RentalTransaction(Movie movie, Customer customer) {\n        this.movie = movie;\n        this.customer = customer;\n        this.rentalDate = new Date();\n        this.transactionId = generateID();\n    }\n\n    // Method to generate unique transaction ID\n    private String generateID() {\n        return \"TRANS-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters and setters\n    public String getTransactionId() {\n        return transactionId;\n    }\n\n    public Movie getMovie() {\n        return movie;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public Date getRentalDate() {\n        return rentalDate;\n    }\n\n    public Date getReturnDate() {\n        return returnDate;\n    }\n\n    public void setReturnDate(Date returnDate) {\n        this.returnDate = returnDate;\n    }\n\n    // Method to validate transaction ID\n    public boolean validateID() {\n        return transactionId != null && transactionId.startsWith(\"TRANS-\");\n    }\n}\n\n// Main class for Movie Rental System\npublic class MovieRentalSystem {\n    public static void main(String[] args) {\n        // Create Movies\n        Movie movie1 = new Movie(\"Inception\", \"Christopher Nolan\", \"Action\", 2010);\n        Movie movie2 = new Movie(\"The Shawshank Redemption\", \"Frank Darabont\", \"Drama\", 1994);\n\n        // Create Customers\n        Customer customer1 = new Customer(\"Alice Smith\", \"alice@example.com\");\n        Customer customer2 = new Customer(\"Bob Johnson\", \"bob@example.com\");\n\n        // Rent Movies\n        RentalTransaction transaction1 = new RentalTransaction(movie1, customer1);\n        RentalTransaction transaction2 = new RentalTransaction(movie2, customer2);\n\n        // Display Rental Details\n        displayRentalDetails(transaction1);\n        displayRentalDetails(transaction2);\n    }\n\n    // Method to display rental details\n    public static void displayRentalDetails(RentalTransaction transaction) {\n        System.out.println(\"Transaction ID: \" + transaction.getTransactionId());\n        System.out.println(\"Customer: \" + transaction.getCustomer().getName() + \" (ID: \" + transaction.getCustomer().getCustomerId() + \")\");\n        System.out.println(\"Movie: \" + transaction.getMovie().getTitle() + \" (ID: \" + transaction.getMovie().getMovieId() + \")\");\n        System.out.println(\"Rental Date: \" + transaction.getRentalDate());\n        System.out.println(\"Return Date: \" + transaction.getReturnDate());\n        System.out.println();\n    }\n}\n"
    },
    {
        "instructions": "Develop a Java program for a School Management System. The system is designed to manage students, courses, and enrollments within a school. The program should consist of three main classes: Student, Course, and Enrollment.",
        "input": "",
        "output": "// Student class representing a student\npublic class Student {\n    // Instance variables\n    private String studentId;\n    private String name;\n    private String email;\n\n    // Constructor\n    public Student(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.studentId = generateID();\n    }\n\n    // Method to generate unique student ID\n    private String generateID() {\n        return \"STU-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getStudentId() {\n        return studentId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    // Method to validate student ID\n    public boolean validateID() {\n        return studentId != null && studentId.startsWith(\"STU-\");\n    }\n}\n\n// Course class representing a course\npublic class Course {\n    // Instance variables\n    private String courseId;\n    private String courseName;\n    private String instructor;\n\n    // Constructor\n    public Course(String courseName, String instructor) {\n        this.courseName = courseName;\n        this.instructor = instructor;\n        this.courseId = generateID();\n    }\n\n    // Method to generate unique course ID\n    private String generateID() {\n        return \"COURSE-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getCourseId() {\n        return courseId;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n\n    public String getInstructor() {\n        return instructor;\n    }\n\n    // Method to validate course ID\n    public boolean validateID() {\n        return courseId != null && courseId.startsWith(\"COURSE-\");\n    }\n}\n\n// Enrollment class representing an enrollment\npublic class Enrollment {\n    // Instance variables\n    private String enrollmentId;\n    private Student student;\n    private Course course;\n    private Date enrollmentDate;\n\n    // Constructor\n    public Enrollment(Student student, Course course) {\n        this.student = student;\n        this.course = course;\n        this.enrollmentDate = new Date();\n        this.enrollmentId = generateID();\n    }\n\n    // Method to generate unique enrollment ID\n    private String generateID() {\n        return \"ENR-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    // Getters\n    public String getEnrollmentId() {\n        return enrollmentId;\n    }\n\n    public Student getStudent() {\n        return student;\n    }\n\n    public Course getCourse() {\n        return course;\n    }\n\n    public Date getEnrollmentDate() {\n        return enrollmentDate;\n    }\n\n    // Method to validate enrollment ID\n    public boolean validateID() {\n        return enrollmentId != null && enrollmentId.startsWith(\"ENR-\");\n    }\n\n    // Method to calculate course duration\n    public int calculateCourseDuration(Date endDate) {\n        long duration = endDate.getTime() - enrollmentDate.getTime();\n        return (int) (duration / (1000 * 60 * 60 * 24));\n    }\n}\n\n// Main class for School Management System\npublic class SchoolManagementSystem {\n    public static void main(String[] args) {\n        // Create Students\n        Student student1 = new Student(\"Alice Smith\", \"alice@example.com\");\n        Student student2 = new Student(\"Bob Johnson\", \"bob@example.com\");\n\n        // Create Courses\n        Course course1 = new Course(\"Mathematics\", \"Dr. Allen\");\n        Course course2 = new Course(\"History\", \"Prof. Baker\");\n\n        // Enroll Students in Courses\n        Enrollment enrollment1 = new Enrollment(student1, course1);\n        Enrollment enrollment2 = new Enrollment(student2, course2);\n\n        // Display Enrollment Details\n        displayEnrollmentDetails(enrollment1);\n        displayEnrollmentDetails(enrollment2);\n    }\n\n    // Method to display enrollment details\n    public static void displayEnrollmentDetails(Enrollment enrollment) {\n        System.out.println(\"Enrollment ID: \" + enrollment.getEnrollmentId());\n        System.out.println(\"Student: \" + enrollment.getStudent().getName() + \" (ID: \" + enrollment.getStudent().getStudentId() + \")\");\n        System.out.println(\"Course: \" + enrollment.getCourse().getCourseName() + \" (ID: \" + enrollment.getCourse().getCourseId() + \")\");\n        System.out.println(\"Enrollment Date: \" + enrollment.getEnrollmentDate());\n        System.out.println();\n    }\n}\n"
    },
    {
        "instructions": "Write a code that represents a banking system designed to manage customer accounts and transactions. It comprises three main classes: Customer, Account, and Transaction, each serving a specific purpose within the system. Customers can hold accounts, and transactions can be performed on these accounts. The system maintains essential details such as customer information, account details, and transaction records.",
        "input": "",
        "output": "import java.util.*;\n\nclass Customer {\n    private String customerId;\n    private String name;\n    private String email;\n    private String phone;\n\n    public Customer(String name, String email, String phone) {\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n        this.customerId = generateID();\n    }\n\n    private String generateID() {\n        return \"CUST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public boolean validateID() {\n        return customerId != null && customerId.startsWith(\"CUST-\");\n    }\n}\n\nclass Account {\n    private String accountId;\n    private Customer customer;\n    private double balance;\n\n    public Account(Customer customer, double initialDeposit) {\n        this.customer = customer;\n        this.balance = initialDeposit;\n        this.accountId = generateID();\n    }\n\n    private String generateID() {\n        return \"ACC-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getAccountId() {\n        return accountId;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n        }\n    }\n\n    public void withdraw(double amount) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n        }\n    }\n\n    public boolean validateID() {\n        return accountId != null && accountId.startsWith(\"ACC-\");\n    }\n}\n\nclass Transaction {\n    private String transactionId;\n    private Account account;\n    private double amount;\n    private Date date;\n    private String type; // \"Deposit\" or \"Withdrawal\"\n\n    public Transaction(Account account, double amount, String type) {\n        this.account = account;\n        this.amount = amount;\n        this.type = type;\n        this.date = new Date();\n        this.transactionId = generateID();\n    }\n\n    private String generateID() {\n        return \"TRANS-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getTransactionId() {\n        return transactionId;\n    }\n\n    public Account getAccount() {\n        return account;\n    }\n\n    public double getAmount() {\n        return amount;\n    }\n\n    public Date getDate() {\n        return date;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public boolean validateID() {\n        return transactionId != null && transactionId.startsWith(\"TRANS-\");\n    }\n\n    public double calculateTransactionFee() {\n        return type.equals(\"Withdrawal\") ? amount * 0.02 : 0;\n    }\n}\n\npublic class BankingSystem {\n    public static void main(String[] args) {\n        // Create Customer\n        Customer customer = new Customer(\"John Doe\", \"john@example.com\", \"123-456-7890\");\n\n        // Create Account\n        Account account = new Account(customer, 5000.00);\n\n        // Perform Transactions\n        account.deposit(1500.00);\n        Transaction depositTransaction = new Transaction(account, 1500.00, \"Deposit\");\n\n        account.withdraw(2000.00);\n        Transaction withdrawalTransaction = new Transaction(account, 2000.00, \"Withdrawal\");\n\n        // Display Transaction Details\n        displayTransactionDetails(depositTransaction);\n        displayTransactionDetails(withdrawalTransaction);\n    }\n\n    public static void displayTransactionDetails(Transaction transaction) {\n        System.out.println(\"Transaction ID: \" + transaction.getTransactionId());\n        System.out.println(\"Account ID: \" + transaction.getAccount().getAccountId());\n        System.out.println(\"Customer: \" + transaction.getAccount().getCustomer().getName() + \" (ID: \" + transaction.getAccount().getCustomer().getCustomerId() + \")\");\n        System.out.println(\"Amount: \" + transaction.getAmount());\n        System.out.println(\"Date: \" + transaction.getDate());\n        System.out.println(\"Type: \" + transaction.getType());\n        System.out.println(\"Transaction Fee: $\" + transaction.calculateTransactionFee());\n    }\n}"
    },
    {
        "instructions": "Write a code that represents a hospital management system designed to streamline patient appointments with doctors. It comprises three main classes: Patient, Doctor, and Appointment, each serving a specific purpose within the system. Patients can schedule appointments with doctors, and the system maintains essential details such as patient information, doctor details, and appointment dates.",
        "input": "",
        "output": "import java.util.*;\n\nclass Patient {\n    private String patientId;\n    private String name;\n    private int age;\n    private String gender;\n    private String medicalCondition;\n\n    public Patient(String name, int age, String gender, String medicalCondition) {\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n        this.medicalCondition = medicalCondition;\n        this.patientId = generateID();\n    }\n\n    private String generateID() {\n        return \"PAT-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getPatientId() {\n        return patientId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String getGender() {\n        return gender;\n    }\n\n    public String getMedicalCondition() {\n        return medicalCondition;\n    }\n}\n\nclass Doctor {\n    private String doctorId;\n    private String name;\n    private String specialization;\n\n    public Doctor(String name, String specialization) {\n        this.name = name;\n        this.specialization = specialization;\n        this.doctorId = generateID();\n    }\n\n    private String generateID() {\n        return \"DOC-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getDoctorId() {\n        return doctorId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getSpecialization() {\n        return specialization;\n    }\n}\n\nclass Appointment {\n    private String appointmentId;\n    private Patient patient;\n    private Doctor doctor;\n    private Date date;\n\n    public Appointment(Patient patient, Doctor doctor, Date date) {\n        this.patient = patient;\n        this.doctor = doctor;\n        this.date = date;\n        this.appointmentId = generateID();\n    }\n\n    private String generateID() {\n        return \"APPT-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getAppointmentId() {\n        return appointmentId;\n    }\n\n    public Patient getPatient() {\n        return patient;\n    }\n\n    public Doctor getDoctor() {\n        return doctor;\n    }\n\n    public Date getDate() {\n        return date;\n    }\n}\n\npublic class HospitalManagementSystem {\n    public static void main(String[] args) {\n        // Create Patient\n        Patient patient = new Patient(\"John Doe\", 35, \"Male\", \"Fever\");\n\n        // Create Doctor\n        Doctor doctor = new Doctor(\"Dr. Smith\", \"Internal Medicine\");\n\n        // Schedule Appointment\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(Calendar.YEAR, 2024);\n        calendar.set(Calendar.MONTH, Calendar.MAY);\n        calendar.set(Calendar.DAY_OF_MONTH, 15);\n        Date date = calendar.getTime();\n        Appointment appointment = new Appointment(patient, doctor, date);\n\n        // Display Appointment Details\n        displayAppointmentDetails(appointment);\n    }\n\n    public static void displayAppointmentDetails(Appointment appointment) {\n        System.out.println(\"Appointment ID: \" + appointment.getAppointmentId());\n        System.out.println(\"Patient: \" + appointment.getPatient().getName() + \" (ID: \" + appointment.getPatient().getPatientId() + \")\");\n        System.out.println(\"Doctor: \" + appointment.getDoctor().getName() + \" (ID: \" + appointment.getDoctor().getDoctorId() + \")\");\n        System.out.println(\"Date: \" + appointment.getDate());\n    }\n}"
    },
    {
        "instructions": "write a code that simulates a hotel management system with classes for Room, Guest, and Reservation. It allows guests to book rooms and keeps track of reservation details such as check-in and check-out dates.",
        "input": "",
        "output": "import java.util.*;\n\nclass Room {\n    private String roomId;\n    private int capacity;\n    private boolean available;\n\n    public Room(int capacity) {\n        this.capacity = capacity;\n        this.roomId = generateID();\n        this.available = true;\n    }\n\n    private String generateID() {\n        return \"ROOM-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getRoomId() {\n        return roomId;\n    }\n\n    public int getCapacity() {\n        return capacity;\n    }\n\n    public boolean isAvailable() {\n        return available;\n    }\n\n    public void setAvailable(boolean available) {\n        this.available = available;\n    }\n}\n\nclass Guest {\n    private String guestId;\n    private String name;\n    private String email;\n    private String phone;\n\n    public Guest(String name, String email, String phone) {\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n        this.guestId = generateID();\n    }\n\n    private String generateID() {\n        return \"GUEST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getGuestId() {\n        return guestId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n}\n\nclass Reservation {\n    private String reservationId;\n    private Room room;\n    private Guest guest;\n    private Date checkInDate;\n    private Date checkOutDate;\n    private boolean checkedIn;\n    private boolean checkedOut;\n\n    public Reservation(Room room, Guest guest, Date checkInDate, Date checkOutDate) {\n        this.room = room;\n        this.guest = guest;\n        this.checkInDate = checkInDate;\n        this.checkOutDate = checkOutDate;\n        this.reservationId = generateID();\n        this.checkedIn = false;\n        this.checkedOut = false;\n    }\n\n    private String generateID() {\n        return \"RES-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getReservationId() {\n        return reservationId;\n    }\n\n    public Room getRoom() {\n        return room;\n    }\n\n    public Guest getGuest() {\n        return guest;\n    }\n\n    public Date getCheckInDate() {\n        return checkInDate;\n    }\n\n    public Date getCheckOutDate() {\n        return checkOutDate;\n    }\n\n    public boolean isCheckedIn() {\n        return checkedIn;\n    }\n\n    public boolean isCheckedOut() {\n        return checkedOut;\n    }\n\n    public void checkIn() {\n        this.checkedIn = true;\n    }\n\n    public void checkOut() {\n        this.checkedOut = true;\n    }\n\n    public void displayReservationDetails() {\n        System.out.println(\"Reservation ID: \" + reservationId);\n        System.out.println(\"Guest: \" + guest.getName());\n        System.out.println(\"Room: \" + room.getRoomId() + \", Capacity: \" + room.getCapacity());\n        System.out.println(\"Check-in Date: \" + checkInDate);\n        System.out.println(\"Check-out Date: \" + checkOutDate);\n        if (checkedIn) {\n            System.out.println(\"Checked-in: Yes\");\n        } else {\n            System.out.println(\"Checked-in: No\");\n        }\n        if (checkedOut) {\n            System.out.println(\"Checked-out: Yes\");\n        } else {\n            System.out.println(\"Checked-out: No\");\n        }\n    }\n}\n\npublic class HotelManagementSystem {\n    public static void main(String[] args) {\n        // Create Room\n        Room room1 = new Room(2);\n\n        // Create Guest\n        Guest guest1 = new Guest(\"Alice Johnson\", \"alice.johnson@example.com\", \"1234567890\");\n\n        // Create Reservation\n        Date checkInDate = new Date();\n        Calendar cal = Calendar.getInstance();\n        cal.add(Calendar.DAY_OF_MONTH, 3); // Check-out in 3 days\n        Date checkOutDate = cal.getTime();\n        Reservation reservation1 = new Reservation(room1, guest1, checkInDate, checkOutDate);\n\n        // Display Reservation Details\n        reservation1.displayReservationDetails();\n    }\n}"
    },
    {
        "instructions": "write a code that simulates a car rental system with classes for Car, Customer, and Rental. It allows customers to rent cars for a specified duration and calculates the total rental amount.",
        "input": "",
        "output": "import java.util.*;\n\nclass Car {\n    private String carId;\n    private String brand;\n    private String model;\n    private double rentalRatePerDay;\n    private boolean available;\n\n    public Car(String brand, String model, double rentalRatePerDay) {\n        this.brand = brand;\n        this.model = model;\n        this.rentalRatePerDay = rentalRatePerDay;\n        this.carId = generateID();\n        this.available = true;\n    }\n\n    private String generateID() {\n        return \"CAR-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getCarId() {\n        return carId;\n    }\n\n    public String getBrand() {\n        return brand;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public double getRentalRatePerDay() {\n        return rentalRatePerDay;\n    }\n\n    public boolean isAvailable() {\n        return available;\n    }\n\n    public void setAvailable(boolean available) {\n        this.available = available;\n    }\n}\n\nclass Customer {\n    private String customerId;\n    private String name;\n    private String email;\n    private String phone;\n\n    public Customer(String name, String email, String phone) {\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n        this.customerId = generateID();\n    }\n\n    private String generateID() {\n        return \"CUST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n}\n\nclass Rental {\n    private String rentalId;\n    private Car car;\n    private Customer customer;\n    private Date startDate;\n    private Date endDate;\n    private double totalAmount;\n\n    public Rental(Car car, Customer customer, Date startDate, Date endDate) {\n        this.car = car;\n        this.customer = customer;\n        this.startDate = startDate;\n        this.endDate = endDate;\n        this.rentalId = generateID();\n        calculateTotalAmount();\n    }\n\n    private String generateID() {\n        return \"RENT-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getRentalId() {\n        return rentalId;\n    }\n\n    public Car getCar() {\n        return car;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public Date getStartDate() {\n        return startDate;\n    }\n\n    public Date getEndDate() {\n        return endDate;\n    }\n\n    public double getTotalAmount() {\n        return totalAmount;\n    }\n\n    private void calculateTotalAmount() {\n        long diffInMillies = Math.abs(endDate.getTime() - startDate.getTime());\n        long diffInDays = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);\n        totalAmount = diffInDays * car.getRentalRatePerDay();\n    }\n\n    public void displayRentalDetails() {\n        System.out.println(\"Rental ID: \" + rentalId);\n        System.out.println(\"Car: \" + car.getBrand() + \" \" + car.getModel());\n        System.out.println(\"Customer: \" + customer.getName());\n        System.out.println(\"Start Date: \" + startDate);\n        System.out.println(\"End Date: \" + endDate);\n        System.out.println(\"Total Amount: $\" + totalAmount);\n    }\n}\n\npublic class CarRentalSystem {\n    public static void main(String[] args) {\n        // Create Car\n        Car car1 = new Car(\"Toyota\", \"Camry\", 50.0);\n\n        // Create Customer\n        Customer customer1 = new Customer(\"John Doe\", \"john.doe@example.com\", \"1234567890\");\n\n        // Create Rental\n        Date startDate = new Date();\n        Calendar cal = Calendar.getInstance();\n        cal.add(Calendar.DAY_OF_MONTH, 7); // Rental for 7 days\n        Date endDate = cal.getTime();\n        Rental rental1 = new Rental(car1, customer1, startDate, endDate);\n\n        // Display Rental Details\n        rental1.displayRentalDetails();\n    }\n}"
    },
    {
        "instructions": "Write a Java program that models a library management system. The program should include classes for Book, LibraryMember, and LibraryLoan. Each Book represents a book in the library with attributes such as title, author, and ISBN. The LibraryMember class represents a member of the library who can borrow books. The LibraryLoan class represents a loan transaction, indicating which book was borrowed by which member. Ensure that the program includes methods for generating and validating IDs for each class, checking out and returning books, calculating late fees, and displaying loan details.",
        "input": "",
        "output": "import java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nclass Book {\n    private String isbn;\n    private String title;\n    private String author;\n\n    public Book(String title, String author, String isbn) {\n        this.title = title;\n        this.author = author;\n        this.isbn = isbn;\n    }\n\n    public String getIsbn() {\n        return isbn;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n}\n\nclass LibraryMember {\n    private String memberId;\n    private String name;\n\n    public LibraryMember(String name) {\n        this.name = name;\n        this.memberId = generateID();\n    }\n\n    private String generateID() {\n        return \"MEM-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getMemberId() {\n        return memberId;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\nclass LibraryLoan {\n    private String loanId;\n    private Book book;\n    private LibraryMember member;\n    private Date dueDate;\n\n    public LibraryLoan(Book book, LibraryMember member, Date dueDate) {\n        this.book = book;\n        this.member = member;\n        this.dueDate = dueDate;\n        this.loanId = generateID();\n    }\n\n    private String generateID() {\n        return \"LOAN-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getLoanId() {\n        return loanId;\n    }\n\n    public Book getBook() {\n        return book;\n    }\n\n    public LibraryMember getMember() {\n        return member;\n    }\n\n    public Date getDueDate() {\n        return dueDate;\n    }\n\n    public void returnBook() {\n        // Set the return date\n        Date currentDate = new Date();\n        long diffInMillies = Math.abs(currentDate.getTime() - dueDate.getTime());\n        long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);\n        if (currentDate.after(dueDate)) {\n            double lateFee = calculateLateFee(diff);\n            System.out.println(\"Late fee charged: $\" + lateFee);\n        }\n        // Logic for returning a book (e.g., updating database)\n        System.out.println(\"Book returned successfully.\");\n    }\n\n    public double calculateLateFee(long daysLate) {\n        // Assuming late fee is $1 per day\n        return daysLate * 1.0;\n    }\n\n    public void displayLoanDetails() {\n        // Display loan details\n        System.out.println(\"Loan ID: \" + loanId);\n        System.out.println(\"Book Title: \" + book.getTitle());\n        System.out.println(\"Member Name: \" + member.getName());\n        System.out.println(\"Due Date: \" + dueDate.toString());\n    }\n}\n\npublic class LibraryManagementSystem {\n    public static void main(String[] args) {\n        // Create Book\n        Book book1 = new Book(\"Java Programming\", \"John Doe\", \"978-0134685991\");\n\n        // Create Library Member\n        LibraryMember member1 = new LibraryMember(\"Alice Smith\");\n\n        // Create Library Loan\n        Calendar cal = Calendar.getInstance();\n        cal.add(Calendar.DAY_OF_MONTH, -7); // Due date a week ago (for testing late fee)\n        Date dueDate = cal.getTime();\n        LibraryLoan loan1 = new LibraryLoan(book1, member1, dueDate);\n\n        // Display Loan Details\n        loan1.displayLoanDetails();\n\n        // Return Book\n        loan1.returnBook();\n    }\n}"
    },
    {
        "instructions": "Write a Java code that simulates a bookstore scenario where customers can place orders for books. It includes classes for Book, Customer, and Order, with methods for generating and validating IDs, adding books to orders, calculating total amounts, and displaying order details.",
        "input": "",
        "output": "class Book {\n    private String bookId;\n    private String title;\n    private String author;\n    private double price;\n\n    public Book(String title, String author, double price) {\n        this.title = title;\n        this.author = author;\n        this.price = price;\n        this.bookId = generateID();\n    }\n\n    private String generateID() {\n        return \"BOOK-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getBookId() {\n        return bookId;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public boolean validateID(String id) {\n        return id.matches(\"BOOK-[A-Z0-9]{8}\");\n    }\n}\n\nclass Customer {\n    private String customerId;\n    private String name;\n    private String email;\n\n    public Customer(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.customerId = generateID();\n    }\n\n    private String generateID() {\n        return \"CUST-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public String getCustomerId() {\n        return customerId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public boolean validateID(String id) {\n        return id.matches(\"CUST-[A-Z0-9]{8}\");\n    }\n}\n\nclass Order {\n    private String orderId;\n    private Customer customer;\n    private Book[] books;\n    private int bookCount;\n    private double totalAmount;\n\n    public Order(Customer customer) {\n        this.customer = customer;\n        this.books = new Book[10];\n        this.orderId = generateID();\n        this.bookCount = 0;\n    }\n\n    private String generateID() {\n        return \"ORDER-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    }\n\n    public boolean validateID(String id) {\n        return id.matches(\"ORDER-[A-Z0-9]{8}\");\n    }\n\n    public String getOrderId() {\n        return orderId;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public Book[] getBooks() {\n        return Arrays.copyOf(books, bookCount);\n    }\n\n    public double getTotalAmount() {\n        return totalAmount;\n    }\n\n    public void addBook(Book book) {\n        if (book != null && book.validateID(book.getBookId()) && bookCount < books.length) {\n            books[bookCount++] = book;\n            calculateTotalAmount();\n        }\n    }\n\n    private void calculateTotalAmount() {\n        totalAmount = 0;\n        for (Book book : books) {\n            if (book != null) {\n                totalAmount += book.getPrice();\n            }\n        }\n    }\n\n    public void displayOrderDetails() {\n        System.out.println(\"Order ID: \" + orderId);\n        System.out.println(\"Customer ID: \" + customer.getCustomerId() + \", Name: \" + customer.getName());\n        System.out.println(\"Books:\");\n        for (Book book : books) {\n            if (book != null) {\n                System.out.println(\"  ID: \" + book.getBookId() + \", Title: \" + book.getTitle() + \", Author: \" + book.getAuthor() + \", Price: $\" + book.getPrice());\n            }\n        }\n        System.out.println(\"Total Amount: $\" + totalAmount);\n    }\n}\n\npublic class Bookstore {\n    public static void main(String[] args) {\n        // Create Customer\n        Customer customer = new Customer(\"Alice Smith\", \"alice@example.com\");\n\n        // Create Books\n        Book book1 = new Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\", 9.99);\n        Book book2 = new Book(\"To Kill a Mockingbird\", \"Harper Lee\", 12.50);\n        Book book3 = new Book(\"1984\", \"George Orwell\", 8.75);\n\n        // Create Order and add Books\n        Order order = new Order(customer);\n        order.addBook(book1);\n        order.addBook(book2);\n        order.addBook(book3);\n\n        // Display Order Details\n        order.displayOrderDetails();\n\n        // Validate IDs\n        System.out.println(\"Valid Book ID? \" + book1.validateID(book1.getBookId()));\n        System.out.println(\"Valid Customer ID? \" + customer.validateID(customer.getCustomerId()));\n System.out.println(\"Valid Order ID? \" + order.validateID(order.getOrderId())); \n}\n}\n "
    }
]